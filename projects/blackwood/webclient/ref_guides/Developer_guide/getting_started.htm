
<html>
<head>
<link rel="top" title="Home" href="http://www.mozilla.org/">
<link rel="stylesheet" type="text/css" href="../../../../../css/print.css"  media="print">
<link rel="stylesheet" type="text/css" href="../../../../../css/base/content.css"  media="all">
<link rel="stylesheet" type="text/css" href="../../../../../css/cavendish/content.css" title="Cavendish" media="screen">
<link rel="stylesheet" type="text/css" href="../../../../../css/base/template.css"  media="screen">
<link rel="stylesheet" type="text/css" href="../../../../../css/cavendish/template.css" title="Cavendish" media="screen">
<link rel="icon" href="../../../../../images/mozilla-16.png" type="image/png">

<title>Webclient Developers Guide - Getting Started</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<style type="text/css">
   font.highlight {background-color:yellow}
</style>
<script language="JavaScript">
<!--
function MM_openBrWindow(theURL,winName,features) { //v2.0
  window.open(theURL,winName,features);
}
//-->
</script>
<script src="../../../../../__utm.js" type="text/javascript"></script>
</head>
<body id="www-mozilla-org" class="deepLevel">
<div id="container">
<p class="important">You are currently viewing a snapshot of www.mozilla.org taken on April 21, 2008. Most of this content is
highly out of date (some pages haven't been updated since the project began in 1998) and exists for historical purposes only.  If
there are any pages on this archive site that you think should be added back to www.mozilla.org, please <a
href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Websites&component=www.mozilla.org">file a bug</a>.</p>
<p class="skipLink"><a href="#mainContent" accesskey="2">Skip to main content</a></p>
<div id="header">
<h1><a href="/" title="Return to home page" accesskey="1">Mozilla</a></h1>
<ul>
<li id="menu_aboutus"><a href="../../../../../about/" title="Getting the most out of your online experience">About</a></li>
<li id="menu_developers"><a href="../../../../../developer/" title="Using Mozilla's products for your own applications">Developers</a></li>
<li id="menu_store"><a href="http://store.mozilla.org/?r=mozorg1" title="Shop for Mozilla products on CD and other merchandise">Store</a></li>
<li id="menu_support"><a href="../../../../../support/" title="Installation, trouble-shooting, and the knowledge base">Support</a></li>
<li id="menu_products"><a href="../../../../../products/" title="All software Mozilla currently offers">Products</a></li>
</ul>
<form id="searchbox_002443141534113389537:ysdmevkkknw" action="http://www.google.com/cse" title="mozilla.org Search">
<div>
<label for="q" title="Search mozilla.org's sites">search mozilla:</label>
<input type="hidden" name="cx" value="002443141534113389537:ysdmevkkknw">
<input type="hidden" name="cof" value="FORID:0">
<input type="text" id="q" name="q" accesskey="s" size="30">
<input type="submit" id="submit" value="Go">
</div>
</form>
</div>
<hr class="hide">
<div id="mBody">
<div id="side">

<ul id="nav">
<li><a title="Roadmap" href="../../../../../roadmap.html"><strong> Roadmap</strong></a></li>
<li><a title="Projects" href="../../../../../projects/"><strong> Projects</strong></a></li>
<li><a title="For developers" href="../../../../../developer/"><strong> Coding</strong></a>
<ul>
<li><a title="Module Owners" href="../../../../../owners.html"> Module Owners</a></li>
<li><a title="Hacking" href="../../../../../hacking/"> Hacking</a></li>
<li><a title="Get the Source" href="http://developer.mozilla.org/en/docs/Download_Mozilla_Source_Code"> Get the Source</a></li>
<li><a title="Building Mozilla" href="http://developer.mozilla.org/en/docs/Build_Documentation"> Build It</a></li>
</ul>
</li>
<li><a title="Testing" href="../../../../../quality/"><strong> Testing</strong></a>
<ul>
<li><a title="Downloads of mozilla.org software releases" href="../../../../../download.html"> Releases</a></li>
<li><a title="Latest mozilla builds for testers" href="../../../../../developer/#builds"> Nightly Builds</a></li>
<li><a title="For testers to report bugs" href="https://bugzilla.mozilla.org/"> Report A Problem</a></li>
</ul>
</li>
<li><a title="Tools for mozilla developers" href="../../../../../tools.html"><strong> Tools</strong></a>
<ul>
<li><a title="Bug tracking system for mozilla testers." href="https://bugzilla.mozilla.org/"> Bugzilla</a></li>
<li><a title="Latest status of mozilla builds" href="http://tinderbox.mozilla.org/showbuilds.cgi?tree=Firefox"> Tinderbox</a></li>
<li><a title="Latest checkins" href="http://bonsai.mozilla.org/cvsqueryform.cgi"> Bonsai</a></li>
<li><a title="Source cross reference" href="http://lxr.mozilla.org/seamonkey/"> LXR</a></li>
</ul>
</li>
<li><a title="Frequently Asked Questions." href="../../../../../faq.html"><strong> FAQs</strong></a></li>
</ul>

</div>
<hr class="hide">
<div id="mainContent">




<center>
<h1>Webclient Developers Guide</h1>
<h2>Getting Started: an Example</h2></center>
<div align="center"> 
  <p>
      <a href="introduction.htm">Introduction</a>
    | <a href="references.htm">References</a> 
    | <a href="api/index.htm">API</a></font></center>
<p>
   This section tells you how to use Webclient to embed a web browser in a 
   custom Java application. The discussion is based upon the test example 
   located in the <code>org.mozilla.webclient</code>.<code>test </code>package. 
   Below is a sequence diagram showing classes and objects from 
   <code>org.mozilla.webclient.test</code>, <code>java.awt</code>, and the 
   public package <code>org.mozilla.webclient</code>. Members of 
   <code>test</code> and <code>awt</code> are shown in shaded package boxes.
<p>The two objects in the <code>test</code> package &#151; <code>em</code> 
   and <code>aEMWindow</code> &#151; represent the custom application. As 
   shown in the diagram, they are, respectively, instances of the following 
   Java classes: 
  
<h4><code>EmbeddedMozilla</code></h3>
<blockquote> 
  <div>This is the Java class that contains the <code>main()</code> 
  method of the custom application.</div></blockquote>
<h4><code>EMWindow</code></h4>
<blockquote> 
  <div>This is the Java class that is the <code>Frame</code> containing 
  the embedded browser window, as well as a menu bar, a URL textfield and 
  browser control buttons.</div></blockquote>
<p>Following the sequence diagram is a brief description of the 
   code, then a summary of what your application needs to do to use 
   Webclient.</p>

<ul>
  <li><a href="#sequence">Sequence Diagram</a></li>
  <li><a href="#description">Description</a></li>
  <li><a href="#summary">Summary</a></li>
</ul>

<h2 align="center"><a name="sequence"></a>Sequence Diagram</h2>
<p>&nbsp;</p>
<p align="center"><img src="images/setup3_simple.gif" width="790" height="1084">
<p></p>
<h2 align="center"><a name="description"></a>Description </h2>
<p>The Webclient test is essentially a small custom application that embeds 
   the Mozilla web browser using Webclient. It consists of a number of files 
   and is launched via <code>EmbeddedMozilla.java.</code> However, the main 
   activity takes place in <code>EMWindow.java</code>. </p>
<p>Here is a description of the primary public classes and objects involved, 
   the way objects are created, and the sequence of method invocations. All 
   are highlighted in the code as they are in the text below. Note that 
   <code>EmbeddedMozilla.java</code> creates an instance of itself called 
   <code>em</code> in its <code>main()</code> method, which should normally 
   have two arguments: </p>
<ul>
  <li><code>arg[0]</code>: <code>binDir</code>, the location of the 
  <code>bin</code> directory for Mozilla, and </li>
  <li><code>arg[1]</code>: <code>url</code>, the <code>url</code> to be 
  initially displayed. </li>
</ul>
<p>The constructor of <code>EmbeddedMozilla</code> then invokes 
   <code>CreateEMWindow()</code>, which creates an instance of 
   <code>EMWindow</code> called <code>aEMWindow</code>. (The constructor of 
   <code>EMWindow</code> is passed <code>binDir</code> and 
   <code>url</code>.)</p>
<p>You can view the code for <code>EMWindow.java</code> by pressing the 
   button below. Note that for easy reference, code highlighted in the text 
   below is also highlighted in the source.</p>
   
<form method="post" action="">
  <input type="button" name="Button22" value="See EMWindow.java code" onClick="MM_openBrWindow('code_samples/EMWindow.java.htm','EMWindow','menubar=yes,scrollbars=yes,resizable=yes')">
</form>
<p>You can also view this code at:</p>
<p><a href="http://lxr.mozilla.org/mozilla/source/java/webclient/classes_spec/org/mozilla/webclient/test/EMWindow.java">
   http://lxr.mozilla.org/mozilla/source/java/webclient/classes_spec/org/mozilla/webclient/test/EMWindow.java</a></p>
<p>You can view the source for EmbeddedMozilla.java at:</p>
<p><a href="http://lxr.mozilla.org/mozilla/source/java/webclient/classes_spec/org/mozilla/webclient/test/EmbeddedMozilla.java">
   http://lxr.mozilla.org/mozilla/source/java/webclient/classes_spec/org/mozilla/webclient/test/EmbeddedMozilla.java</a></p>
<p><font class=highlight><code>public EMWindow (String title, String binDir, String 
  url, int winnum, EmbeddedMozilla Creator) ...</code></font></p>
<p>The constructor of <code>EMWindow.java</code> handles much of the setup for 
  embedding Mozilla. It sets up the menu bar for the frame. It creates a URL 
  textfield and navigation buttons and adds them to a panel. Then it creates the 
  browser.</p>
<p><font class=highlight><code>BrowserControlFactory.setAppData(binDir);</code></font></p>
<p>There is one <code>BrowserControlFactory</code> class per Webclient application. 
  It is the starting point for using Webclient for embedding a browser. (It is 
  a pre-existing class, not an interface.) Its <code>setAppData()</code>method, 
  as shown above, takes a single argument, <code>String</code> 
  <code>absolutePathToNativeBrowserBinDir</code>. (This is the absolute path to 
  the <code>bin</code>, or binary executable directory of the native web browser 
  that we are embedding &#151; in this case the directory with the 
  platform-specific executable for Mozilla.)</p>
<p><font class=highlight><code>browserControl = BrowserControlFactory.newBrowserControl();</code></font></p>
<p>Next, <code>EMWindow.java</code> invokes <code>newBrowserControl()</code> on 
  <code>BrowserControlFactory</code> to get an implementation of the 
  <code>BrowserControlInterface</code>. This is the core Webclient interface; 
  all other interfaces are obtained from it.</p>
<pre>
<font class=highlight>browserCanvas =</font> 
    <font class=highlight>(BrowserControlCanvas)</font> 
    <font class=highlight>browserControl.queryInterface(BrowserControl.BROWSER_CONTROL_CANVAS_NAME);</font>
</pre>
<p>Next, <code>browserControl</code> is asked for its <code>BrowserControlCanvas</code>. 
  <code>BrowserControlCanvas</code> is a <code>java.awt.Canvas</code> subclass 
  that allows custom application developers to insert the web browser into their 
  container hierarchy. It is important that <code>browserCanvas</code> is the 
  first interface obtained from <code>browserControl</code>, and that this 
  interface is added to the container hierarchy soon after it is obtained. </p>
  
<p><font class=highlight><code>add(controlPanel, BorderLayout.NORTH); <br>
  add(browserCanvas, BorderLayout.CENTER);</code></font></p>
  
<p>Next, the panel with the URL textfield and navigation buttons are added to 
  the frame, as well as <code>browserCanvas</code>. </p>
<p>Once this is done, other interfaces, such as <code>navigation</code>, 
   <code>currentPage</code>, <code>history</code>, and 
   <code>eventRegistration</code>, are obtained via 
   <code>browerControl.queryInterface()</code>.</p>
<p><font class=highlight><code>public void actionPerformed (ActionEvent evt) 
  { </code></font></p>
<p><code>actionPerformed()</code> implements <code>EMWindow.java</code> as an 
  <code>ActionListener</code> and responds to events such as navigation buttons 
  being pressed. <code>makeItem()</code> adds <code>EMWindow</code> as an 
  <code>ActionListener</code> to each button component.</p>
  
<p><font class=highlight><code>public void eventDispatched(WebclientEvent event)
   </code></font></p>
<p><code>eventDispatched()</code> implements <code>EMWindow.java</code> as a 
   <code>DocumentLoadListener</code>. 
   <code>DocumentLoadListener</code> extends <code>WebEventListener</code> and 
   gets notice of events by registering via the <code>eventRegistration</code> 
   object , which is created by the constructor for <code>EMWindow.java</code>. 
   Following <code>eventDispatched()</code>, you will notice five methods that 
   are implemented to make <code>EMWindow.java</code> a <code>MouseListener</code>: 
  <code>mouseClicked()</code>, <code>mouseEntered()</code>, 
  <code>mouseExited()</code>, <code>mousePressed()</code> and 
  <code>mouseReleased()</code>. Note that following the creation of 
  <code>eventRegistration</code> (mentioned previously), the <code>EMWindow</code> 
  object was added as a <code>DocumentLoadListener</code> and a 
  <code>MouseListener</code> via these statements:</p>
<p><font class=highlight><code>eventRegistration.addDocumentLoadListener(this);<br>
   eventRegistration.addMouseListener(this);</code></font></p>
<p>The <code>EventRegistration</code> interface contains four methods: one to 
   add, and another to remove, a <code>DocumentLoadListener</code>; another to 
   add, and another to remove, a <code>MouseListener</code>.</p>
<h2  align="center"><a name="summary"></a>Summary</h2></center>
<p>In summary, to use Webclient to embed a browser in your custom application, 
   this is what you need to do:</p>
<ol>
  <li>In the class that is the main frame of your application, import 
  <code>org.mozilla.webclient.*</code>, <code>org.mozilla.util.Assert</code>, 
  <code>java.awt.*</code> and any other packages that you need.</li>
  <li>Create an instance of the main frame class.</li>
  <li>Add a menu bar (optional) and add the instance of the main frame class 
     (use <code>this</code>) as an <code>ActionListener</code> to menu items 
     as your application requires. (For example, if you have a 
     Search&gt;Find menu item, you will want to add <code>this</code> as an 
     <code>ActionListener</code> to it.)</li>
  <li>Create a textfield for a URL and add the main frame instance to it as an 
    <code>ActionListener</code>.</li>
  <li>Create a button panel, create navigation buttons to control the browser, 
    add the main frame instance as an <code>ActionListerner</code> to each button, 
    and add each button to the button panel.</li>
  <li>Create a &quot;control&quot; panel and add the URL textfield and button 
    panel to it.</li>
  <li>Create the browser by first invoking <code>setAppData()</code> on 
  <code>BrowserControlFactory</code>.</li>
  <li>Create a <code>BrowserControl</code> object by invoking 
  <code>newBrowserControl()</code> on <code>BrowserControlFactory</code>.</li>
  <li>Create a <code>BrowserControlCanvas</code> object by invoking the 
  <code>queryInterface()</code> method on the newly created 
  <code>BrowserControl</code> object, passing 
  <code>BrowserControl.BROWSER_CONTROL_CANVAS_NAME</code> to the method.</li>
  <li>Add the control panel and the <code>BrowserControlCanvas</code> object to 
    the frame.</li>
  <li>Use the <code>queryInterface()</code> method of 
  <code>BrowserControlImpl</code> to obtain <code>Navigation</code>, 
  <code>History</code>, <code>Bookmark</code>, <code>EventRegistration</code>
   ... interfaces as required by your particular application.</li>
  <li>Add the main frame instance as a <code>DocumentLoadListener</code> via the 
    <code>EventRegistration.addDocumentListener()</code> method. Use 
    <code>this</code> to do so when writing your frame class, as shown in the 
    example.</li>
  <li>Add the main frame instance as a <code>MouseListener</code> via the 
  <code>EventRegistration.addMouseListener()</code> method. Use 
  <code>this</code> to do so when writing your frame class, as shown 
    in the example.</li>
  <li>Implement <code>ActionListener</code>, <code>DocumentLoadListener</code>, 
    <code>MouseListener</code> and other listener interfaces as required by your 
    application.</li>
</ol>

<h4>Blackwood Release 0.9/Netscape PR3 - Last Modified 10/17/2000</h4>
<p>&nbsp;</p>
<p align="left">&nbsp; </p>
<pre>&nbsp; </pre>



<hr class="hide">
</div>
</div>
<div id="footer">
<ul>
<li><a href="../../../../../sitemap.html">Site Map</a></li>
<li><a href="../../../../../security/">Security Updates</a></li>
<li><a href="../../../../../contact/">Contact Us</a></li>
<li><a href="../../../../../foundation/donate.html">Donate</a></li>
</ul>
<p class="copyright">
Portions of this content are &copy; 1998&#8211;2009 by individual mozilla.org
contributors; content available under a Creative Commons license | <a
href="http://www.mozilla.org/foundation/licensing/website-content.html">Details</a>.</p>
<p>
<span>Last modified October 19,  2000</span>
<span><a href="http://bonsai-www.mozilla.org/cvslog.cgi?file=mozilla-org/html/projects/blackwood/webclient/ref_guides/Developer_guide/getting_started.htm&amp;rev=&amp;root=/www/">Document History</a></span>
</p>
</div>
</div>
</body>
</html>
