<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
<link rel="top" title="Home" href="http://www.mozilla.org/">
<link rel="stylesheet" type="text/css" href="../../../../../css/print.css"  media="print">
<link rel="stylesheet" type="text/css" href="../../../../../css/base/content.css"  media="all">
<link rel="stylesheet" type="text/css" href="../../../../../css/cavendish/content.css" title="Cavendish" media="screen">
<link rel="stylesheet" type="text/css" href="../../../../../css/base/template.css"  media="screen">
<link rel="stylesheet" type="text/css" href="../../../../../css/cavendish/template.css" title="Cavendish" media="screen">
<link rel="icon" href="../../../../../images/mozilla-16.png" type="image/png">

   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (X11; I; SunOS 5.8 sun4u) [Netscape]">
   <title>Sequence Diagram and Description</title>
<style type="text/css">
   font.highlight {background-color:yellow}
</style>
<script language="JavaScript">
<!--
function MM_openBrWindow(theURL,winName,features) { //v2.0
  window.open(theURL,winName,features);
}
//-->
</script>
<script src="../../../../../__utm.js" type="text/javascript"></script>
</head>
<body id="www-mozilla-org" class="deepLevel">
<div id="container">
<p class="important">You are currently viewing a snapshot of www.mozilla.org taken on April 21, 2008. Most of this content is
highly out of date (some pages haven't been updated since the project began in 1998) and exists for historical purposes only.  If
there are any pages on this archive site that you think should be added back to www.mozilla.org, please <a
href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Websites&component=www.mozilla.org">file a bug</a>.</p>
<p class="skipLink"><a href="#mainContent" accesskey="2">Skip to main content</a></p>
<div id="header">
<h1><a href="/" title="Return to home page" accesskey="1">Mozilla</a></h1>
<ul>
<li id="menu_aboutus"><a href="../../../../../about/" title="Getting the most out of your online experience">About</a></li>
<li id="menu_developers"><a href="../../../../../developer/" title="Using Mozilla's products for your own applications">Developers</a></li>
<li id="menu_store"><a href="http://store.mozilla.org/?r=mozorg1" title="Shop for Mozilla products on CD and other merchandise">Store</a></li>
<li id="menu_support"><a href="../../../../../support/" title="Installation, trouble-shooting, and the knowledge base">Support</a></li>
<li id="menu_products"><a href="../../../../../products/" title="All software Mozilla currently offers">Products</a></li>
</ul>
<form id="searchbox_002443141534113389537:ysdmevkkknw" action="http://www.google.com/cse" title="mozilla.org Search">
<div>
<label for="q" title="Search mozilla.org's sites">search mozilla:</label>
<input type="hidden" name="cx" value="002443141534113389537:ysdmevkkknw">
<input type="hidden" name="cof" value="FORID:0">
<input type="text" id="q" name="q" accesskey="s" size="30">
<input type="submit" id="submit" value="Go">
</div>
</form>
</div>
<hr class="hide">
<div id="mBody">
<div id="side">

<ul id="nav">
<li><a title="Roadmap" href="../../../../../roadmap.html"><strong> Roadmap</strong></a></li>
<li><a title="Projects" href="../../../../../projects/"><strong> Projects</strong></a></li>
<li><a title="For developers" href="../../../../../developer/"><strong> Coding</strong></a>
<ul>
<li><a title="Module Owners" href="../../../../../owners.html"> Module Owners</a></li>
<li><a title="Hacking" href="../../../../../hacking/"> Hacking</a></li>
<li><a title="Get the Source" href="http://developer.mozilla.org/en/docs/Download_Mozilla_Source_Code"> Get the Source</a></li>
<li><a title="Building Mozilla" href="http://developer.mozilla.org/en/docs/Build_Documentation"> Build It</a></li>
</ul>
</li>
<li><a title="Testing" href="../../../../../quality/"><strong> Testing</strong></a>
<ul>
<li><a title="Downloads of mozilla.org software releases" href="../../../../../download.html"> Releases</a></li>
<li><a title="Latest mozilla builds for testers" href="../../../../../developer/#builds"> Nightly Builds</a></li>
<li><a title="For testers to report bugs" href="https://bugzilla.mozilla.org/"> Report A Problem</a></li>
</ul>
</li>
<li><a title="Tools for mozilla developers" href="../../../../../tools.html"><strong> Tools</strong></a>
<ul>
<li><a title="Bug tracking system for mozilla testers." href="https://bugzilla.mozilla.org/"> Bugzilla</a></li>
<li><a title="Latest status of mozilla builds" href="http://tinderbox.mozilla.org/showbuilds.cgi?tree=Firefox"> Tinderbox</a></li>
<li><a title="Latest checkins" href="http://bonsai.mozilla.org/cvsqueryform.cgi"> Bonsai</a></li>
<li><a title="Source cross reference" href="http://lxr.mozilla.org/seamonkey/"> LXR</a></li>
</ul>
</li>
<li><a title="Frequently Asked Questions." href="../../../../../faq.html"><strong> FAQs</strong></a></li>
</ul>

</div>
<hr class="hide">
<div id="mainContent">





<center>
<h1>
webclient implementation guide</h1>
<h1>sequence description and diagram</h1></center>

<center><font size=-1>
        <a href="index.htm">directories &amp; packages</a>
      | <a href="object_hierarchies.htm">object hierarchies</a>
      | <a href="appendix.htm">classes & interfaces</a></font></center>

<p>This section describes how Webclient works in a custom Java application.
While this section bears similarities to the Getting Started section of
the <i>Webclient Developer Guide</i>, it goes into far more depth. Moreover,
the intent here is to serve as a guide to the implementation of Webclient,
not its use.
<p>The discussion is based upon the test example located in <tt>org.mozilla.webclient.test</tt>.
A sequence diagram follows showing classes and objects from
<ul>
<li>
<code>org.mozilla.webclient.test</code></li>

<li><code>org.mozilla.webclient</code>, the public package</li>

<li><code>org.mozilla.webclient.wrapper_native</code>, the private package</li>

<li><code>java.awt</code></li>
</ul>
<p><tt>wrapper_native</tt> is intended for wrapping motif- or win32-based
native web browsers. In our particular test application, a win32-based
native browser is being wrapped.
<p>The two objects in the <tt>test</tt> package, specifically <tt>em</tt>
and <tt>aEMWindow</tt>, represent the custom application. As shown in the
diagram, they are, respectively, instances of the following Java classes:
<h4>
<tt>EmbeddedMozilla</tt></h4>
This is the Java class that contains the <tt>main()</tt> method of the
custom application.
<h4>
<tt>EMWindow</tt></h4>
This is the Java class that is the <tt>Frame</tt> containing the embedded
browser window, as well as a menu bar, a URL textfield and browser control
buttons.
<p>Following the <a href="#sequence">sequence diagram</a> is a brief <a href="#description">description</a>
of the code, then a summary of what is required for your application to
use Webclient.
<center>
<h3>
<a NAME="sequence"></a>UML sequence diagram</h3></center>

<center></centerr>
<p><img SRC="setup3.gif" height=1392 width=997>
<br>&nbsp;
<p><ccenter></center>

<center>
<h3>
<a NAME="description"></a>description</h3></center>
<p>
The Webclient test is essentially a small custom application that embeds
the Mozilla web browser using Webclient. It consists of a number of files
and is launched via <tt>EmbeddedMozilla.java.</tt> However, the main activity
takes place in <tt>EMWindow.java</tt>.
<p>Here is a description of the primary public classes and objects involved,
the way objects are created, and the sequence of method invocations. 
Note that <tt>EmbeddedMozilla.java</tt>
creates an instance of itself called <tt>em</tt> in its <tt>main()</tt>
method, which should normally have two arguments:
<ul>
<li>
<tt>arg[0]</tt>: <tt>binDir</tt>, the location of the <tt>bin</tt> directory
for Mozilla, and</li>

<li>
<tt>arg[1]</tt>: <tt>url</tt>, the url to be initially displayed.</li>
</ul>
The constructor of <tt>EmbeddedMozilla</tt> then invokes <tt>CreateEMWindow()
</tt>,
which creates an instance of <tt>EMWindow</tt> called <tt>aEMWindow</tt>.
(The constructor of <tt>EMWindow</tt> is passed <tt>binDir</tt> and <tt>url</tt>.)
<p>Press the button below to view the code for <tt>EMWindow.java</tt>.
<font class=highlight> Note that for easy reference, code highlighted in the text below is also
highlighted in the source.</font>
&nbsp;
<form method="post" action="">
<input type="button" name="Button22" value="See EMWindow.java code" 
  onClick="MM_openBrWindow('code_samples/EMWindow.java.htm','EMWindow',
  'menubar=yes,scrollbars=yes,resizable=yes')">
  </form>
<p>View <a href="http://lxr.mozilla.org/mozilla/source/java/webclient/classes_spec/org/mozilla/webclient/test/EMWindow.java">EMWindow.java
code</a>. 
<p>View <a href="http://lxr.mozilla.org/mozilla/source/java/webclient/classes_spec/org/mozilla/webclient/test/EmbeddedMozilla.java">
EmbeddedMozilla.java</a> code.
<pre><tt><font class=highlight>public EMWindow (String title, String binDir, String url, int winnum, EmbeddedMozilla Creator) ...</font></tt></pre>
The constructor of <tt>EMWindow.java</tt> handles much of the setup for
embedding Mozilla. It sets up the menu bar for the frame. It creates a
URL textfield and navigation buttons and adds them to a panel. Then it
creates the browser.
<br>&nbsp;
<pre><tt>BrowserControlFactory.setAppData(binDir);</tt></pre>
There is one <tt>BrowserControlFactory</tt> class per Webclient application.
It is the starting point for using Webclient for embedding a browser. (It
is a pre-existing class, not an interface.) Its <tt>setAppData()</tt>method,
as shown above, takes a single argument, <tt>String</tt> <tt>absolutePathToNativeBrowserBinDir</tt>.
(This is the absolute path to the <tt>bin</tt>, or binary executable directory
of the native web browser that we are embedding; in this case the directory
with the platform-specific executable for Mozilla.)
<p><tt>setAppData()</tt> invokes the static method <tt>appInitialize()</tt>
on the class <tt>BrowserControlImpl</tt>, which in turn invokes the <tt>createWrapperFactory()</tt>
method in the same class. This generates <tt>WrapperFactoryImpl</tt> object
(<tt>wrapperFactory</tt>), whose <tt>initialize()</tt> method is then invoked.
<tt>initialize()</tt>
on <tt>wrapperFactory</tt> invokes <tt>nativeAppInitialize()</tt>, a native
method called only once at the beginning of program execution. It allows
native code to handle one-time initialization.
<br>&nbsp;
<pre><tt>browserControl = BrowserControlFactory.newBrowserControl();</tt></pre>
Next, <tt>EMWindow.java</tt> invokes <tt>newBrowserControl()</tt> on
<tt>BrowserControlFactory</tt>
to get an implementation of the <tt>BrowserControlInterface</tt>. This
is the core Webclient interface; all other interfaces are obtained from
it.
<p><tt>newBrowserControl()</tt> generates <tt>newCanvas</tt> and returns
a new instance of <tt>BrowserControlImpl</tt>, which then is set to <tt>browserControl</tt>.
<tt>newCanvas</tt>
is an instance of the <tt>browserControlCanvasClass</tt>, which is determined
by the <tt>setAppData()</tt> method mentioned above.
<tt>newCanvas</tt>
is needed to generate <tt>browserControl</tt>.
<pre><font class=highlight>browserCanvas =&nbsp;
&nbsp;&nbsp;&nbsp; (BrowserControlCanvas)&nbsp;
&nbsp;&nbsp;&nbsp; browserControl.queryInterface(BrowserControl.BROWSER_CONTROL_CANVAS_NAME);</font></pre>
Next, <tt>browserControl</tt> is asked for the <tt>java.awt.Canvas</tt>
subclass <tt>BrowserControlCanvas</tt>. This subclass that allows custom
application developers to insert the web browser into their container hierarchy.
It is important that <tt>browserCanvas</tt>
<ol>
<li>
is the first interface obtained from <tt>browserControl</tt> and</li>

<li>
is added to the container hierarchy soon after it is obtained.</li>
</ol>
<tt>browserControl</tt> is used to generate an object called <tt>browserCanvas</tt>.
<tt>queryInterface()</tt>,
with the above argument, returns the <tt>myCanvas
</tt>object, which is
simply the argument passed to the constructor of
<tt>BrowserControlImpl</tt>
when the instance of <tt>BrowserControlImpl</tt> (called <tt>browserControl</tt>)
was created.
<p><tt><font class=highlight>add(controlPanel, BorderLayout.NORTH);</font></tt>
<br><tt><font class=highlight>add(browserCanvas, BorderLayout.CENTER);</font></tt>
<p>Next, the panel with the URL textfield and navigation buttons are added
to the frame, as well as <tt>browserCanvas</tt>. When <tt>browserCanvas</tt>
is added to the Frame, its <tt>addNotify()</tt> method is called, which,
among other things, creates the <tt>WindowControlImp</tt> object called
<tt>wc</tt>,
and the <tt>createWindow()</tt> method is invoked on it. This gets <tt>nativeWebshell</tt>,
creates an event thread, and invokes <tt>starts()</tt>.
<p>Once this is done, other objects, such as <tt>navigation</tt>, <tt>currentPage</tt>,
<tt>history</tt>,
and <tt>eventRegistration</tt>, are generated via <tt>browerControl.queryInterface()</tt>.
<br>&nbsp;
<pre>
<tt><font class=highlight>public void actionPerformed (ActionEvent evt)</font></tt></pre>
<tt>actionPerformed()</tt> implements <tt>EMWindow.java</tt> as an <tt>ActionListener</tt>
and responds to events such as navigation buttons being pressed. <tt>makeItem()</tt>
adds <tt>EMWindow</tt> as an <tt>ActionListener</tt> to each button component.
<br>&nbsp;
<pre>
<tt><font class=highlight>public void eventDispatched(WebclientEvent event)</font></tt></pre>
<tt>eventDispatched()</tt> implements <tt>EMWindow.java</tt> as a <tt>DocumentLoadListener</tt>.
<tt>DocumentLoadListener</tt>
extends <tt>WebEventListener</tt> and gets notice of events by registering
via the <tt>eventRegistration</tt> object , which is created by the constructor
for <tt>EMWindow.java</tt>. Following
<tt>eventDispatched()</tt>, you will
notice five methods that are implemented to make <tt>EMWindow.java</tt>
a <tt>MouseListener</tt>: <tt>mouseClicked()</tt>,
<tt>mouseEntered()</tt>,
<tt>mouseExited()</tt>,
<tt>mousePressed()</tt> and <tt>mouseReleased()</tt>. Note that following
the creation of <tt>eventRegistration</tt> (mentioned previously), the
<tt>EMWindow</tt> object was added as a <tt>DocumentLoadListener</tt> and
a <tt>MouseListener</tt> via these statements:
<p><tt>eventRegistration.addDocumentLoadListener(this);</tt>
<br><tt>eventRegistration.addMouseListener(this);</tt>
<p>The <tt>EventRegistration</tt> interface contains four methods:
<ul>
<li>
add <tt>DocumentLoadListener</tt></li>

<li>
remove <tt>DocumentLoadListener</tt></li>

<li>
add <tt>MouseListener</tt></li>

<li>
remove <tt>MouseListener</tt></li>
</ul>

<p></p>   
<h5>Blackwood Release 0.9/Netscape PR3 - Last Modified 10/13/2000</h5>
<h2>
&nbsp;</h2>
&nbsp;



<hr class="hide">
</div>
</div>
<div id="footer">
<ul>
<li><a href="../../../../../sitemap.html">Site Map</a></li>
<li><a href="../../../../../security/">Security Updates</a></li>
<li><a href="../../../../../contact/">Contact Us</a></li>
<li><a href="../../../../../foundation/donate.html">Donate</a></li>
</ul>
<p class="copyright">
Portions of this content are &copy; 1998&#8211;2009 by individual mozilla.org
contributors; content available under a Creative Commons license | <a
href="http://www.mozilla.org/foundation/licensing/website-content.html">Details</a>.</p>
<p>
<span>Last modified October 19,  2000</span>
<span><a href="http://bonsai-www.mozilla.org/cvslog.cgi?file=mozilla-org/html/projects/blackwood/webclient/ref_guides/Implementation_guide/sequence.htm&amp;rev=&amp;root=/www/">Document History</a></span>
</p>
</div>
</div>
</body>
</html>
