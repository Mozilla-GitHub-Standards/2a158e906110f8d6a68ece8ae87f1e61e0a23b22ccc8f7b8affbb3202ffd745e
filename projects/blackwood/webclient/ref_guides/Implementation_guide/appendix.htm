
<html>
<head>
<link rel="top" title="Home" href="http://www.mozilla.org/">
<link rel="stylesheet" type="text/css" href="../../../../../css/print.css"  media="print">
<link rel="stylesheet" type="text/css" href="../../../../../css/base/content.css"  media="all">
<link rel="stylesheet" type="text/css" href="../../../../../css/cavendish/content.css" title="Cavendish" media="screen">
<link rel="stylesheet" type="text/css" href="../../../../../css/base/template.css"  media="screen">
<link rel="stylesheet" type="text/css" href="../../../../../css/cavendish/template.css" title="Cavendish" media="screen">
<link rel="icon" href="../../../../../images/mozilla-16.png" type="image/png">

<title>Appendix: Overview of Primary Classes and Interfaces</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<script src="../../../../../__utm.js" type="text/javascript"></script>
</head>
<body id="www-mozilla-org" class="deepLevel">
<div id="container">
<p class="important">You are currently viewing a snapshot of www.mozilla.org taken on April 21, 2008. Most of this content is
highly out of date (some pages haven't been updated since the project began in 1998) and exists for historical purposes only.  If
there are any pages on this archive site that you think should be added back to www.mozilla.org, please <a
href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Websites&component=www.mozilla.org">file a bug</a>.</p>
<p class="skipLink"><a href="#mainContent" accesskey="2">Skip to main content</a></p>
<div id="header">
<h1><a href="/" title="Return to home page" accesskey="1">Mozilla</a></h1>
<ul>
<li id="menu_aboutus"><a href="../../../../../about/" title="Getting the most out of your online experience">About</a></li>
<li id="menu_developers"><a href="../../../../../developer/" title="Using Mozilla's products for your own applications">Developers</a></li>
<li id="menu_store"><a href="http://store.mozilla.org/?r=mozorg1" title="Shop for Mozilla products on CD and other merchandise">Store</a></li>
<li id="menu_support"><a href="../../../../../support/" title="Installation, trouble-shooting, and the knowledge base">Support</a></li>
<li id="menu_products"><a href="../../../../../products/" title="All software Mozilla currently offers">Products</a></li>
</ul>
<form id="searchbox_002443141534113389537:ysdmevkkknw" action="http://www.google.com/cse" title="mozilla.org Search">
<div>
<label for="q" title="Search mozilla.org's sites">search mozilla:</label>
<input type="hidden" name="cx" value="002443141534113389537:ysdmevkkknw">
<input type="hidden" name="cof" value="FORID:0">
<input type="text" id="q" name="q" accesskey="s" size="30">
<input type="submit" id="submit" value="Go">
</div>
</form>
</div>
<hr class="hide">
<div id="mBody">
<div id="side">

<ul id="nav">
<li><a title="Roadmap" href="../../../../../roadmap.html"><strong> Roadmap</strong></a></li>
<li><a title="Projects" href="../../../../../projects/"><strong> Projects</strong></a></li>
<li><a title="For developers" href="../../../../../developer/"><strong> Coding</strong></a>
<ul>
<li><a title="Module Owners" href="../../../../../owners.html"> Module Owners</a></li>
<li><a title="Hacking" href="../../../../../hacking/"> Hacking</a></li>
<li><a title="Get the Source" href="http://developer.mozilla.org/en/docs/Download_Mozilla_Source_Code"> Get the Source</a></li>
<li><a title="Building Mozilla" href="http://developer.mozilla.org/en/docs/Build_Documentation"> Build It</a></li>
</ul>
</li>
<li><a title="Testing" href="../../../../../quality/"><strong> Testing</strong></a>
<ul>
<li><a title="Downloads of mozilla.org software releases" href="../../../../../download.html"> Releases</a></li>
<li><a title="Latest mozilla builds for testers" href="../../../../../developer/#builds"> Nightly Builds</a></li>
<li><a title="For testers to report bugs" href="https://bugzilla.mozilla.org/"> Report A Problem</a></li>
</ul>
</li>
<li><a title="Tools for mozilla developers" href="../../../../../tools.html"><strong> Tools</strong></a>
<ul>
<li><a title="Bug tracking system for mozilla testers." href="https://bugzilla.mozilla.org/"> Bugzilla</a></li>
<li><a title="Latest status of mozilla builds" href="http://tinderbox.mozilla.org/showbuilds.cgi?tree=Firefox"> Tinderbox</a></li>
<li><a title="Latest checkins" href="http://bonsai.mozilla.org/cvsqueryform.cgi"> Bonsai</a></li>
<li><a title="Source cross reference" href="http://lxr.mozilla.org/seamonkey/"> LXR</a></li>
</ul>
</li>
<li><a title="Frequently Asked Questions." href="../../../../../faq.html"><strong> FAQs</strong></a></li>
</ul>

</div>
<hr class="hide">
<div id="mainContent">




<center> 
<h1>
webclient implementation guide</h1>
<h1>overview of primary classes and interfaces </h1></center>
 
<div align="center">
     <a href="index.htm">directories &amp; packages</a>
   | <a href="object_hierarchies.htm">object hierarchies</a>
   | <a href="sequence.htm">sequence description</a>
</div>
<p><br>
  The primary interfaces and classes for Webclient are:</p>
<blockquote> 
  <p><code>
    <a href=#BrowserControlFactory>BrowserControlFactory</a><br>
    <a href=#BrowserControl>BrowserControl</a><br>
    <a href=#BrowserControlImpl>BrowserControlImpl</a><br>
    <a href=#BrowserControlCanvas>BrowserControlCanvas</a><br>
    <a href=#WrapperFactory_WrapperFactoryImpl>WrapperFactory</a><br>
    <a href=#WrapperFactory_WrapperFactoryImpl>WrapperFactoryImpl</a><br>
    <a href=#WindowControl>WindowControl</a><br>
    <a href=#WindowControlImpl>WindowControlImpl</a><br>
    <a href=#ImplObject>ImplObject</a><br>
    <a href=#ImplObjectNative>ImplObjectNative</a> </code></p>
</blockquote>
<p>Understanding the primary classes and interfaces is essential to knowing how Webclient 
works.</p>

<a name="BrowserControlFactory"><h2>BrowserControlFactory</a></h2>

<p><code>BrowserControlFactory</code> is the starting point for building an application 
  with Webclient. It is a class that provides two essential methods, both static:</p>
<ul>
  <li><code>setAppData()</code></li>
  <li><code>newBrowserControl()</code></li>
</ul>
<h3><code>setAppData()</code></h3>
<p><code>setAppData()</code> checks to see that (1) the <code>String</code> specifying 
  the absolute path to the native browser binary directory 
  (<code>absolutePathToNativeBrowserBinDir</code>) 
  is not null and that (2) the path actually exists on the machine. It then attempts 
  to determine the correct canvas class for the platform, Win32 or Motif.</p>

<p>It sets <code>platformCanvasClassName</code> by first attempting to load 
   <code>"sun.awt.windows.WDrawingSurfaceIno"</code>.</p>
<p>If it loads, then it sets <code>platformCanvasClassName</code> for Win32. If 
  it fails, then it tries the same thing for Motif. </p>
<p>If one loads, then it sets: </p>
<blockquote> 
  <p> <code>BrowserControlCanvasClass = Class.forName(platformCanvasClassName); 
    </code></p>
</blockquote>
<p>This class is then used when <code>BrowserControlFactory.newBrowserControl()</code> 
  is invoked.</p>
<p>In our example application, it is invoked in the very next line of code: </p>
<blockquote> 
  <p><code>browsercontrol = BrowserControlFactory.newBrowserControl();</code></p>
</blockquote>
<p>The result is as follows:</p>

<h3><code>newBrowserControl()</code></h3>
<p><code>newBrowserControl()</code> sets <code>newCanvas</code> to a new instance 
  of <code>browserControlCanvasClass.</code> It then does the following:</p>
<ol>
  <li>passes <code>newCanvas</code> to the constructor of <code>BrowserControlImpl</code> 
    to get a new instance of <code>BrowserControlImpl</code> called <code>result</code>; 
  </li>
  <li>checks both <code>newCanvas</code> and <code>result</code> to see if they 
    are <code>null</code>;</li>
  <li>if neither is <code>null</code>, then initializes <code>newCanvas</code>, 
    passing <code>result</code> to the <code>initialize()</code> method as follows:</li>
</ol>
<blockquote> 
  <blockquote> 
    <p><code>newCanvas.initialize(result); </code></p>
  </blockquote>
</blockquote>
<p>The effect of this initialization is as follows: </p>
<p>Examining <code>BrowserControlCanvas.initialize(BrowserControl controlImpl)</code>, 
  it can be see that it sets the variable <code>private BrowserControl webShell</code> 
  equal to <code>result</code>, the argument passed to <code>initialize()</code>, 
  first checking that the argument is not <code>null</code> (we already now that 
  it isn't).</p>
<p>This says that <code>result</code> is the <code>BrowserControlImpl</code> instance 
  for <code>newCanvas</code>, which is a <code>BrowserControlCanvas</code> implementation 
  instance.</p>
<h4>Summary</h4>
<p>In summary, <code>setAppData()</code> checks the path to the binary directory 
  for Mozilla and finds the correct canvas class, while <code>newBrowserControl() 
  </code>creates an instance of the canvas, creates a browser control from it, 
  and associates that browser control with the canvas. (Note: <code>setAppData()</code> 
  also invokes <code>BrowserControlImpl.appInitialize()</code>, the effects of 
  which are discussed in <code>BrowserControlImpl</code>.)</p>
<hr>
<a name="BrowserControl"><h2>BrowserControl</h2></a>
<p><code>BrowserControl</code> is an interface that sets a number of <code>static</code> 
  variables used by implementations 
  (<code>BOOKMARKS_NAME</code>, <code>BROWSER_CONTROL_CANVAS_NAME</code>, 
  <code>CURRENT_PAGE_NAME</code> ...), and it defines an abstract method called 
  <code>queryInterface(String interfaceName)</code>.</p>
<p>The variables represent various browser functions, and <code>queryInterface()</code> 
  returns an instance of the implementation of the browser function named by the 
  variable. For instance, the navigation function of the browser is represented 
  by the variable</p>
<blockquote> 
  <p> <code>NAVIGATION_NAME = &quot;webclient.Navigation&quot;;</code></p>
</blockquote>
<p>By passing this variable to <code>queryInterface()</code>, an instance of the 
  implementation of the navigation function (i.e., instance of <code>NavigationImpl</code>) 
  is returned.</p>
<p>Thus the developer can use just those functions desired for the application.</p>

<hr>
<a name=BrowserControlImpl><h2>BrowserControlImpl</h2>

<p><code>BrowserControlImpl</code> implements BrowserControl. Thus it it inherits 
  the <code>static</code> variables of <code>BrowserControl</code> and implements 
  <code>queryInterface()</code>. It also adds methods of its own, including a 
  constructor, <code>appInitialize()</code> and <code>createWrapperFactory()</code>. 
</p>
<h4>constructor</h4>
<p>The constructor takes a <code>BrowserControlCanvas</code> object as an argument 
  and sets a <code>private</code> <code>BrowserControlCanvas</code> variable called 
  <code>myCanvas</code> equal to it. Thus there is a particular canvas object 
  associated with the <code>BrowserControlImpl</code> object.</p>

<h4><code>appInitialize()</code></h4>
<p><code>appInitialize()</code> is a 
   <code>static</code> method that sets 
   <code>wrapperFactory = createWrapperFactory()</code>, if the 
   <code>static wrapperFactory</code> variable 
  is <code>null</code>, and then invokes 
  <code>initialize()</code> on <code>wrapperFactory</code>.</p>

<p>Notes 
<ol>
   <li><code>wrapperFactory</code> is set as type <code>WrapperFactory</code>, 
       which is an abstract class. 
   <li><code>createWrapperFactory()</code> is a <code>private static</code> method of 
       <code>BrowserControlImpl</code> that returns an object of type 
       <code>WrapperFactory</code>.
</ol>

<h3><code>createWrapperFactory()</code></h3>
<p>To accommodate different type of wrappers 
   (&quot;native&quot; and &quot;non-native&quot;), 
   some generality is introduced via the <code>createWrapperFactory()</code> method: <br>
   First, a <code>String</code> called <code>wrapperFactoryClassName</code> is 
   temporarily set to the package name for <code>BrowserControlImpl</code>. Then 
  <code>String PARAMETERIZED_VALUE</code> is set to the wrapper type (currently, 
  &quot;native&quot;, since this code is being used for a native wrapper). Then 
  we have:</p>
<blockquote>
  <pre>wrapperFactoryClassName = wrapperFactoryClassName + "wrapper_" + 
        PARAMETERIZED_VALUE + "." + WrapperFactory.IMPL_NAME;

wrapperFactoryClass = Class.forName(wrapperFactoryClassName);
</pre>
</blockquote>

<p>The first statement sets <code>wrapperFactoryclassName</code> to the fully-
   qualified name for <code>WrapperFactory.IMPL_Name</code>. The second statement 
  sets <code>wrapperFactoryClass</code> to the actual class.</p>

<p>Note that <code>WrapperFactory.IMPL_NAME</code> is determined by the abstract 
  class <code>WrapperFactory</code>. <code>public static String IMPL_NAME</code> 
  is currently set to &quot;<code>WrapperFactoryImpl</code>&quot; in that class. 
  Thus <code>WrapperFactory.IMPL_NAME</code> is simply the <code>String</code> 
  &quot;<code>WrapperFactoryImpl</code>&quot;. This again give us generality, 
  since we have the opportunity to set the directory for the <code>WrapperFactory</code> 
  implementation according to the type of wrapper, and we also have the opportunity 
  to name the implementation class as we like. 
  
<p><code>createWrapperFactory()</code> finally creates a new instance of 
<code>wrapperFactoryClass</code> and returns it.<br>
</p>
<p>When the flow of control returns to <code>appInitialize()</code> , it sets 
  the instance to <code>wrapperFactory</code> and invokes the <code>initialize()</code> 
  method on it. <code>WrapperFactoryImpl.initialize()</code>is explained under 
  <i><a href=#WrapperFactory_WrapperFactoryImpl.htm>WrapperFactory, WrapperFactoryImpl
  </a></i>.</p>

<h3><code>queryInterface()</code></h3>
<p><code>queryInterface()</code> is used to create instances of a desired browser 
  functions, such as navigation, bookmarks, history, as mentioned previously. 
  All instances of a desired function are created similarly. Let us take the case 
  of creating an instance of the history function. We could pass 
  <code>&quot;webclient.History&quot;</code> to <code>queryInterface()</code>, 
  which would set:</p>
<blockquote> 
  <p><code>history = (History) wrapperFactory.newImpl(HISTORY_NAME, this);</code></p>
</blockquote>
<p><code>this</code> would be a reference to the <code>BrowserControlImpl</code> 
  instance that is invoking <code>newImpl()</code>. The effect would be to cause 
  <code>wrapperFactory.newImpl()</code> to set:</p>
<blockquote> 
  <p><code>result = new HistoryImpl(this, browserControl);</code></p>
</blockquote>
<p><code>this</code> is a reference to the invoking <code>WrapperFactoryImpl</code> 
  instance, <code>wrapperFactory</code>, while <code>browserControl</code> 
  is a reference to the <code>BrowserControlImpl</code> instance that invokes 
  <code>wrapperFactory.newImpl()</code>. </p>

<hr>  
<a name=BrowserControlCanvas><h2>BrowserControlCanvas </h2>
<p><code>BrowserControlCanvas</code> is an <code>abstract</code> class that extends 
   <code>Canvas</code> and is extended by a platform-specific class. 
   <code>BrowserControlCanvas</code> 
   has only one <code>abstract</code> method, <code>getWindow()</code>, which is 
   implemented by the platform-specific class. For example, in the case of the 
   Win32 platform, a class called <code>Win32BrowserControlCanvas</code> implements 
   <code>getWindow()</code> by returning an <code>int</code> for the Window Handle 
   (a unique 32-bit value that identifies the Window). It does this via the 
   <code>getHWnd()</code> method of the <code>WDrawingSurfaceInfo</code> class 
   in the <code>sun.awt.windows</code> package.</p>

<h3><code>initialize()</code></h3>
<p>In the <code>initialize()</code> method of <code>BrowserControlCanvas</code> 
   an argument of type <code>BrowserControl</code> is passed to it and a 
   <code>private</code> 
   variable of the same type, <code>webShell</code>, is set equal to it.</p>

<h3><code>addNotify()</code></h3>
<p><code>addNotify()</code> is worth examining. It is at the heart of this class.</p>
<p>Note that when the <code>BrowserControlCanvas</code> implementation instance 
   (such as <code>browserCanvas</code> in our example) is added to the 
   <code>Frame</code> of an application, the <code>addNotify()</code> method of <
   code>BrowserControlCanvas</code> is called and <code>addNotify()</code> 
   generates <code>wc</code>, an instance of <code>WindowControlImpl</code> cast 
   as type <code>WindowControl</code>. Let us take a closer look at how this is 
   done and what is happening in the <code>addNotify()</code> method: </p>

<p>First, it gets the <code>peer</code> of the <code>BrowserControlCanvas</code> 
   implementation instance and casts it as type <code>DrawingSurface</code> 
   (<code>sun.awt.DrawingSurface</code>). Then it uses the <
   code>getDrawingSurfaceInfo()</code> method of <code>DrawingSurface</code> 
   to get the <code>DrawingSurfaceInfo</code> object <code>dsi</code>. </p>
<p>Next, <code>windowRelativeBounds</code> is set to <code>new Rectangle()</code>. 
   <code>windowRelativeBounds</code> is a <code>Rectangle</code> at point (0,0) 
   with width and height = 0. </p>
<p>Then, <code>dsi</code> is locked so that the information is not changed elsewhere, 
   then <code>dsi</code> is passed to <code>getWindow()</code> to get an<code> 
   int</code> called <code>nativeWindow</code>. <code>getWindow(DrawingSurfaceInfo 
   dsi)</code> is an abstract method of <code>BrowserControlCanvas</code> that 
   is implemented in the concrete class of which we have an instance. (Note: It 
   is assumed that an instance of the implementation of 
   <code>BrowserControlCanvas</code> would be created in a custom applications 
   following the invocation of the<code> setAppdata()</code> method of 
   <code>BrowserControlFactory</code>.)</p>
<p>Next, in the<code> try</code> block a <code>new Rectangle</code> is created 
   by passing <code>getBoundsRelativeToWindow()</code> as an argument to the 
   constructor for <code>Rectangle</code>.  
   &nbsp;<code>getBoundsRelativeToWindow()</code> 
   returns a <code>Rectangle</code> object that has been translated so that 
   its <code>x</code> and <code>y</code> data fields reference the Window of 
   our custom application and not the particular container that it may be in 
   within that Window. 
   
  
<p>Finally, <code>WindowControl wc</code> is created and its <code>createWindow(int 
  nativeWindow, Rectangle bounds)</code> method is used to create the Window. 
  <code>createWindow()</code> is discussed in detail under 
  <a href=#WindowControlImpl>WindowControlImpl
  </a>. </p>  

<hr>
<a name="WrapperFactory_WrapperFactoryImpl"><h2>WrapperFactory, Wrapper FactoryImpl</h2></a>

<p><code>WrapperFactory</code> is an <code>abstract</code> class that allows for 
   different types of browsers that might be embedded, native or non-native, 
   and it has an important abstract method called <code>newImpl()</code> 
   that is implemented by <code>WrapperFactoryImpl</code>. <code>newImpl()</code> 
   is what is called by <code>BrowserControlImpl.queryInterface()</code> to actually 
   get an instance of some browser function such as navigation, bookmarks, history, 
   etc.</p>
<p>For example, if the navigation function is desired, that is, an instance 
   of <code>NavigationImpl</code>, <code>&quot;webclient.Navigation&quot;</code> 
   would be passed to <code>BrowserControlImpl.queryInterface()</code> and control 
   would be passed to the following statement within that method:</p>
<blockquote> 
  <pre>if (NAVIGATION_NAME.equals(interfaceName)) {
        if (null == navigation) {
            navigation = (Navigation) wrapperFactory.newImpl(NAVIGATION_NAME,
                                                             this);
        }
        return navigation;</pre>
</blockquote>
<p><code>wrapperFactory</code> in the test example is in fact an instance of 
   <code>WrapperFactoryImpl</code> 
   for the type of browser being embedded, and the <code>WrapperFactoryImpl</code> 
   class is located in its own directory for that type; i.e., for Windows, it is 
   located in <code>wrapper_native</code>.</p>
<p><code>wrapperFactory.newImpl()</code> with <code>NAVIGATION_NAME</code> as 
   the argument passes control to the following statement in <code>WrapperFactoryImpl.newImpl()</code>:</p>
<blockquote> 
  <pre>if (BrowserControl.NAVIGATION_NAME == interfaceName) {
            result = new NavigationImpl(this, browserControl);
            return result;
</pre>
</blockquote>
<p>Thus it creates the new instances of <code>NavigationImp</code> for the type 
   of browser being embedded.</p>
<p><code>WrapperFactoryImpl.initialize()</code> synchronizes on the instance of 
   <code>WrapperFactoryImpl</code> and then invokes the native method 
   <code>nativeAppInitialize()</code>. <code>nativeAppInitialize()</code> is 
   called at the beginning of program execution to allow for one-time 
   initialization of tasks. The native method initializes XPCOM and so on.</p>

<hr>
<a name="WindowControl"><h2>WindowControl</h2></a>
<p><code>WindowControl</code> is an interface that includes methods to create 
   a window, control it, and get the native webshell.</p>

<hr>
<a name="WindowControlImpl"><h2>WindowControlImpl</h2></a>
<p>An instance of <code>WindowControlImpl</code> is created via the 
   <code>addNotify()</code> method of <code>BrowserControlCanvas</code>. 
   <code>addNotify()</code> is called when an instance of an implementation of 
   <code>BrowserControlCanvas</code> (such as an instance of 
   <code>win32BrowserControlCanvas</code>) is added to the custom application.</p>
<p><code>BrowserControlCanvas.addNotify()</code> uses the 
   <code>queryInterface()</code> method of <code>BrowserControlImpl</code> via 
   an instance of the latter called <code>webShell</code>, which is passed to the 
   <code>BrowserControlCanvas</code> object via its <code>initialize()</code> 
   method.</p>
<p>The <code>createWindow()</code> method is worth some attention. Following some 
   preliminary checking, it locks <code>myBrowserControl</code> (the 
   <code>BrowserControlImpl</code> object) and <code>this</code> (the 
   <code>WindowControlImpl</code> object), then passes <code>nativeWindow</code> 
   to <code>nativeCreateInitContext()</code>, along with other arguments, to 
   obtain <code>nativeWebShell</code>. <code>nativeWindow</code> was created in 
   <code>BrowserControlCanvas.addNotify()</code> via <code>getWindow()</code>, 
   which gets, in the case of Win32, the Window Handle for the native Window. 
   <code>nativeCreateInitContext()</code> is the native method for initialization.</p>
<p>Next, <code>createWindow()</code> creates <code>eventThread</code>, an instance 
   of <code>NativeEventThread</code>. <code>NativeEventThread</code> extends 
   <code>java.lang.Thread</code> and adds native methods. <code>createWindow()</code> 
   starts the thread by invoking <code>eventThread.start()</code>, then invokes 
   <code>wait()</code> on the main thread in a <code>try</code> block. 
   <code>eventThread.start()</code> causes the thread to begin and 
   <code>eventThread.run()</code> invokes <code>nativeInitialize()</code>, which is 
   a native method for initializing Mozilla. Following <code>nativeInitialize()
   </code> in <code>NativeEventThread.run()</code>, <code>windowControl.notify()
   </code> tells the main thread that it can run again. </p>
<p>Note that <code>WindowControlImpl</code> extends <code>ImplObjectNative</code> 
   and implements <code>WindowControl</code>. </p> 

<hr> 
<a name="ImplObject"><h2>ImplObject</h2></a>
<p><code>ImplObjec</code>t defines two attributes for a number of the 
   implementations of the Webclient interfaces. The two attributes are:</p>
<ul>
  <li><code>public WrapperFactory myFactory;</code></li>
  <li><code>public BrowserControl myBrowserControl;</code></li>
</ul>
<p>In the case of a native embedded browser, the implementations of the interfaces 
   extend the subclass of <code>ImplObject</code> called <code>ImplObjectNative</code>. 
   Two interfaces that do not extend the subclass are <code>WrapperFactoryImpl</code> 
   and <code>BrowserControlImpl</code>. </p>
 
<hr>   
<a name="ImplObjectNative"><h2>ImplObjectNative</h2></a>

<p><code>ImplObjectNative</code>, which is used for native embedded browsers, 
   extends <code>ImplObject</code>. All implementations, other than 
   <code>WrapperFactoryImpl</code> and <code>BrowserControlImpl</code>, extend 
   it so as to provide easy access to the <code>WrapperFactory</code> and 
   <code>BrowserControl</code> attributes.</p>
<p><code>ImplObjectNative</code> provides a constructor that invokes 
   <code>getNativeWebShell()</code>.</p>
<p></p>   
<h5>Blackwood Release 0.9/Netscape PR3 - Last Modified 10/13/2000</h5>
<p>&nbsp; </p>



<hr class="hide">
</div>
</div>
<div id="footer">
<ul>
<li><a href="../../../../../sitemap.html">Site Map</a></li>
<li><a href="../../../../../security/">Security Updates</a></li>
<li><a href="../../../../../contact/">Contact Us</a></li>
<li><a href="../../../../../foundation/donate.html">Donate</a></li>
</ul>
<p class="copyright">
Portions of this content are &copy; 1998&#8211;2009 by individual mozilla.org
contributors; content available under a Creative Commons license | <a
href="http://www.mozilla.org/foundation/licensing/website-content.html">Details</a>.</p>
<p>
<span>Last modified October 19,  2000</span>
<span><a href="http://bonsai-www.mozilla.org/cvslog.cgi?file=mozilla-org/html/projects/blackwood/webclient/ref_guides/Implementation_guide/appendix.htm&amp;rev=&amp;root=/www/">Document History</a></span>
</p>
</div>
</div>
</body>
</html>
