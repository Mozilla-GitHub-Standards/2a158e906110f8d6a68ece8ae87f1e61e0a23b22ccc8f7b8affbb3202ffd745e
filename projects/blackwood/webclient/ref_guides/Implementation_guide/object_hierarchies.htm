<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
<link rel="top" title="Home" href="http://www.mozilla.org/">
<link rel="stylesheet" type="text/css" href="../../../../../css/print.css"  media="print">
<link rel="stylesheet" type="text/css" href="../../../../../css/base/content.css"  media="all">
<link rel="stylesheet" type="text/css" href="../../../../../css/cavendish/content.css" title="Cavendish" media="screen">
<link rel="stylesheet" type="text/css" href="../../../../../css/base/template.css"  media="screen">
<link rel="stylesheet" type="text/css" href="../../../../../css/cavendish/template.css" title="Cavendish" media="screen">
<link rel="icon" href="../../../../../images/mozilla-16.png" type="image/png">

   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (X11; I; SunOS 5.8 sun4u) [Netscape]">
   <title>Object Hierarchies</title>
<script src="../../../../../__utm.js" type="text/javascript"></script>
</head>
<body id="www-mozilla-org" class="deepLevel">
<div id="container">
<p class="important">You are currently viewing a snapshot of www.mozilla.org taken on April 21, 2008. Most of this content is
highly out of date (some pages haven't been updated since the project began in 1998) and exists for historical purposes only.  If
there are any pages on this archive site that you think should be added back to www.mozilla.org, please <a
href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Websites&component=www.mozilla.org">file a bug</a>.</p>
<p class="skipLink"><a href="#mainContent" accesskey="2">Skip to main content</a></p>
<div id="header">
<h1><a href="/" title="Return to home page" accesskey="1">Mozilla</a></h1>
<ul>
<li id="menu_aboutus"><a href="../../../../../about/" title="Getting the most out of your online experience">About</a></li>
<li id="menu_developers"><a href="../../../../../developer/" title="Using Mozilla's products for your own applications">Developers</a></li>
<li id="menu_store"><a href="http://store.mozilla.org/?r=mozorg1" title="Shop for Mozilla products on CD and other merchandise">Store</a></li>
<li id="menu_support"><a href="../../../../../support/" title="Installation, trouble-shooting, and the knowledge base">Support</a></li>
<li id="menu_products"><a href="../../../../../products/" title="All software Mozilla currently offers">Products</a></li>
</ul>
<form id="searchbox_002443141534113389537:ysdmevkkknw" action="http://www.google.com/cse" title="mozilla.org Search">
<div>
<label for="q" title="Search mozilla.org's sites">search mozilla:</label>
<input type="hidden" name="cx" value="002443141534113389537:ysdmevkkknw">
<input type="hidden" name="cof" value="FORID:0">
<input type="text" id="q" name="q" accesskey="s" size="30">
<input type="submit" id="submit" value="Go">
</div>
</form>
</div>
<hr class="hide">
<div id="mBody">
<div id="side">

<ul id="nav">
<li><a title="Roadmap" href="../../../../../roadmap.html"><strong> Roadmap</strong></a></li>
<li><a title="Projects" href="../../../../../projects/"><strong> Projects</strong></a></li>
<li><a title="For developers" href="../../../../../developer/"><strong> Coding</strong></a>
<ul>
<li><a title="Module Owners" href="../../../../../owners.html"> Module Owners</a></li>
<li><a title="Hacking" href="../../../../../hacking/"> Hacking</a></li>
<li><a title="Get the Source" href="http://developer.mozilla.org/en/docs/Download_Mozilla_Source_Code"> Get the Source</a></li>
<li><a title="Building Mozilla" href="http://developer.mozilla.org/en/docs/Build_Documentation"> Build It</a></li>
</ul>
</li>
<li><a title="Testing" href="../../../../../quality/"><strong> Testing</strong></a>
<ul>
<li><a title="Downloads of mozilla.org software releases" href="../../../../../download.html"> Releases</a></li>
<li><a title="Latest mozilla builds for testers" href="../../../../../developer/#builds"> Nightly Builds</a></li>
<li><a title="For testers to report bugs" href="https://bugzilla.mozilla.org/"> Report A Problem</a></li>
</ul>
</li>
<li><a title="Tools for mozilla developers" href="../../../../../tools.html"><strong> Tools</strong></a>
<ul>
<li><a title="Bug tracking system for mozilla testers." href="https://bugzilla.mozilla.org/"> Bugzilla</a></li>
<li><a title="Latest status of mozilla builds" href="http://tinderbox.mozilla.org/showbuilds.cgi?tree=Firefox"> Tinderbox</a></li>
<li><a title="Latest checkins" href="http://bonsai.mozilla.org/cvsqueryform.cgi"> Bonsai</a></li>
<li><a title="Source cross reference" href="http://lxr.mozilla.org/seamonkey/"> LXR</a></li>
</ul>
</li>
<li><a title="Frequently Asked Questions." href="../../../../../faq.html"><strong> FAQs</strong></a></li>
</ul>

</div>
<hr class="hide">
<div id="mainContent">





<center>
<h1>
webclient implementation guide</h1>
<h1>object hierarchies</h1></center>

<center><font size=-1>
      <a href="index.htm">directories &amp; packages</a>&nbsp;
    | <a href="sequence.htm">sequence description</a>
    | <a href="appendix.htm">classes & interfaces</a></font></center>

<p>
   This section discusses the interface and implementation object
   hierarchies. Refer to the following sections:
   <blockquote><a href="object_hierarchies.htm#Public">Public Interfaces and
   Classes</a>
   <br><a href="object_hierarchies.htm#PrimaryPrivate">Primary Private Classes</a>
   <br><a href="object_hierarchies.htm#SecondaryPrivate">Secondary Private
   Classes</a></blockquote>

<center>
<h2>
<a NAME="Public"></a>public interfaces and classes</h2></center>
   The following UML diagram shows the interfaces and classes comprising the
   current implementation and the relationships among them. Other interfaces
   and classes defined in the specification, but not yet implemented, will
   be filled in as appropriate.

<center>
<p><img SRC="classdiag.gif" height=618 width=564></center>

<p>
   There is one <tt>BrowserControlFactory</tt> instance per Webclient application.
   This instance is used to create <tt>BrowserControl</tt> instances. There
   is one <tt>BrowserControl</tt> instance per browser window. Each <tt>BrowserControl</tt>
   instance is composed of several constituent interfaces. Instances of these
   interfaces can be obtained by invoking <tt>queryInterface()</tt> on the
   <tt>BrowserControl</tt>
   instance, passing in the appropriate string of the form <tt>"webclient.BrowserControlCanvas"</tt>,
   <tt>"webclient.CurrentPage"</tt>, etc.
<p>
   The custom app adds the BrowserControlCanvas instance to its window
   hierarchy. The custom app can be notified of webclient events by implementing
   a <tt>WebclientEventListener</tt> subinterface and adding that implementation
   via the <tt>EventRegistration</tt> interface. The custom-app-defined listener
   will then receive <tt>WebclientEvent</tt> instances of the appropriate
   type at the appropriate time. 
<p>   
   Similarly, the custom app can be notified of mouse events by
   implementing a <tt>MouseListener</tt> interface and adding that 
   implementation via <tt>EventRegistration</tt>. The custom app-defined 
   Listener will receive <tt>java.awt.event.MouseEvent</tt> instances at 
   the appropriate time.  These instances can be queried to get a
   <tt>WCMouseEvent</tt> object from which individual properties of the 
   event can be obtained. The custom app can display the browser's
   bookmarks in a <tt>JTree</tt> using the <tt>Bookmarks</tt> interface.


<center>
<h2>
<a NAME="PrimaryPrivate"></a>primary private classes</h2></center>
<p>
   The following UML diagram shows the primary private classes that comprise
   the Java wrapper for the native implementation. Bookmarks and other secondary
   classes are dealt with separately. Note that classes <tt>BrowserControlImpl</tt>,
   <tt>ImplObject</tt>, and <tt>WrapperFactory</tt> are in the 
   <tt>org.mozilla.webclient</tt> Java package, while all the other classes are in 
   the <tt>org.mozilla.webclient.wrapper_native</tt> package. In general, when one 
   implementation class interacts with another, the interaction occurs through the 
   public interface. That is, Webclient classes don't have access to the implementation 
   details of other Webclient classes.
   
<center>
<p><img SRC="private-classdiag.gif" height=690 width=570></center>

<h3>
   <b><tt>WrapperFactoryImpl</tt></b> and <tt>B<b>rowserControlImpl</b></tt></h3>
<P>
   <tt>BrowserControlImpl</tt> implements the <tt>BrowserControl</tt> interface.
   <tt>BrowserControlImpl</tt> uses a concrete subclass of <tt>WrapperFactory</tt>,
   <tt>WrapperFactoryImpl</tt>, to create instances of implementations of Webclient 
   interfaces. The concrete <tt>WrapperFactory</tt> subclass is provided by the 
   <tt>wrapper_native</tt> package. 
   See <tt>classes_spec/org/mozilla/webclient/WrapperFactory.java</tt>
   for details. <tt>WrapperFactoryImpl</tt> calls the first native method,
   nativeInitialize. See <tt>nativeAppInitialize()</tt> in 
   <tt>classes_spec/org/mozilla/webclient/wrapper_native/WrapperFactoryImpl.java</tt>
   for details. Briefly, however, <tt>nativeAppInitialize()</tt> does the
   per-application (as opposed to per-window) browser initialization.

<h3>
<tt>BrowserControlCanvas</tt></h3>
<p>
   The custom app must invoke <tt>queryInterface()</tt> on the <tt>BrowserControl</tt>
   instance to obtain implementation instances of Webclient interfaces. The
   first interface asked for must be <tt>"webclient.BrowserControlCanvas"</tt>.
   The custom app must then <tt>add()</tt> the canvas to its window hierarchy.

<h3>
<b><tt>ImplObject </tt></b>and&nbsp;<a NAME="WindowControlImpl">
</a><b><tt>WindowControlImpl</tt></b></h3>
<p>
   Adding the canvas to the display hierarchy generates a <tt>WindowControlImpl</tt>
   object. <tt>WindowControlImpl</tt>, as well as all classes implementing
   Webclient interfaces, inherit from <tt>ImplObject</tt>. 
   
   <p>Note: <tt>WrapperFactoryImpl</tt> and <tt>BrowserControlImpl</tt>, however, 
    do not inherit from <tt>ImplObject</tt>. <tt>WrapperFactoryImpl</tt> is not a 
    public implementation class.  <tt>BrowserControlImpl</tt>, however, 
    do not inherit from <tt>ImplObject</tt>. <tt>WrapperFactoryImpl</tt> is a 
    public implementation class, but it is special since it is the root of the 
    interface collection.
       
   
   <p></font></b><tt>ImplObject</tt> simply defines the common attributes for all 
   Webclient implementation classes. These attributes currently are 
   <tt>WrapperFactory</tt> and <tt>BrowserControl</tt>. (See <tt>myFactory</tt> and 
   <tt>myBrowserControl</tt> in <tt>classes_spec/org/mozilla/webclient/ImplObject.java</tt>
   for details.) The first method of <tt>WindowControl</tt>, called <tt>createWindow(),
   </tt> calls the first per-window native call, <tt>nativeCreateInitContext()</tt>,
   which allows the native code to create a "context object" that is passed
   to all subsequent native methods. It then creates and starts a Java thread,
   <tt>NativeEventThread</tt>, and invokes <tt>wait()</tt> in the main thread. 
   When run, <tt>NativeEventThread</tt> completes the initialization process, invokes 
   <tt>notify()</tt> to wake up the <tt>WindowControlImpl</tt> instance, and goes 
   into an infinite loop.  On receiving <tt>notify() WindowControl.createWindow()</tt> 
   returns. All of this happens on the <tt>add()</tt> method. 
      
<h3>
<tt>NavigationImpl</tt>, <tt>CurrentPageImpl</tt>, <tt>HistoryImpl</tt></h3>
<p>
   After adding the canvas to the custom app window hierarchy, the user may
   then call <tt>BrowserControl.queryInterface()</tt> for any other Webclient
   interfaces. The following classes all have similar, straightforward, implementations:
   <tt>NavigationImpl</tt>, <tt>CurrentPageImpl</tt> and <tt>HistoryImpl</tt>. These 
   classes all use a native event system, explained later in the descriptions of 
   <tt><a href="#nsActionEvent">nsActionEvent</a></tt> and <tt><a href="#NativeEventThread">
   NativeEventThread</a></tt>, to cause propogation of actions to the underlying browser.

<h3>
<a NAME="nsActionEvent"></a><tt>nsActionEvent</tt> and subclasses</h3>
<p>
   The Webclient native method implementations use an event queue to send
   actions to the browser. The use of an event queue was present in the initial
   Webclient code written by Kirk Baker and Ian Wilkinson. Using the event
   queue provides synchronization at the native level via Mozilla monitors.
   For a description of how this works, see the comments for the <tt>nsActionEvent</tt>
   class definition in <tt>nsActions.h</tt>. The comments there will lead
   you through the source files related to <tt>nsActionEvent</tt> subclasses.

<h3>
<a NAME="NativeEventThread"></a><tt>NativeEventThread</tt> and 
<tt>EventRegistrationImpl</tt></h3>
<p>
   <tt>NativeEventThread</tt> is a <tt>java.lang.Thread</tt> subclass. It is created 
   as mentioned in <tt><a href="#WindowControlImpl">WindowControlImpl</a></tt>.
   There is one instance of <tt>NativeEventThread</tt> per <tt>BrowserControlImpl</tt>.
   <tt>NativeEventThread</tt> has two purposes:
<ul>
<li>
to process events from the Java to the browser</li>
<li>
to process events from the browser to Java</li>
</ul>
<p>
   The details of sending events from Java to the browser is described elsewhere
   in the section on <tt><a href="#nsActionEvent">nsActionEvent</a></tt>.
   To send an event from the browser to Java: 
   <br>When the custom app calls <tt>EventRegistration.add*Listener()</tt>, the 
   corresponding method in <tt>EventRegistrationImpl</tt> is called. The different 
   <tt>add*Listener()</tt> methods simply provide type safety. They all call through 
   to <tt>NativeEventThread.addListener()</tt>, which results in adding the 
   corresponding Mozilla listener type. See <tt>addListener()</tt> in 
   <tt>NativeEventThread</tt>. When a Mozilla event occurrs for which the appropriate 
   listener has been added, the native code calls 
   <tt>NativeEventThread.nativeEventOccurred()</tt>, passing the listener to which the 
   event should be sent and an event-specific <tt>long</tt> value. 
   <tt>nativeEventOccurred()</tt> uses Java reflection to determine what kind of 
   <tt>WebclientEvent</tt> should be created and sent to the listener's 
   <tt>eventDispatched()</tt> method.
   
<h3>
<tt>WebShellInitContext</tt></h3>
<p>
   This is a context <tt>struct</tt> used for holding per-window Mozilla references.&nbsp;
   There is one instance of this <tt>struct</tt> per Java <tt>WindowControlImpl</tt>.
   The instance is created as a result of calling <tt>WindowControl.createWindow()</tt>.

<p>Note: the instance is destroyed as a result of calling 
<tt>BrowserControl.terminate()</tt>.

<h3>
<tt>CBrowserContainer</tt></h3>
<p>
   This class implements multiple interfaces needed to embed mozilla.  These 
   include <tt>nsIWebBrowserChrome</tt>, <tt>nsIWebProgressListener</tt>, and 
   <tt>nsIPrompt</tt>.  This also implements the Listener interfaces 
   <tt>nsIDocumentLoaderObserver</tt> and <tt>nsIDOMMouseListener</tt>.

<center>
<h2>
<a NAME="SecondaryPrivate"></a>secondary private classes</h2></center>
<p>
   This section deals with private webclient classes that are not part of
   the core functionality.

<h3>
<a NAME="Bookmarks"></a>Bookmarks</h3>
<p>
   The <tt>Bookmarks</tt> interface uses Mozilla's RDF bookmarks system to
   provide the cusom app with access to Mozilla bookmarks. The following class
   diagram describes the bookmarks system.
<center>
<p><img SRC="bookmarks.gif" height=459 width=569></center>

<h3>
<tt>BookmarksImpl</tt></h3>
<p>
   As expected, the custom app obtains a reference to the singleton <tt>BookmarksImpl</tt>
   by invoking <tt>queryInterface()</tt> on the <tt>BrowserControl</tt>. <tt>Bookmarks</tt>
   provides a way for the custom app developer to show a Swing, <tt>JTree</tt>-based
   UI for the bookmarks. When <tt>getBookmarks()</tt>is invoked on <tt>Bookmarks</tt>,
   it in turn invokes <tt>nativeGetBookmarks()</tt>, wraps a <tt>BookmarkEntryImpl</tt>
   instance around the returned <tt>int</tt>, which is actually an <tt>nsIRDFResource</tt>,
   and creates a <tt>DefaultTreeModel</tt> around the new <tt>BookmarkEntryImpl</tt>.

<h3>
<tt>RDFTreeNode</tt></h3>
<p>
   This abstract base class provides a Java wrapper to the Mozilla RDF implementation.

<h3>
<tt>ISupportsPeer</tt></h3>
<p>
   This abstract class allows proper garbage collection of <tt>RDFTreeNode</tt>
   instances, which have an associated native <tt>nsIRDFResource</tt> peer.
   Garbage collection takes place in both Java and XPCOM. It does this by
   simply providing native methods for XPCOM's <tt>AddRef()</tt> and <tt>Release()</tt>.
   <tt>nativeAddRef()</tt> can be called from the constructor of a Java subclass. 
   This method isn't used since the <tt>AddRef()</tt> comes at the native level. 
   <tt>nativeRelease()</tt> is called from the <tt>finalize()</tt> method of the 
   Java subclass.
   
<h3>
<tt>BookmarkEntryImpl</tt></h3>
<p>
   This concrete subclass of <tt>RDFTreeNode</tt> provides a <tt>Properties</tt>
   instance into which the bookmark's meta-data is stored. (NOTE: This is not yet 
   implemented.) Instances of <tt>BookmarkEntryImpl</tt> are created both by the 
   <tt>RDFTreeNode.newRDFTreeNode()</tt> and <tt>Bookmarks.newBookmarkEntry()</tt>.
   The latter method allows the custom app to add a new bookmark. The app
   should call <tt>Bookmarks.newBookmarkEntry()</tt>, fill in <tt>Properties</tt>
   and call <tt>Bookmarks.addBookmark()</tt> with the new bookmark and an
   option parent <tt>BookmarkEntry</tt>.
   
<h3>
<tt>RDFEnumeration</tt></h3>
<p>
   In order to fulfill the <tt>TreeNode</tt> contract, <tt>RDFTreeNode</tt>
   must provide a <tt>children()</tt> method which returns a <tt>java.util.Enumeration</tt>
   of the node's children. This class provides that enumeration; it simply calls 
   through to native RDF methods.

<p></p>   
<h5>Blackwood Release 0.9/Netscape PR3 - Last Modified 10/13/2000</h5>



<hr class="hide">
</div>
</div>
<div id="footer">
<ul>
<li><a href="../../../../../sitemap.html">Site Map</a></li>
<li><a href="../../../../../security/">Security Updates</a></li>
<li><a href="../../../../../contact/">Contact Us</a></li>
<li><a href="../../../../../foundation/donate.html">Donate</a></li>
</ul>
<p class="copyright">
Portions of this content are &copy; 1998&#8211;2009 by individual mozilla.org
contributors; content available under a Creative Commons license | <a
href="http://www.mozilla.org/foundation/licensing/website-content.html">Details</a>.</p>
<p>
<span>Last modified October 19,  2000</span>
<span><a href="http://bonsai-www.mozilla.org/cvslog.cgi?file=mozilla-org/html/projects/blackwood/webclient/ref_guides/Implementation_guide/object_hierarchies.htm&amp;rev=&amp;root=/www/">Document History</a></span>
</p>
</div>
</div>
</body>
</html>
