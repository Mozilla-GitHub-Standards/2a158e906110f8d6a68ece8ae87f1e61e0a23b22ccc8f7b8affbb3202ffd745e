This presentation provides an account of the author's experiences in
implementing Webclient: an open source, generic web browser API in
Java. Webclient uses technology from an existing web browser, initially
Mozilla, to implement the API. The author discusses the motivation,
origins, goals, and possible future directions for Webclient, the pro's
and cons of working with mozilla, the processes used in developing
Webclient, and gives a technical overview of the existing prototype
implementation.

I. Introduction

  A. Motivation: Why do we need webclient?

    - What you need to support 

    http 1.1, html 4.01, xhtml1.1/2, css1, css2, css3 I there any list
    of the protocols supported by mozilla?  Something like: CSS 1.0 (and
    some events from 2.0), HTML 4.0.1, HTTP 1.1, etc.  gif 89a

    http://www.opera.com/docs/specs/

  DOM0/1/2/3

  ECMASCRIPT, javascript 1.5 ECMA-262, editions 1, 2, 3

  XML

  image libraries (gif, jpg, png, tiff)

  plugins

   ssl2/3,tls
 
   unicode1/2/3

  rdf

  rss

  socks4/5

  ftp

  gopher

  don't forget image libs

    - wraps other embedding APIs to offer best-of-breed performance

    - dollar cost free, open source: MPL

  B. Related work

    ICEreader <http://www.icesoft.com/	pages/icereader_overview.php>

    NetClue <http://www.netcluesoft.com>

    Swing HTML Editor
    <http://java.sun.com/products/jfc/swingdoc-api-1.1/javax/swing/JEditorPane.html>.

  C. Demo

II. Experiences in the project

  A. History

  Mozilla

    code behavior changes randomly, it's work to keep things in sync

      Milestone approach, how it breaks down when you need bug fixes

    building on evolving API

    Not all functionality is there, development approach must be
    iterative to accomodate this.

  B. Processes

  specification

    mention Pressman template source, mention putting the templates into
    mozilla.org, hint at open source software development process.

  analysis

    Detail how you wrote the template, partitioned the work, and
    collected the results.

III. Architecture

  A. Bootstrapping

    1. jawt

    2. app bringup

  B. APIs

    - Discoverable capabilities through: queryInterface

    - 

  C. Sample App.

IV. Summary and Conclusions

    
