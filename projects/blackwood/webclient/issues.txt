This file is a simple solution to the problem of tracking webclient
implementation issues.  It may not be the final solution to
this problem.

Things that must be fixed before webclient 1.0

* Deal with lightweight/heavyweight component issues.

* Make sure loading of jpg image urls works with XPI install.

* Clean up debugging statements

* Perform manual thread analysis to discover potential for deadlock. 68729

* Multiple windows: bug 44327
  Javascript.OpenURL() does not work

* Test this out:

You can create an Embed "package" by running the makefile from the
embedding/config dir. This'll create a dir named "Embed" under
mozilla/dist/win32_d.obj with only the files required for an embed build.
(The mozilla/dist/win32_d.obj/bin dir/subdirs have a lot more files)

Chak


* Working non-debug version, works with Netscape 6 binary

* Webclient hangs after awhile: 64332

* On Change not firing: 61336

* Crash on exit: 59530

* Works with StarOffice 5.2

* update relnotes, bug 64334

* run test suite.

Other issues on the radar:

* Applets in webclient, bug 57689

* Make it so there is a javarules.mk.

Do we fit the bill for fetch and context progress callbacks as
               defined in the vertigo spec:

> > Fetch progress callbacks
> >
> > A fetch progress callback gives information on the status of a single
> > fetch. The kind of information provided in a fetch progress callback is:
> > "How many bytes have been downloaded so far?", "How many bytes remain to
> > be downloaded?", "has the fetch stalled?", etc.
> >
> > Context progress callbacks
> >
> > A context progress callback gives information on the status of a group
> > of fetches. The kind of information provided in a context progress
> > callback is: "how many items in this context have been fetched or remain
> > to be fetched?", etc.
> >
> > Information common to both kinds of callbacks includes: "What's the %
> > complete of this fetch?", "what is the network status of this fetch
> > (connecting, downloading, etc)?".

* #33099 Currently, we link with xpcom.lib, and we use non nsI
        interfaces.  This has to change so we only link with xpcom.dll.

* Write out unit tests for all the VERTIGO_TEST_START blocks.

* make sure that all the @see refs in the java doc work.

* memory profiling.

* Webclient integration with pluglets

* installer

* Do we handle HTTP POST?

* Is there a cross VM way to get the native window handle?

* Do we need to support Multiple VMs?

* Investigate Star's "replacing the protocol handler" requirement.

Things to do after 1_0:

* Find and fix webclient_post_1_0  bugs. 
 
