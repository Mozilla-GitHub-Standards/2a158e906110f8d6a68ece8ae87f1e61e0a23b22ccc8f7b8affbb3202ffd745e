<?xml version="1.0"?>
<?xml-stylesheet href="cml.css" type="text/css"?>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:xlink="http://www.w3.org/1999/xlink">

  <binding id="aqua">
    <content>
        <svg:svg xbl:inherits="width,height">
            <svg:g transform="translate(5,5)" xbl:inherits="onclick">
                <svg:g transform="scale(.7)">
<!--                    <svg:use anonid="_svg_use" xlink:href="#_aquabtn" xbl:inherits="width,height" x="0" y="0" /> -->
                    <svg:use anonid="_svg_use" xbl:inherits="width,height" x="0" y="0" />
                    <svg:text x="30" y="32" font-size="25" fill="black"><children /></svg:text>
                </svg:g>
            </svg:g>
        </svg:svg>
    </content>
    <implementation>
        <constructor>
        <![CDATA[
            var oAquaDefs=document.getElementById("_AquaDefs");
            if(!oAquaDefs) {
                // Find Body tag and emit out one time elements we need
                var oDiv = document.createElement("DIV");
                oDiv = document.body.insertBefore(oDiv,document.body.firstChild);
                var a=[],n=0;
                // Definitions needed for aquabuttons.
                // Below aqua button algorithm from http://jan.kollhof.net/projects/svg/examples/aqua.svg
                a[n++]= '<svg:svg xmlns="http://www.w3.org/2000/svg" id="_AquaDefs" width="0" height="0">';
                a[n++]=   '<svg:defs>';
                // gradient for the backround
                a[n++]=      '<svg:linearGradient id="_aquabg" x1="50%"  y1="0" x2="50%" y2="100%">';
                a[n++]=        '<svg:stop offset="0%" stop-color="rgb(0,0,20)" stop-opacity=".8"/>';
                a[n++]=        '<svg:stop offset="100%" stop-color="rgb(200,200,256)" stop-opacity=".8"/>';
                a[n++]=      '</svg:linearGradient>';
                // gradient for the top highlight
                a[n++]=      '<svg:linearGradient id="_aquahlt" x1="50%"  y1="0" x2="50%" y2="100%">';
                a[n++]=        '<svg:stop offset="0%" stop-color="white" stop-opacity="1"/>';
                a[n++]=        '<svg:stop offset="90%" stop-color="white" stop-opacity="0"/>';
                a[n++]=      '</svg:linearGradient>';
                // gradient for the top highlight bullet
                a[n++]=      '<svg:linearGradient id="_aquahltbl" x1="50%"  y1="0" x2="50%" y2="100%">';
                a[n++]=        '<svg:stop offset="0%" stop-color="white" stop-opacity="1"/>';
                a[n++]=        '<svg:stop offset="100%" stop-color="white" stop-opacity="0"/>';
                a[n++]=      '</svg:linearGradient>';
                // gradient for the bottom highlight
                a[n++]=      '<svg:linearGradient id="_aquahlb" x1="50%"  y1="0" x2="50%" y2="100%">';
                a[n++]=        '<svg:stop offset="20%" stop-color="white" stop-opacity="0"/>';
                a[n++]=        '<svg:stop offset="100%" stop-color="white" stop-opacity="1"/>';
                a[n++]=        '</svg:linearGradient>';
                // gradient for the bottom highlight bullet
                a[n++]=      '<svg:linearGradient id="_aquahlbbl" x1="50%"  y1="0" x2="50%" y2="100%">';
                a[n++]=        '<stop offset="0%" stop-color="white" stop-opacity="0"/>';
                a[n++]=        '<stop offset="100%" stop-color="white" stop-opacity="1" />';
                a[n++]=      '</svg:linearGradient>';
                // gaussian blur for the bottom highlight
                a[n++]=      '<svg:filter id="_aquagblur2">';
                a[n++]=        '<feGaussianBlur stdDeviation="2"/>';
                a[n++]=      '</svg:filter>';
                a[n++]=      '<svg:filter id="_aquagblur1">';
                a[n++]=        '<feGaussianBlur stdDeviation="1"/>';
                a[n++]=      '</svg:filter>';
                // shape of the button
                a[n++]=      '<svg:rect id="_aquabt" x="0" y="0" rx="25" ry="25" width="100" height="50" stroke="none" fill="inherit" />';
                // shape of bullet
                a[n++]=      '<svg:circle id="_aquabl" cx="25" cy="25" r="25" stroke="none" fill="inherit"/>';
                a[n++]=    '</svg:defs>';
                a[n++]=    '<svg:symbol id="_aquabtn" viewBox="-5 -5 110 60" preserveAspectRatio="none" >';
                // background gradient
                a[n++]=      '<svg:use xlink:href="#_aquabt" fill="url(#_aquabg)" />';
                // highlights
                a[n++]=      '<svg:use transform="scale(.8, .45) translate(12,4)" xlink:href="#_aquabt"  fill="url(#_aquahlt)"/>';
                a[n++]=      '<svg:use transform="scale(.8, .45) translate(12,57)" filter="url(#_aquagblur2)" xlink:href="#_aquabt" fill="url(#_aquahlb)"/>';
                a[n++]=    '</svg:symbol>';
                a[n++]=  '</svg:svg>';
                oDiv.innerHTML=a.join('');

                // Ran into a problem where the aquabtn wasn't getting drawn.
                // That was because if the link that svg:use is trying to use
                // doesn't exist when the svg:use is created, then it won't
                // know to refresh when that item is eventually added to the
                // document.  Like above, svg:use _svg_use is created before
                // _aquabtn is, so it doesn't help to reference it right away.
                // But at this point _aquabtn exists, so we'll set its
                // xlink:href attr which will cause _svg_use to refresh to
                // reflect this change.
                var use = document.getAnonymousElementByAttribute(this, "anonid",
                                                                  "_svg_use");
                use.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href",
                                   "#_aquabtn");
            }
        ]]>
        </constructor>
    </implementation>
  </binding>

</bindings>
