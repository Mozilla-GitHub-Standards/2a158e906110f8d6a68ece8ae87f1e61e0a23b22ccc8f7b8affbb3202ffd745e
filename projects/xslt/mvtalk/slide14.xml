<?xml-stylesheet href="slideStyle.xml" type="text/xsl"?>
<slide num="14" title="How is XSLT implemented">
  <bl>
    <bi>Two main classes: <code>txXSLTProcessor</code> and <code>ProcessorState</code>. Helper classes: Result handlers, nodesorter, numbering, patterns.</bi>
    <bi>txXSLTProcessor handles executing the stylesheet, ProcessorState handles the state and the "parsed" parts of the stylesheet.</bi>
    <bi>txXSLTProcessor: One big switch to handle the different XSLT elements. Highly recursive.</bi>
    <bi>ProcessorState: Mostly get/set/add methods. Keeps track current state and "global" things in the stylesheet such as templates, variables and keys.</bi>
    <bi>Result handlers: "Streamed" (eventdriven) interface. Five kinds of result handlers:
      <bl>
        <bi>Mozilla output, creates a DOM.</bi>
        <bi>Standalone output, streams resulting markup.</bi>
        <bi>Unknown output, stalls output until outputmethod is known.</bi>
        <bi>String value, creates a string.</bi>
        <bi>RTF, for variables.</bi>
      </bl>
    </bi>
    <bi>Patterns: Like XPath expressions but matches instead of executes.</bi>
    <bi>txMozillaXSLTProcessor and txStandaloneXSLTProcessor set up ProcessorState and call into txXSLTProcessor.</bi>
  </bl>
</slide>
