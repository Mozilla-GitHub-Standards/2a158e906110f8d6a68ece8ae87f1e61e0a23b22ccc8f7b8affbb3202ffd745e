# SIMPLE INDEXING SCRIPT
#
# This script reads a set of HTML files that have been marked up with special
# anchor tags and generates an index page. The general format of the tags is:
#	<A NAME="index_textIDX"></A>
#
# It supports the use of colons in the index text to create subentries:
#	<A NAME="navigator:browsing_the_webIDX"></A>
#
# But each entry has to be unique and it has to be on its own line. 
# And underscores, which must be used in the HTML to separate words,
# will be turned into the spaces in the actual index text.
# 
# To use the script, set the DIR variable a few lines down to the directory
# in which you want to scan the html files. You may also change the name
# of the resulting index page, which is currently set to "index.html"
#
# Usage: python idx.py
#

import re, string, os, glob
rex = re.compile('NAME="([\w|\s|:|_]+IDX)"', re.IGNORECASE)

DIR = '/u/oeschger/tmp_docs'
target = {}
prev_item = ''
os.chdir(DIR)
files = glob.glob('*.html')
def key(item):
	target[item] = '<a href="%s#%sIDX">' % ( file, item )

for file in files:
	f = open(file)
	page = f.name
	print page
	lines = f.readlines()
	for line in lines:
		mat = rex.search(line)
		if mat: key(mat.group(1)[:-3])
	f.close()

w = open('help_index2.rdf', 'w')

rdf_item = """"<rdf:Description about="help-index0.rdf%s">
    <nc:subheadings>
      <rdf:Seq>
        <rdf:li> <rdf:Description ID="%s"
	              nc:name="%s"
	              nc:link="%s"/> </rdf:li>
      </rdf:Seq>
    </nc:subheadings>
  </rdf:Description>""" % ( item[:1].lower(), id, item.split(":"[1].replace("_", " "))), name, link )
  
top = """<?xml version="1.0"?>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:nc="http://home.netscape.com/NC-rdf#">"""

w.write(top)
keylist = target.keys()
keylist.sort(lambda x, y: cmp(string.lower(x), string.lower(y)))

# for every item in the list of index entries
for item in keylist:
	# if the first letter of this item is new to the list, write the letter itself
	if item[:1].upper() != prev_item[:1].upper(): w.write('<p><b>%s</b><br>\n' % item[:1].upper()) 

	# if the item is of the format entry:subentry
	if len(item.split(":")) > 1: 
		# if this base entry is the same as the previous, write only the subentry
		if (item.split(":")[0] == prev_item.split(":")[0]): 
			w.write('&nbsp;&nbsp;%s%s</a><br>\n' %( target[item] , item.split(":")[1].replace("_", " ")))

		else: # otherwise, write both the base and the subentry
			# get rid of the underscores in the printed part of the link
			base = item.split(":")[0].replace("_"," ")
			w.write(base + '<br>\n&nbsp;&nbsp;' + target[item] + item.split(":")[1].replace("_", " ") + '</a><br>\n')

	# otherwise, write the entry as a single thing
	else: w.write(target[item] + item.replace("_", " ") + '</a><br>\n')
	prev_item = item

w.write("</body></html>")	
w.close()

