<HTML><HEAD>   <META NAME="GENERATOR" CONTENT="Mozilla/4.03 [en]C-NSCP  (Win95; U) [Netscape]">   <TITLE>Client Naming Conventions</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><H2><FONT FACE="Arial,Helvetica">Naming Conventions for Functions and Files</FONT></H2>While file-naming conventions are not always practical, they can be veryuseful. The most important naming convention used by the client sourceis prefixing a function name with an abbreviation of the module in whichthe function resides. For example, all public functions in the networkinglibrary have names that begin with <TT>NET_</TT>. Typically, functionsprivate to a module have the same prefix, but the characters in the abbreviationare all lowercase, as opposed to all uppercase for exported functions.<P>Here is a list of common prefixes:<BR>&nbsp;<TABLE BORDER ><TR><TH>module</TH><TH>prefix</TH></TR><TR><TD>layout engine</TD><TD>LO_</TD></TR><TR><TD>parser</TD><TD>PA_</TD></TR><TR><TD>networking library</TD><TD>NET_</TD></TR><TR><TD>"front end" (platform specific)</TD><TD>FE_</TD></TR><TR><TD>image library</TD><TD>IL_</TD></TR><TR><TD>connection to java layer</TD><TD>LJ_</TD></TR><TR><TD>compositor</TD><TD>CL_</TD></TR><TR><TD>cross-platform utilites</TD><TD>XP_</TD></TR><TR><TD>OS level utilites</TD><TD>PR_</TD></TR></TABLE><P>The use of prefixes offers two main advantages:<UL><LI>Module-specific prefixes before function names prevents name collisionsbetween functions in different modules.</LI><LI>When looking at a stack trace, programmers can quickly tell where to begindebugging.</LI></UL>Here are two examples of file naming conventions currently in use:&nbsp;<TT>libmocha</TT> filenames begin with <TT>lm_*.c,</TT> and layout filenamesbegin with <TT>lay*.c</TT>.<HR WIDTH="100%"><FONT SIZE="-1"><CENTER>Copyright &copy; 1998<A HREF="http://home.netscape.com/misc/contact_info.html">NetscapeCommunications Corporation</A></CENTER></FONT></BODY></HTML>