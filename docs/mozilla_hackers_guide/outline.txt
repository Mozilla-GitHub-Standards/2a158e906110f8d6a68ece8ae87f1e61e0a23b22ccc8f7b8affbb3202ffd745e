Hacking Mozilla

* Introduction

* Introduction

** The organization

** Working with the code

In this section we will talk about working with the Mozilla souce
code.  This includes where to file bugs about the code, where to find
the code, what to do when you find bugs, who you have to talk to when
you have something to contribute and what the licensing options are.

*** Bugzilla

Bugzilla is really the central point for the programmers who are
working on the Mozilla project.  Most people working on the project
use bugzilla to manage the list of things that they are working on and
it's how you get things into that person's work queue.  It's also used
for tracking checkins of source code [ see bonsai ].  Whether or
not you have a bug to report or if you have something to get into the
tree, whether or not it's new code or just a fix, a report has to end
up in bugzilla at some point.

Bugzilla is a web application that is located at the following url:

http://bugzilla.mozilla.org

If you are going to be working on the Mozilla source code or even
reporting bugs you should sign up for an account there.  It's very
easy to do.

*** CVS servers

Mozilla.org maintains two cvs servers.  One of the servers is the
private cvs server.  This is where developers commit changes to the
Mozilla source code.  This is a private server and you have to sign up
to get commit access to this server.  Please see the following url for
more information about getting write access to the cvs server.

http://www.mozilla.org/hacking/getting-cvs-write-access.html

The second server is the anonymous cvs server.  This server is where
most people who don't have commit access get the source code.  The url
that describes how to get the mozilla source code from the anonymous
cvs server is at the following url:

http://www.mozilla.org/cvs.html

If you are interested in the leading tip of the source code then this
is the best way to get it.  Also, if you are an advanced developer and
you will be using bugzilla [ see bugzilla ] then you will be
generating patches for people to review.  The best way to generate
patches is with cvs so you should have a checked out tree from the cvs
server to work from.

*** Tinderbox

Tinerbox is mozilla's automated build system.  Mozilla has to run on
many different platforms and sometimes a change that works fine on one
platform might not run or compile on another platform.  Because of
this tinderbox and its respective build machines are constantly
checking out the mozilla tree from cvs, building it, and doing
automated tests.

When a developer is checking in source code they are required to watch
the tinderbox page and make sure that the changes that they have
checked in haven't affected other platforms than the one that they
checked in from.  Tinderbox is not a replacement for testing your
patches properly on other platforms via checkin buddies but it's a
good first indicator of problems you might not have anticipated.

You can see the main tinderbox web page here:

http://tinderbox.mozilla.org/showbuilds.cgi?tree=SeaMonkey

If there have been checkins recently you will see people's names in
the left hand column.  These links will show you information about
that person's checkin.  If you click on one of them you will be taken
to another application called bonsai [ see bonsai ].

*** Bonsai

Bonsai is tree control.  It's a tool that allows you to view checkin
history to specific files or parts of files, what the checkin message
was and if that message contained information about what bugs numbers
might have been fixed [ see bugzila ] what bug numbers those are.

This allows you to track what the changes to the tree was, who did it
and why they did it.  When you are tracking a bug in a bit of source
code this can be very helpful.

Bonsai does have a page where you can make queries:

http://bonsai.mozilla.org/

But it's best used as part of another tool, usually tinderbox [ see
tinderbox ] or from lxr [ see lxr ].  For an example query here's a
list of all the checkins to the tip of the cvs tree for the SeaMonkey
project in the last day:

http://bonsai.mozilla.org/cvsquery.cgi?branch=HEAD&file=mozilla/&date=day

*** lxr

lxr is a tool that allows you to view the source files in the cvs
repository.  It also has rudimentary language parsing and cross
referencing.  This means that if there's a function call in a piece of
source code it will turn that bit of source code into a hyperlink and
show you all of the uses of that function in the repository.  For
tracking calls or navigating unfamiliar source code this can be very
helpful.

lxr also has links to information about a file including the checkin
history, all previous version of the file, and who is to blame for
each line in the file.

For an example of a file in lxr:

http://lxr.mozilla.org/seamonkey/source/widget/src/gtk/nsWindow.cpp

Try clicking the ``CVS Log'' and ``CVS Blame'' links to see
information about the history of the file or blame information.  Also,
the checkins to the file in the last month is interesting as well.

*** Module owners

All of the code in the Mozilla project is broken up into logical
modules.  Each one of these large chunks of code.  For each of these
chunks of code there is usually a person who has the most experience
with it and is most responsible for it's direction and bugs in it.
These people are called ``Module owners.''

In addition to owners there are also peers for a module.  These are
people who also have a lot of experience with the code and are usually
the people that the module owner turns to when the need something
reviewed or need to bounce ideas off of.  Also, when the module owner
is unavailable to answer questions or respond to issues the peers are
the ones who take his or her place.

When you have a question about a chunk of code the best person to turn
to is the module owner for that code.  The list of modules and current
owners is available at this url:

http://www.mozilla.org/owners.html

*** Review

It is the policy of mozilla.org that all of the code that goes into
the cvs repository is reviewed by at least one additional person
beyond the person that wrote it.  We do this in order to maintain code
quality and to hopefully reduce the number of mistakes that are made
when checking in new code.

Before checking into any module it is important to get the approval
and review from that module's owner [ see module owner ].

In addition to that all checkins should go through a super-review as
well.  This super-review is to check for correctness and for code
quality and maybe to even filter out silly bugs as well.

For more information about the super-review process please see the
following url:

http://www.mozilla.org/hacking/reviewers.html

*** Releases

Mozilla.org tries to make regular releases of source code and prebuilt
binaries for our primary platforms.  In the past these have been what
we refer to as milestone releases.  Because the browser was still in
its development phase the quality of the milestone releases from the
standpoint of end users was quite low so we didn't want to label them
with any kind of release number.  These have been called M3, M4, M5,
etc.

As the quality has improved to the point where it is almost ready for
end users the names have been changed to a more familiar decimal
number based naming scheme.

With each release we include binaries for common platforms including
win32, the Macintosh, and Linux.  Other contributors will also compile
binaries for their platform.  In addition to the binaries we also
include the source code for that release.

You can find more about our release code schedule from this url:

http://www.mozilla.org/roadmap.html

*** Licensing

The Mozilla source code is released under a number of licences.  Which
license that bit of source code is release under mostly depends on
where the code came from and where we would like to see it used.  The
primary license that we use is the Mozilla Public License.

** Terminology

As part of the Mozilla project we have made it our mission in life to
add as much extra jargon and terminology to the english language as
possible.  Many of the terms that we use on a day to day business can
be found in our jargon file:

http://www.mozilla.org/docs/jargon.html

* The major modules

** Introduction

Mozilla is made up of a number of logical modules.  These modules in
turn may be made up of a number of components.  The term ``module''
really indicates ownership and a general set of functionality.  The
term ``component'' is a literal object that you can access through a
specific interface.

** The component mantra and scriptability

In mozilla one of the things that we try to do is to make as many of
the objects that we have to implement have a well defined interface.
Defining this interface is usually done using our own interface
description language which is loosely based on CORBA IDL called xpidl
[ see xpidl ].  In addition almost all interfaces that we define in
this language support the interface used for lifetime management via
reference counting called nsISupports.

If you use XPIDL to describe your interface the interface can be
described using a unique identifier and created using that identifier.
There are a number of reasons what this is useful.  One reason is you
can use the same method to create all objects.  This means that you
don't have to have a different factory method for each type of object.

Because all interfaces support the nsISupports interface you can also
use the same methods on all objects to manage their lifetimes.  This
can vastly improve the methods used for memory management throughout
the application.

Another really useful benefit of using XPIDL and the base interface is
the ability to script those interfaces.  If you stick to a set of
common datatypes and other scriptable interfaces, your interfaces can
be used from langauges other than C++ without any other modification.
In addition, you can write objects that support these scriptable
interfaces in a number of scripting languages and access them from C++
or any of the other supported languages without any special support.
This means that you can implement your interface in whatever language
you want and anyone can use it.

Because of this much of the browser is written in JavaScript with
components written in other languages.

Much of this is explained in detail below.

For more information about mozilla's scriptability see this url:

http://www.mozilla.org/scriptable/

** NSPR

NSPR is the Netscape Portable Runtime.  NSPR is the base system that
allows Mozilla to be built and run on multiple platforms.  It includes
a set of data types that have a consistent size and behaviour on every
platform.  It also includes access to file and console I/O, memory
allocation, threads, mutexes, condition variables, networking, system
information and basic string handling.  It also includes some common
data structures like hash tables and arena allocators.

NSPR is probably the oldest bit of source code that is in the Mozilla
project and is also the most stable.

There is documentation available for NSPR.  You can find it here:

http://www.mozilla.org/projects/nspr/

** XPCOM

[ scc ]

*** Naming components
**** IID vs. CID
**** progids
*** XPIDL
*** Scriptability
*** Services
*** Managing lifetime
**** nsCOMPtr
**** Common macros
***** do_QueryInterface
***** do_GetInterface
***** do_CreateInstance
***** getter_AddRefs
***** dont_AddRef
****	Weak References
***** nsWeakReference
***** Observer for weak references
**** Factory methods
*** Strings
**** Unichar strings vs. non-Unichar strings
***** Converting in between
**** xpidlcstring
***** macros
**** copying
**** sharing
**** iterators
*** Component Manager
*** Components
**** components vs. shared libraries
**** .xpt files
**** easy macros for creating components
*** Observing shutdown

** Layout

[ waterson ]

*** Global window impl
*** View manager
*** Events

** JavaScript

[ brendan ]

*** Overview of engine
*** Thread safety
*** C API
*** JSContext and JSRuntime
*** embedding outside of mozilla
*** Relation to windows in mozilla

** Networking

[ waterson ]

** RDF

[ waterson ]

** XUL

[ waterson ]

** XBL

[ waterson ]

** i18n
*** Locales and encodings
*** Converting

** Prefs

** URI loading
*** External apps
*** Unknown content type handler

** Profiles

** Image handling

** Native widgets and mainloop

** Plugins

[ blizzard ]

*** Native widget types
**** Windows
**** Mac
**** Unix

** Event passing

[ blizzard ]

*** Native events
*** PLEvents
*** Event queues
**** Monitored Event Queue
**** Native Event Queue
**** Event queue lifetimes

** Threads and proxies

*** Creating threads
*** Managing thread lifetimes
*** Creating proxies
*** Proxying calls

** Parser

* Filesystem layout

[ blizzard ]

** Components
** Chrome
*** Addressing ( chrome:// resource:// )
*** jar packaging

* Creating your own components

[ blizzard ]

* Embedding overview

[ blizzard ]

Embedding Mozilla has been made easier in recent releases because of a
focus on the problem of embedding.  Some work has taken place in the
form of convenience classes and some re-architecture that should allow
you do embed it pretty easily.

In order to embed mozilla into your application you will need to do a
few things.

o You will need to create an object that will act as the owner for
each mozilla window created.  Implementing that object is covered
below [ see implementing your class ].

o If this is the first window that you are creating in your
application you will need to start up the embedding routines.  There's
a convenience function for doing this included [ see starting up
embedding ].

** starting up embedding

Before you create any windows you should make sure that you initialize
the embedding routines.  There's a lot that goes on behind the scenes
that is hidden behind a couple of simple routines.

These routines are in nsEmbedAPI.h and are two simple routines:

NS_InitEmbedding(nsILocalFile *mozBinDirectory,
nsIDirectoryServiceProvider *appFileLocProvider);

NS_TermEmbedding();

|NS_InitEmbedding| will start up all the services that you need for
embedding.  This includes starting up XPCOM, initializing the registry
in some cases, creating the thread event queue and the chrome
registry.  These are all things that you don't want to deal with so
you can just use that function unless you have some strange special
requirements.

You will notice that it takes a couple of arguments, both of which are
optional.

The first argument is an |nsIFile| interface that points at the base
location for all of the Mozilla components.  If you don't pass it in
it will take the value from the MOZILLA_FIVE_HOME environment
variable.  Please note that if this fails you won't be able to create
any components and nothing will function.

The second argument is an |nsIDirectoryServiceProvider|.  This is a
service that tells mozilla where to put cache files, where to put
profiles and other per-user information.  [ XXX fill in more about
this - where to find existing impl, etc. ]

The |NS_TermEmbedding| call shuts down all of the services that it
started and shuts down XPCOM.  Many things depend on this being shut
down ( saving preferences, etc. ) so if you have the chance you should
definitely shut it down.

Here is a link to the header file in question:

http://lxr.mozilla.org/seamonkey/source/embedding/base/nsEmbedAPI.h

** implementing your class

In order to embed Mozilla you have to create a class that will act as
the owner for each Mozilla window that you want to have in your
application.  That class must also implement certain interfaces that
Mozilla will use to make upcalls to notify you of certain window
events.  Some of the interfaces that you can implement are listed
below.

*** nsIWebBrowser convenience class

A class has been written that makes it very easy to embed Mozilla
windows in your app.  This is the nsWebBrowser class.  This class does
a lot of the heavy lifting so you don't have to.  Some of the things
that it does for you include URI loading, notifying you of changes to
the state of the document that is loaded, focus handling and others.
We definitely recommend that you use it.

Since the nsIWebBrowser object is a standard XPCOM object it's pretty
easy to create one.  It goes something like this:

#include "nsIWebBrowser.h" // to get our interface definition
#include "nsCWebBrowser.h" // to get the contract ID

...

nsCOMPtr<nsIWebBrowser> webBrowser;
webBrowser = do_CreateInstance(NS_WEBBROWSER_CONTRACTID);

And that's about it.

Now that you have created the object you need to tell it how to get a
handle on your object that the nsIWebBrowser object can make upcalls
into.  To do this you can use |SetContainerWindow| method on the
nsIWebBrowser object that you just created.  That method expects to be
passed an interface of type |nsIWebBrowserChrome| so you should make
sure that you QueryInterface your object to that type before you pass
it in.  This would looks something like this:

nsCOMPtr<nsIWebBrowserChrome> browserChrome = do_QueryInterface(myObject);
webBrowser->SetContainerWindow(browserChrome);

Once the browserChrome object goes out of scope the webBrowser will be
left with a reference to your object, however that reference is not
|AddRef|ed.  The nsWebBrowser object assumes that it will be destroyed
before your object is so be careful about the order of destruction.

The |nsIWebBrowser| class is only available on the web as IDL because
it is an XPCOM compoent.  The IDL attributes and method declarations
are all converted into C++ calls according to the rules of XPIDL [ see
xpidl ].  The IDL for this class is available in lxr:

http://lxr.mozilla.org/seamonkey/source/embedding/browser/webBrowser/nsIWebBrowser.idl

*** listener interfaces

**** nsIWebBrowserChrome

It is required that your |nsIWebBrowserChrome| object implement this
interface.

**** nsIWebBrowserSiteWindow
**** nsIURIContentListener
**** nsIPrompt
**** nsITooltipListener
**** nsIWindowWatcher
**** nsIWindowCreator
*** what to link with
*** docshell + docshell tree + ownership
*** Hooking up to DOM events
*** Getting access to the DOM
*** Chrome content vs. normal content
*** cleaning up and shutting down

** prefs
*** what do you need to set

** what components do need?

* Future roadmap

[ waterson/brendan/blizzard ]

* Howto

* C++ portability guide

* Coding style preferences

[ brendan/scc/shaver ]

** 80th column violations
** if/else bracket rules
** vertical whitespace
