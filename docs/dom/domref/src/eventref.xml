<chapter>
<title>DOM Event Reference</title>
<Body>
This chapter describes the DOM Level 2 Event Model as implemented by Gecko. The <Code>
event</Code>
object itself is described, as well as the interfaces for event registration on other nodes in the DOM, event handers and event listeners, and several longer examples that show how the various event interfaces relate to one another.</Body>
<BulletedList>
<Bulleted>
<Bold>
DOM Event Interface</Bold>
</Bulleted>
<Bulleted>
<Bold>
DOM Event Handler List</Bold>
</Bulleted>
</BulletedList>
<Heading1>
DOM Event Interface</Heading1>
<Body>
The DOM <Code>
Event</Code>
interface is exposed in the <Code>
event</Code>
objects that are passed to the event handlers on various elements in the DOM. The following very simple example shows how an <Code>
event</Code>
object can be referenced and manipulated from within one such event handler.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function foo(e) {</CellCode>
<CellCode>
// event handling functions like this one</CellCode>
<CellCode>
// get a reference to the event they handle</CellCode>
<CellCode>
// (in this case as Å‚ÄúeÅ‚Äù).</CellCode>
<CellCode>
alert(e);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
table_el.onclick = foo;</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Body>
This example is woefully simplistic, but it shows an important feature of events in the Gecko DOM, which is that <Code>
event</Code>
objects in the DOM are typically accessed in the event handler functions. Once you have a reference to the <Code>
event</Code>
object, you can access all of the properties and methods described in this chapter.</Body>
<Body>
Also see <Bold>
Example 5: Event Propagation</Bold>
in the Examples chapter for a more detailed example of how events move through the DOM.</Body>
<Body>
In addition to the <Code>
event</Code>
object described here, the Gecko DOM also provides methods for registering event listeners on nodes in the DOM, removing those event listeners, and dispatching events from the DOM. These and the various <Bold>
Event Handlers</Bold>
on HTML or XML elements are the main entry points for events in the DOM. These three methods are described in the <Bold>
DOM Element Reference</Bold>
chapter of this book.</Body>
<Heading2>
Properties</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
altKey</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the <Code>
&lt;alt&gt;</Code>
key was pressed during the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
bubbles</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the event bubbles up through the DOM or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cancelBubble</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the bubbling up of the event has been canceled or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cancelable</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the event is cancelable.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
charCode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a number representing the character that was pressed as part of the key event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
clientX</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the horizontal position of the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
clientY</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the vertical position of the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
ctrlKey</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the <Code>
&lt;ctrl&gt;</Code>
key was pressed during the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
currentTarget</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the currently registered target for the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
detail</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns detail about the event, depending on the type of event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
eventPhase</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Used to indicate which phase of the event flow is currently being evaluated.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
isChar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the event produced a key character or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
keyCode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a number representing the character that was pressed as part of the key event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
layerX</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the horizontal coordinate of the event relative to the current layer.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
layerY</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the vertical coordinate of the event relative to the current layer.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
metaKey</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the <Code>
meta</Code>
key was pressed during the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
pageX</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the horizontal coordinate of the event relative to the page</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
pageY</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the vertical coorindate of the page relative to the page.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
relatedTarget</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Identifies a secondary target for the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
screenX</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the horizontal position of the event on the screen.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
screenY</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the vertical position of the event on the screen.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
shiftKey</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the <Code>
&lt;shift&gt;</Code>
key was pressed when the event was fired.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
target</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the target to which the event was originally dispatched.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
timeStamp</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the time that the event was created.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
type</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the name of the event (case-insensitive).</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
view</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The view attribute identifies the</CellBody>
<CellBody>
<Code>
AbstractView</Code>
from which the event was generated.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Heading2>
Methods</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
initEvent</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The initEvent method is used to initialize the value of an Event created through the <Code>
DocumentEvent</Code>
interface.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
initMouseEvent</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
This method intializes the value of a mouse event once itÅ‚Äôs been created</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
initUIEvent</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Initializes a UI event once itÅ‚Äôs been created.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
preventDefault</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Cancels the event (if it is cancelable).</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
stopPropagation</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Stops the propagation of events further along in the DOM.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Body>
</Body>
<Head1>
altKey</Head1>
<Body>
Indicates whether the <Code>
&lt;alt&gt;</Code>
key was pressed when the event was fired.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.altKey</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean true | false.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goInput(e) { // checks altkey and</CellCode>
<CellCode>
if e.altKey         // passes event along</CellCode>
<CellCode>
superSizeOutput(e);</CellCode>
<CellCode>
else</CellCode>
<CellCode>
doOutput(e)</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
link to spec</Code>
<Body>
</Body>
<Head1>
bubbles</Head1>
<Body>
Indicates whether the given event bubbles up through the DOM or not.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.bubbles</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean true | false.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goInput(e) {  // checks bubbles and</CellCode>
<CellCode>
if not e.bubbles     // passes event along if itÅ‚Äôs not</CellCode>
<CellCode>
passItOn(e);       // already bubbling</CellCode>
<CellCode>
doOutput(e)</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None..</Body>
<Head3>
Specification</Head3>
<Code>
link to spec</Code>
<Body>
</Body>
<Head1>
cancelBubble</Head1>
<Body>
Indicates whether the event bubbling was canceled for this event.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.cancelBubble</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean true | false.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
link to spec</Code>
<Body>
</Body>
<Head1>
cancelable</Head1>
<Body>
Indicates whether the event is cancelable.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.cancelable</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean true | false.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Whether an event can be canceled or not is something thatÅ‚Äôs determined when that event is created. To cancel an event, you must call the preventDefault() method on the event, which keeps it from executing the default action that is its usual result.</Body>
<Head3>
Specification</Head3>
<Code>
cancelable</Code>
<Body>
</Body>
<Head1>
charCode</Head1>
<Body>
Returns a number representing the character that was pressed as part of the key event.</Body>
<Head3>
Syntax</Head3>
<Code>
character = event.charCode</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
character</Code>
is a number representing the key that was pressed for the event.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if e.charCode == 0</CellCode>
<CellCode>
// mouseEvent!</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Mouse events generate a charCode of <Code>
0</Code>
. For a list of the charCode values associated with particular keys, run the example in <Bold>
Example 7: Displaying Event Object Constants</Bold>
and view the resulting HTML table.</Body>
<Head3>
Specification</Head3>
<Code>
Not part of specification.</Code>
<Code>
See nsIDOMKeyEvent.IDL</Code>
<Body>
</Body>
<Head1>
clientX</Head1>
<Body>
Returns the horizontal coordinate of the event within the DOM client area.</Body>
<Head3>
Syntax</Head3>
<Code>
returnType = event.property</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
param</Code>
is a something.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function checkClientClickMap(e) {</CellCode>
<CellCode>
if e.clientX &lt; 50</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
if 50 &lt;= e.clientX &lt; 100</CellCode>
<CellCode>
doYellowButton();</CellCode>
<CellCode>
if e.clientX &gt;= 100</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
clientY</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
clientX</Code>
<Body>
</Body>
<Head1>
clientY</Head1>
<Body>
Returns the vertical coordinate of the event within the DOM client area.</Body>
<Head3>
Syntax</Head3>
<Code>
returnType = event.property</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
param</Code>
is a something.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function checkClientClickMap(e) {</CellCode>
<CellCode>
if e.clientY &lt; 50</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
if 50 &lt;= e.clientY &lt; 100</CellCode>
<CellCode>
doYellowButton();</CellCode>
<CellCode>
if e.clientY &gt;= 100</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
clientX</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
clientY</Code>
<Body>
</Body>
<Head1>
ctrlKey</Head1>
<Body>
Indicates whether the <Code>
&lt;ctrl&gt;</Code>
key was pressed when the event was fired.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.ctrlKey</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean true | false.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goInput(e) { // checks ctrlKey and</CellCode>
<CellCode>
if e.ctrlKey        // passes event along</CellCode>
<CellCode>
superSizeOutput(e);</CellCode>
<CellCode>
else</CellCode>
<CellCode>
doOutput(e)</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
ctrlKey</Code>
<Body>
</Body>
<Head1>
currentTarget</Head1>
<Body>
Identifies the currently registered target for the event.</Body>
<Head3>
Syntax</Head3>
<Code>
targetObj = event.currentTarget</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
targetObj</Code>
is an object reference to a node in the DOM.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if e.currentTarget != t_el</CellCode>
<CellCode>
resetEventEngine();</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
currentTarget</Code>
<Body>
</Body>
<Head1>
detail</Head1>
<Body>
Returns detail about the event, depending on the type of event.</Body>
<Head3>
Syntax</Head3>
<Code>
detailedInfo = event.detail</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
detailedInfo</Code>
is a number.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;event.detail&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function giveDetails(e) {</CellCode>
<CellCode>
// details = e.detail;</CellCode>
<CellCode>
text = document.getElementById(&quot;t&quot;);</CellCode>
<CellCode>
text.setAttribute(&quot;value&quot;, e.detail);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
function init() {</CellCode>
<CellCode>
b1 = document.getElementById(&quot;b&quot;);</CellCode>
<CellCode>
b1.onclick=giveDetails;   </CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;body onload=&quot;init();&quot;&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;form&gt;</CellCode>
<CellCode>
&lt;input id=&quot;b&quot; type=&quot;button&quot; value=&quot;details&quot; /&gt;</CellCode>
<CellCode>
&lt;input id=&quot;t&quot; type=&quot;text&quot; value=&quot;&quot;  /&gt;&lt;br/&gt;</CellCode>
<CellCode>
&lt;input type=&quot;reset&quot; /&gt;</CellCode>
<CellCode>
&lt;/form&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
detail is a number representing how many times the mouse has been clicked in the same location for this event. The value of detail is usually 1.</Body>
<Head3>
Specification</Head3>
<Code>
detail</Code>
<Body>
</Body>
<Head1>
eventPhase</Head1>
<CellBody>
Indicates which phase of the event flow is currently being evaluated.</CellBody>
<Head3>
Syntax</Head3>
<Code>
phase = event.eventPhase</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
phase</Code>
is a number with one of the following possible values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
0</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
CAPTURING_PHASE</Code>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
1</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
AT_TARGET</Code>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
2</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
BUBBLING_PHASE</Code>
</CellBody>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
eventPhase</Code>
<Body>
</Body>
<Head1>
isChar</Head1>
<Body>
Returns a boolean indicating whether the event produced a key character or not.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.isChar</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
boolean </Code>
true | false</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if e.isChar</CellCode>
<CellCode>
echoInput(e.type);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Some key combos may raise events but not produce any character (example: <Code>
ctrl + alt</Code>
?). When this is the case, isChar returns false.</Body>
<Body>
isChar is used when event handlers need to do something like echo the input on the screen.</Body>
<Head3>
Specification</Head3>
<Code>
Not part of specification.</Code>
<Body>
</Body>
<Head1>
keyCode</Head1>
<Body>
Returns a number representing the character that was pressed as part of the key event.</Body>
<Head3>
Syntax</Head3>
<Code>
character = event.keyCode</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
character</Code>
is a number representing the key that was pressed for the event.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if e.keyCode == 0</CellCode>
<CellCode>
// mouseEvent!</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Mouse events generate a keyCode of <Code>
0</Code>
. For a list of the keyCode values associated with particular keys, run the example in <Bold>
Example 7: Displaying Event Object Constants</Bold>
and view the resulting HTML table.</Body>
<Head3>
Specification</Head3>
<Code>
Not part of specification.</Code>
<Code>
See nsIDOMKeyEvent.IDL</Code>
<Body>
</Body>
<Head1>
layerX</Head1>
<Body>
Returns the horizontal coordinate of the event relative to the current layer.</Body>
<Head3>
Syntax</Head3>
<Code>
coordinate = event.layerX</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
coordinate</Code>
is a number.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
link to spec</Code>
<Body>
</Body>
<Head1>
layerY</Head1>
<Body>
Returns the vertical coordinate of the event relative to the current layer.</Body>
<Head3>
Syntax</Head3>
<Code>
coordinate = event.pageY</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
coordinate</Code>
is a number.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
Not part of specification.</Code>
<Body>
</Body>
<Head1>
metaKey</Head1>
<Body>
Returns a boolean indicating whether the <Code>
&lt;meta&gt;</Code>
key was pressed when the event was fired.</Body>
<Head3>
Syntax</Head3>
<Code>
returnType = event.property</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
param</Code>
is a something.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goInput(e) { // checks metaKey and</CellCode>
<CellCode>
if e.metaKey        // passes event along</CellCode>
<CellCode>
superSizeOutput(e);</CellCode>
<CellCode>
else</CellCode>
<CellCode>
doOutput(e)</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
metaKey</Code>
<Body>
</Body>
<Head1>
pageX</Head1>
<Body>
Returns the horizontal coordinate of the event relative to the visible page.</Body>
<Head3>
Syntax</Head3>
<Code>
coordinate = event.pageX</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
coordinate</Code>
is a number.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
link to spec</Code>
<Body>
</Body>
<Head1>
pageY</Head1>
<Body>
Returns the vertical coordinate of the event relative to the visible page.</Body>
<Head3>
Syntax</Head3>
<Code>
coordindate = event.pageY</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
coordinate</Code>
is a number.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
link to spec</Code>
<Body>
</Body>
<Head1>
relatedTarget</Head1>
<Body>
Identifies a secondary target for the event.</Body>
<Head3>
Syntax</Head3>
<Code>
sTargetObj = event.relatedTarget</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sTargetObj</Code>
is a reference to an additional event target.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
var rel = event.relatedTarget;</CellCode>
<CellCode>
// dump(&quot;LEAVING &quot; + (rel ? rel.localName : &quot;null&quot;) + &quot;\n&quot;);</CellCode>
<CellCode>
</CellCode>
<CellCode>
// relatedTarget is null when the titletip is first shown:</CellCode>
<CellCode>
// a mouseout event fires because the mouse is exiting </CellCode>
<CellCode>
// the main window and entering the titletip &quot;window&quot;.</CellCode>
<CellCode>
</CellCode>
<CellCode>
// relatedTarget is also null when the mouse exits the main </CellCode>
<CellCode>
// window completely, so count how many times relatedTarget </CellCode>
<CellCode>
// was null after titletip is first shown and hide popup</CellCode>
<CellCode>
// the 2nd time</CellCode>
<CellCode>
if (!rel) {</CellCode>
<CellCode>
++this._mouseOutCount;</CellCode>
<CellCode>
if (this._mouseOutCount &gt; 1)</CellCode>
<CellCode>
this.hidePopup();</CellCode>
<CellCode>
return;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
// find out if the node we are entering is one of our 
// anonymous children</CellCode>
<CellCode>
while (rel) {</CellCode>
<CellCode>
if (rel == this)</CellCode>
<CellCode>
break;</CellCode>
<CellCode>
rel.parentNode;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
// if the entered node is not a descendant of ours, hide </CellCode>
<CellCode>
// the tooltip</CellCode>
<CellCode>
if (rel != this &amp;&amp; this._isMouseOver) {</CellCode>
<CellCode>
this.hidePopup();</CellCode>
<CellCode>
}        </CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
From the W3 spec: Å‚ÄúCurrently this attribute is used with the mouseover event to indicate the <Code>
EventTarget</Code>
which the pointing device exited and with the mouseout event to indicate the <Code>
EventTarget</Code>
which the pointing device entered.Å‚Äù </Body>
<Body>
The example above is typical: the <Code>
relatedTarget</Code>
property is used to find the other element, if any, involved in an event. Events like mouseovers are oriented around a certain target, but may also involve a secondary target, such as the target that is exited as the mouseover fires for the primary target.</Body>
<Head3>
Specification</Head3>
<Code>
relatedTarget</Code>
<Body>
</Body>
<Head1>
screenX</Head1>
<Body>
Returns the horizontal coordinate of the event within the screen as a whole..</Body>
<Head3>
Syntax</Head3>
<Code>
xCoord = event.screenX</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
xCoord</Code>
is the offset from the left side of the screen in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function checkClickMap(e) {</CellCode>
<CellCode>
if e.screenX &lt; 50</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
if 50 &lt;= e.screenX &lt; 100</CellCode>
<CellCode>
doYellowButton();</CellCode>
<CellCode>
if e.screenX &gt;= 100</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When you trap events on the window, document, or other roomy elements, you can get the coordinates of that event (e.g., a click) and route it properly, as the Å‚ÄúclickMapÅ‚Äù example demonstrates.</Body>
<Head3>
Specification</Head3>
<Code>
screenX</Code>
<Body>
</Body>
<Head1>
screenY</Head1>
<Body>
Returns the vertical coordinate of the event within the screen as a whole..</Body>
<Head3>
Syntax</Head3>
<Code>
yCoord = event.screenY</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
yCoord</Code>
is the offset from the top of the screen in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function checkClickMap(e) {</CellCode>
<CellCode>
if e.screenY &lt; 50</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
if 50 &lt;= e.screenY &lt; 100</CellCode>
<CellCode>
doYellowButton();</CellCode>
<CellCode>
if e.screenY &gt;= 100</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When you trap events on the window, document, or other roomy elements, you can get the coordinates of that event (e.g., a click) and route it properly, as the Å‚ÄúclickMapÅ‚Äù example demonstrates.</Body>
<Head3>
Specification</Head3>
<Code>
screenY</Code>
<Body>
</Body>
<Head1>
shiftKey</Head1>
<Body>
Returns a boolean indicating whether the <Code>
&lt;shift&gt;</Code>
key was pressed when the event was fired.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.shiftKey</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean true | false.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goInput(e) { // checks shiftKey and</CellCode>
<CellCode>
if e.shiftKey       // passes event along</CellCode>
<CellCode>
superSizeOutput(e);</CellCode>
<CellCode>
else</CellCode>
<CellCode>
doOutput(e)</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
shiftKey</Code>
<Body>
</Body>
<Head1>
target</Head1>
<Body>
Returns a reference to the <Code>
target</Code>
to which the event was originally dispatched.</Body>
<Head3>
Syntax</Head3>
<Code>
targ = event.target</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
targ</Code>
is a reference to an <Code>
EventTarget</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
d = document.getElementById(Å‚Äúd1Å‚Äù); </CellCode>
<CellCode>
if e.target != d</CellCode>
<CellCode>
resetGame(); // not my event!</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
target</Code>
<Body>
</Body>
<Head1>
timeStamp</Head1>
<Body>
Returns the time (in milliseconds since the epoch) that the event was created.</Body>
<Head3>
Syntax</Head3>
<Code>
time = event.timeStamp</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
time</Code>
is a number.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property only works if the event system supports it for the particular event.</Body>
<Head3>
Specification</Head3>
<Code>
timestamp</Code>
<Body>
</Body>
<Head1>
type</Head1>
<Body>
Returns the name of the event (case-insensitive).</Body>
<Head3>
Syntax</Head3>
<Code>
type = event.type</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
type</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The type must be an XML name..</Body>
<Head3>
Specification</Head3>
<Code>
type</Code>
<Body>
</Body>
<Head1>
view</Head1>
<Body>
The view attribute identifies the <Code>
AbstractView</Code>
from which the event was generated.</Body>
<Head3>
Syntax</Head3>
<Code>
aView = event.view</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
aView</Code>
is a reference to an <Code>
AbstractView</Code>
object.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
view</Code>
<Body>
</Body>
<Head1>
initEvent</Head1>
<Body>
The <Code>
initEvent</Code>
method is used to initialize the value of an Event created through the <Code>
DocumentEvent</Code>
interface.</Body>
<Head3>
Syntax</Head3>
<Code>
event.initKeyEvent(type, bubbles, cancelable)</Code>
<Head3>
Parameters</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
type</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The type of event</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
bubbles</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
A boolean indicating whether the event should bubble up through the event chain or not (see <Bold>
bubbles</Bold>
).</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
cancelable</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
A boolean indicating whether the event can be canceled (<Bold>
cancelable</Bold>
).</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// create a click event that bubbles up and </CellCode>
<CellCode>
// cannot be canceled</CellCode>
<CellCode>
event.initEvent(Å‚ÄúclickÅ‚Äù, 1, 0)</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Events initialized in this way must have been created with the <Code>
DocumentEvent</Code>
interface method <Code>
createEvent()</Code>
. This method must be called to set the event before it is dispatched.</Body>
<Head3>
Specification</Head3>
<Code>
initEvent</Code>
<Body>
</Body>
<Head1>
initMouseEvent</Head1>
<Body>
This method intializes the value of a mouse event once itÅ‚Äôs been created (by the <Code>
createEvent()</Code>
method on the <Code>
DocumentEvent</Code>
interface).</Body>
<Head3>
Syntax</Head3>
<Code>
event.initMouseEvent(String typeArg, </Code>
<Code>
boolean canBubbleArg,</Code>
<Code>
boolean cancelableArg,</Code>
<Code>
AbstractView viewArg,</Code>
<Code>
int detailArg,</Code>
<Code>
int screenXArg,</Code>
<Code>
int screenYArg,</Code>
<Code>
int clientXArg,</Code>
<Code>
int clientYArg,</Code>
<Code>
boolean ctrlKeyArg,</Code>
<Code>
boolean altKeyArg,</Code>
<Code>
boolean shiftKeyArg,</Code>
<Code>
boolean metaKeyArg,</Code>
<Code>
short buttonArg,</Code>
<Code>
EventTarget relatedTargetArg) </Code>
<Head3>
Parameters</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
typeArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the event type.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
canBubbleArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - whether or not the event can bubble.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
cancelableArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - whether or not the event's default action can be prevented.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
viewArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's AbstractView.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
detailArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's mouse click count.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
screenX</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
ArgSpecifies - the Event's screen x coordinate</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
screenYArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's screen y coordinate</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
clientXArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's client x coordinate</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
clientYArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's client y coordinate</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
ctrlKeyArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - whether or not control key was depressed during the Event.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
altKeyArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - whether or not alt key was depressed during the Event.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
shiftKeyArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - whether or not shift key was depressed during the Event.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
metaKeyArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - whether or not meta key was depressed during the Event.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
buttonArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's mouse button.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<Code>
relatedTargetArg</Code>
</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's related EventTarget.</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
e.initMouseEvent(Å‚ÄúclickÅ‚Äù, 1, 1, 
window, 1,</CellCode>
<CellCode>
10, 50, 10, 50, </CellCode>
<CellCode>
0, 0, 0, 0, </CellCode>
<CellCode>
1, div1)</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
initMouseEvent</Code>
<Body>
</Body>
<Head1>
initUIEvent</Head1>
<Body>
Initializes a UI event once itÅ‚Äôs been created.</Body>
<Head3>
Syntax</Head3>
<Code>
event.initUIEvent(type, canBubble, view, detail)</Code>
<Head3>
Parameters</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
type</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The type of event</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
canBubble</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
A boolean indicating whether the event should bubble up through the event chain or not (see <Bold>
bubbles</Bold>
).</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
view</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The AbstractView associated with the event.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
detail</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Number indicating how many times the mouse has been clicked on a given screen location (usually 1).</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
e = document.createEvent( // fill // );</CellCode>
<CellCode>
e.initUIEvent(</CellCode>
<CellCode>
clickÅ‚Äù</CellCode>
<CellCode>
0,</CellCode>
<CellCode>
window</CellCode>
<CellCode>
1</CellCode>
<CellCode>
)</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
initUIEvent</Code>
<Body>
</Body>
<Head1>
preventDefault</Head1>
<Body>
Cancels the event (if it is cancelable).</Body>
<Head3>
Syntax</Head3>
<Code>
event.preventDefault()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if e.cancelable // may as well check.</CellCode>
<CellCode>
e.preventDefault();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
In this case, default is the default action performed when the event is handled. Calling preventDefault cancels this action.</Body>
<Head3>
Specification</Head3>
<Code>
preventDefault</Code>
<Body>
</Body>
<Head1>
stopPropagation</Head1>
<Body>
Prevents further propagation of the current event.</Body>
<Head3>
Syntax</Head3>
<Code>
event.stopPropagation()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
e.stopPropagation();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See <Bold>
Example 5: Event Propagation</Bold>
in the Examples chapter for a more detailed example of this method and event propagation in the DOM.</Body>
<Head3>
Specification</Head3>
<Code>
stopPropagation</Code>
<Body>
</Body>
<Body>
</Body>
<Heading1>
DOM Event Handler List</Heading1>
<Body>
The following is a complete list of the event handlers supported in the Gecko DOM. Note that not all elements support the full list. See the <Bold>
DOM Element Reference</Bold>
for the event handlers that are common to all elements.</Body>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellHeadingCtr>
Event Handler</CellHeadingCtr>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellHeadingCtr>
Event</CellHeadingCtr>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onmousedown</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
mouse button is pressed down.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onmouseup</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
mouse button is released.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onclick</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
event raised when mouse is clicked.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ondblclick</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
mouse is double-clicked.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onmouseover</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
mouse cursor moves over the target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onmouseout</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
mouse cursor leaves target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onmousemove</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
mouse cursor moves.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
oncontextmenu</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
context menu is created.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onkeydown</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a key has been pressed.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onkeyup</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a key has been released.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onkeypress</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a key has been pressed.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onfocus</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
focus has been set on the target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onblur</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
focus has moved away from the target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onload</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
the element/window has loaded.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onunload</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
the element/window has been unloaded.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onabort</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
the action has been aborted.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onerror</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
there has been an error.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onsubmit</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a form has been submitted.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onreset</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a form has been reset.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onchange</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a value in a form has been changed.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onselect</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
an element has been selected.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
oninput</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onpaint</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ontext</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onpopupShowing</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onpopupShown</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onpopupHiding</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onpopupHidden</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onclose</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
the window/frame has been closed.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
oncommand</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
the target element has been activated (e.g., clicked, selected, etc.)</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onbroadcast</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
oncommandupdate</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ondragenter</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ondragover</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
an item has been dragged over the event target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ondragexit</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ondragdrop</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
an item has been dropped onto the event target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ondraggesture</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onresize</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Element/window has been resized.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onscroll</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Window/frame has been scrolled</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
overflow</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
text in window/frame overflows available space.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onunderflow</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onoverflowchanged</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onsubtreemodified</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a subtree of the current document has been modified in some way.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onnodeinserted</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a node has been inserted into the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onnoderemoved</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a node has been removed from the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onnoderemovedfromdocument</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a node has been removed from the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onnodeinsertedintodocument</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a new node has been inserted into the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onattrmodified</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a DOM attribute has been modified.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
oncharacterdatamodified</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Character data has been modified.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Body>
</Body>
</chapter>
