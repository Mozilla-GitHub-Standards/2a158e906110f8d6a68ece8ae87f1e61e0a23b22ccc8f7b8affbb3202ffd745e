<chapter>
<title>Preface</title>
<Heading2>
About This Reference</Heading2>
<Body>
This section describes the guide itself: who it's for, how the information is presented, and how you can use the examples in the reference in your own DOM development.</Body>
<Body>
Note that this document is under development, and is not currently a comprehensive listing of the DOM methods and properties implemented for Gecko. Each individual section of the document (e.g., the <Bold>
DOM Document Reference</Bold>
) is complete for the object(s) it describes, however. As reference information for the various members of the huge APIs becomes available, it is integrated into this document here.</Body>
<Heading2>
Who Should Read This Guide</Heading2>
<Body>
The reader of the Gecko DOM Reference is a web developer or savvy web user who knows something about how web pages are constructed. This reference avoids making presumptions about the reader's acquaintance with the DOM, with XML, with web servers or web standards, and even with JavaScript, the language in which the DOM is made accessible to the reader. But the document does presume familiarity with HTML, with markup, with the basic strucure of web pages, with web browsers, and with stylesheets.</Body>
<Body>
In its introductory material, many examples, and high-level explanations, the document is a "beginners" web development guide. In general, however, the API reference should be valuable for inexperienced and experienced web developers alike.</Body>
<Heading2>
What is Gecko?</Heading2>
<Body>
Netscape 6.1, Mozilla, and other Mozilla-based browsers have identical implementations of the DOM. This is so because they use the same technology.</Body>
<Body>
Gecko, the software component in these browsers that handles the parsing of the HTML, the layout of the pages, the document object model, and even the rendering of the entire application interface, is a fast, standards-compliant rendering engine that implements the W3C DOM standards and the DOM-like (but not standardized) browser object model (i.e., <Code>
window</Code>
et al) in the context of web pages and the application interface, or chrome, of the browser. </Body>
<Body>
Though the application interface and the content displayed by the browser are different in many practical ways, the DOM exposes them uniformly as a hierarchy of nodes. The tree structure of the DOM (which in its application to the user</Body>
<Heading2>
API Syntax</Heading2>
<Body>
Each description in the API reference includes the syntax, the input and output parameters (where the return type of the return type is given), an example, any additional notes, and a link to the appropriate specification. </Body>
<Body>
Typically, read-only properties have a single line of syntax because those properties can only be gotten and not set. For example, the read-only property <Code>
availHeight</Code>
of the <Code>
document</Code>
object includes the following syntax information:</Body>
<DIV>
<IMAGE xml:link="simple" href="dom_book-1.gif" show="embed" actuate="auto"/>
</DIV>
<Body>
This means that you can only use the property on the right hand of the statement; whereas with read/write properties, you can assign to the property, as the following syntax example illustrates:</Body>
<DIV>
<IMAGE xml:link="simple" href="dom_book-2.gif" show="embed" actuate="auto"/>
</DIV>
<Body>
In general, the object whose member is being described is given in the syntax statement with a simple type, e.g, <Code>
element</Code>
for all elements, <Code>
document</Code>
for the top-level document object, table for the <Code>
TABLE</Code>
object, etc. (see <Bold>
Important Data Types</Bold>
for more information about data types).</Body>
<Heading2>
Using the Examples</Heading2>
<Body>
Many of the examples in this reference are complete files that you can execute by cutting and pasting into a new file and then opening in your web browser. Others are snippets. You can run these latter by placing them within JavaScript callback functions. For example, the example for the <Bold>
window.document</Bold>
property can be tested or within a function like the following, which is called by the accompanying button:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;html&gt;</Code>
<Code>
&lt;script&gt;</Code>
<CellCode>
function testWinDoc() {</CellCode>
<CellCode>
doc= window.document;</CellCode>
<CellCode>
alert(doc.title);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<Code>
&lt;button onclick="testWinDoc();"&gt;
test document property&lt;/button&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Body>
Similar functions and pages can be devised for all the object members that are not already packaged up for use. See the <Bold>
Testing the DOM API</Bold>
section in the introduction for a "test harness" that you can use to test a number of APIs all at once.</Body>
</chapter>
