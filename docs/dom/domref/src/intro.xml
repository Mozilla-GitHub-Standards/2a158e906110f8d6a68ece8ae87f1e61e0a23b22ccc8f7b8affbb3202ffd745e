<chapter>
<title>Introduction to the DOM</title>

<Body>
This section provides a brief conceptual introduction to the DOM: what it is, how it provides structure for HTML and XML documents, how you can access it, and how this API presents the reference information and examples.</Body>
<Heading1>
What is the DOM?</Heading1>
<Body>
The Document Object Model is an API for HTML and XML documents. It does two things for web developers: it provides a structural representation of the document, and it defines the way that that structure is to be accessed from script, allowing you to get at the web page as a structured group of nodes, which we will discuss shortly. Essentially, it connects web pages to scripts or programming languages.</Body>
<Body>
Note that the DOM is not a particular application, product, or proprietary ordering of web pages. Rather, it is an API, an interface that vendors must implement if they are to be conformant with the W3C DOM standard. Every browser vendor that supports the DOM, just to take one small example, must return all the <Code>
&lt;P&gt;</Code>
elements in an HTML web page as an array of nodes when the <Code>
getElementsByTagName</Code>
method is called against that web page in a script:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
paragraphs = document.getElementsByTagName("P");</Code>
<Code>
// paragraphs[0] is the first &lt;p&gt; element</Code>
<Code>
// paragraphs[1] is the second &lt;p&gt; element, etc.</Code>
<Code>
alert(paragraphs[0].nodeName);</Code>
</CELL>
</ROW>
</TABLE>
<Body>
All of the properties, methods, and events available to the web developer for manipulating and creating web pages are organized into objects (e.g., the <Code>
document</Code>
object that represents the document itself, the <Code>
table</Code>
object that implements that special <Code>
HTMLTableElement</Code>
DOM interface for accessing HTML tables, and so forth). This documentation provides an object-by-object reference to those APIs.</Body>
<Heading1>
DOM vs. JavaScript</Heading1>
<Body>
The short example above, like all of the examples in this reference, is JavaScript. That is to say, it's written in JavaScript, but it uses the DOM to access the web page and its elements. The DOM is not a programming language, but without it, the JavaScript language wouldn't have any model or notion of the web pages, XML pages, and elements with which it is usually concerned. Every element in a document--the document as a whole, the head, tables within the document, table headers, text within the table cells--is part of the document object model for that document, so they can all be accessed and manipulated using the DOM and a scripting language like JavaScript.</Body>
<Body>
The DOM was designed to be independent of any particular programming language, making the structural representation of the document available from a single, consistent API. Though we focus exclusively on JavaScript in this reference documentation, implementations of the DOM can be built for any language, as this Python example demonstrates:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
# Python DOM example</Code>
<Code>
import xml.dom.minidom as m</Code>
<Code>
doc = m.parse("C:\\Projects\\Py\\chap1.xml");</Code>
<Code>
doc.nodeName # DOM property of document object;</Code>
<Code>
p_list = doc.getElementsByTagName("para");</Code>
</CELL>
</ROW>
</TABLE>
<Heading1>
How Do I Access the DOM?</Heading1>
<Body>
You don't have to do anything special to begin using the DOM. Different browsers have different implementations of the DOM, and these implementations exhibit varying degrees of conformance to the actual DOM standard (a subject we try to avoid in this documentation), but every web browser uses some document object model to make web pages accessible to script.</Body>
<Body>
When you create a script--whether it's in-line in a <Code>
&lt;SCRIPT&gt;</Code>
element or included in the web page by means of a script loading instruction--you can immediately begin using the API for the <Code>
document</Code>
or <Code>
window</Code>
elements to manipulate the document itself or to get at the children of that document, which are the various elements in the web page. Your DOM programming may be something as simple as the following, which displays an alert message by using the <Code>
alert()</Code>
function from the <Code>
window</Code>
object, or it may use more sophisticated DOM methods to actually create new content, as in the longer example below.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;body 
onload="window.alert('welcome to my home page!');"&gt;</Code>
</CELL>
</ROW>
</TABLE>
<Body>
Aside from the <Code>
&lt;script&gt;</Code>
element in which the JavaScript is defined, this JavaScript creates a new H1 element, adds text to that element, and then adds the <Code>
H1</Code>
to the tree for this document:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;html&gt;</Code>
<Code>
&lt;script&gt;</Code>
<Code>
// create a couple of elements </Code>
<Code>
// in an otherwise empty HTML page</Code>
<Code>
heading = document.createElement("H1");</Code>
<Code>
heading_text = document.createTextNode("Big Head!");</Code>
<Code>
heading.appendChild(heading_text);</Code>
<Code>
document.body.appendChild(heading);</Code>
<Code>
</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/html&gt;</Code>
</CELL>
</ROW>
</TABLE>
<Heading1>
Important Data Types</Heading1>
<Body>
This reference tries to describe the various objects and types in as simple a way as possible. But there are a number of different data types being passed around the API that you should be aware of. For the sake of simplicity, syntax examples in this API reference typically refer to <Code>
nodes</Code>
as elements, to arrays of nodes as <Code>
nodeLists</Code>
(or simply <Code>
elements</Code>
), and to <Code>
attribute</Code>
nodes simply as attributes.</Body>
<Body>
The following table briefly describes these data types.</Body>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
document</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
When a member returns an object of type <Code>
document</Code>
(e.g., the ownerDocument property of an element returns the <Code>
document</Code>
to which it belongs), this object is the root <Code>
document</Code>
object itself. The <Bold>
DOM Document Reference</Bold>
chapter describes the <Code>
document</Code>
object.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
element</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
element</Code>
refers to an element or a node of type <Code>
element</Code>
returned by a member of the DOM API. Rather than saying, for example, that the <Code>
document.createElement()</Code>
method returns an object reference to a <Code>
node</Code>
, we just say that this method returns the <Code>
element</Code>
that has just been created in the DOM. </CellBody>
<CellBody>
</CellBody>
<CellBody>
<Code>
element</Code>
objects implement the DOM <Code>
Element</Code>
interface and also the more basic <Code>
Node</Code>
interface, both of which are included together in this reference.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
nodeList</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
A <Code>
nodeList</Code>
is an array of elements, like the kind that is returned by the method <Code>
document.getElementsByTagName()</Code>
. Items in a <Code>
nodeList</Code>
are accessed by index in either of two ways: </Body>
<CellListBulletList>
<CellListBullet>
list.item(1) </CellListBullet>
<CellListBullet>
list[1]</CellListBullet>
</CellListBulletList>
<Body>
These two are equivalent. In the first, <Bold>
item()</Bold>
is the single method on the <Code>
nodeList</Code>
object. The latter uses the typical array syntax to fetch the second item in the list.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
attribute</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
When an <Code>
attribute</Code>
is returned by a member (e.g., by the createAttribute() method), it is an object reference that exposes a special (albeit small) interface for attributes. Attributes are nodes in the DOM just like elements are, though you may rarely use them as such.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
NamedNodeMap</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
A <Code>
namedNodeMap</Code>
is like an array, but the items are accessed by name or index, though this latter case is merely a convenience for enumeration, as they are in no particular order in the list. A <Code>
NamedNodeMap</Code>
has an item() method for this purpose, and you can also add and remove items from a <Code>
NamedNodeMap</Code>
</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Heading1>
DOM Interfaces</Heading1>
<Body>
A stated purpose of this guide is to minimize talk about abstract interfaces, inheritance, and other nerdy implementation details, and to talk instead about the objects in the DOM, about the actual things you can use to manipulate the DOM hierarchy. From the point of view of the web programmer, it's often a matter of indifference that the object representing the <Code>
HTML FORM</Code>
element gets its name property from the <Code>
HTMLFormElement</Code>
interface but its className property from the <Code>
HTMLElement</Code>
interface proper. In both cases, the property you want is simply in the <Code>
form</Code>
object.</Body>
<Body>
But the relationship between objects and the interfaces that they implement in the DOM can be confusing, and so this section attempts to say a little something about the actual interfaces in the DOM specification and how they are made available.</Body>
<Head3>
Interfaces Versus Objects</Head3>
<Body>
In some cases, an object exposes a single interface. But more often than not, an object like <Code>
table</Code>
represents several different interfaces. The <Code>
table</Code>
object, for example, implements a specialized <Code>
HTMLTableElement</Code>
interface, which includes such methods as XXX and YYY. But since it's also an HTML element, <Code>
table</Code>
implements the <Code>
Element</Code>
interface described in the <Bold>
DOM Element Reference</Bold>
chapter. And finally, since an HTML element is also, as far as the DOM is concerned, a node in the tree of nodes that make up the object model for a web page or an XML page, the table element also implements the more basic <Code>
Node</Code>
interface, from which <Code>
Element</Code>
derives.</Body>
<Body>
When you get a reference to a <Code>
table</Code>
object, as in the following example, you routinely use all three of these interfaces interchangeably on the object, perhaps without knowing it.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table = document.getElementById("table");</Code>
<Code>
tats = table.attributes; // Node/Element interface</Code>
<Code>
for (var i = 0; i &lt; tats.length; i++) ) {</Code>
<Code>
if tats[i] == "border"</Code>
<Code>
table.setAttribute("border", "2px solid blue");</Code>
<Code>
// HTMLTableElement interface: summary attribute</Code>
<Code>
table.summary = "note: increased border";</Code>
<Code>
}</Code>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Core Interfaces in the DOM</Head3>
<Body>
This section lists some of the mostly commonly-used interfaces in the DOM. The idea is not to describe what these APIs do here but to give you an idea of the sorts of methods and properties you will see very often as you use the DOM. These common APIs are used in the longer examples in the <Bold>
DOM Examples</Bold>
chapter at the end of this book.</Body>
<Body>
<Code>
document</Code>
and <Code>
window</Code>
objects are the objects whose interfaces you generally use most often in DOM programming. In simple terms, the <Code>
window</Code>
object represents something like the browser, and the <Code>
document</Code>
object is the root of the document itself. <Code>
Element</Code>
inherits from the generic <Code>
Node</Code>
interface, and together these two interfaces provide many of the methods and properties you use on individual elements. These elements may also have specific interfaces for dealing with the kind of data those elements hold, as in the <Code>
table</Code>
object example in the previous section.</Body>
<Body>
The following is a brief list of common APIs in web and XML page scripting using the DOM.</Body>
<Body>
</Body>
<BulletedList>
<Bulleted>
<Code>
document.<Bold>
getElementById</Bold>
<Code>
</Code>
(id)</Code>
</Bulleted>
<Bulleted>
<Code>
document.<Bold>
getElementsByTagName</Bold>
<Code>
</Code>
(name)</Code>
</Bulleted>
<Bulleted>
<Code>
document.<Bold>
createElement</Bold>
<Code>
</Code>
(name)</Code>
</Bulleted>
<Bulleted>
<Code>
parentNode.<Bold>
appendChild</Bold>
<Code>
</Code>
(node)</Code>
</Bulleted>
<Bulleted>
element.<Bold>
innerHTML</Bold>
</Bulleted>
<Bulleted>
<Code>
element.<Bold>
style</Bold>
<Code>
</Code>
.left</Code>
</Bulleted>
<Bulleted>
<Code>
element.<Bold>
setAttribute</Bold>
<Code>
</Code>
</Code>
</Bulleted>
<Bulleted>
<Code>
element.<Bold>
getAttribute</Bold>
<Code>
</Code>
</Code>
</Bulleted>
<Bulleted>
<Code>
element.<Bold>
addEventListener</Bold>
<Code>
</Code>
</Code>
</Bulleted>
<Bulleted>
<Bold>
window._content</Bold>
</Bulleted>
<Bulleted>
<Bold>
window.onload</Bold>
</Bulleted>
<Bulleted>
<Bold>
window.dump()</Bold>
</Bulleted>
<Bulleted>
<Bold>
window.scrollTo()</Bold>
</Bulleted>
</BulletedList>
<Heading1>
Testing the DOM API</Heading1>
<Body>
This document provides samples for every interface that you can use in your own web development. In some cases, the samples are complete HTML pages, with the DOM access in a &lt;script&gt; element, the interface (e.g, buttons) necessary to fire up the script in a form, and the HTML elements upon which the DOM operates listed as well. When this is the case, you can cut and paste the example into a new HTML document, save it, and run the example from the browser.</Body>
<Body>
There are some cases, however, when the examples are more concise. To run examples that only demonstrate the basic relatioship of the interface to the HTML elements, you may want to set up a test page in which interfaces can be easily accessed from scripts. The following very simple web page provides a &lt;script&gt; element in the header in which you can place functions that test the interface, a few HTML elements with attributes that you can retrieve, set, or otherwise manipulate, and the web user interface necessary to call those functions from the browser.</Body>
<Body>
You can use this test page or create a similar one to test the DOM interfaces you are interested in and see how they work on the browser platform. You can update the contents of the<Code>
test()</Code>
function as needed, create more buttons, or add elements as necessary.</Body>
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;title&gt;DOM Tests&lt;/title&gt;</Code>
<Code>
&lt;script type=&quot;application/x-javascript&quot;&gt;</Code>
<Code>
function setBodyAttr(attr,value){</Code>
<Code>
if(document.body) eval('document.body.'+attr+'=&quot;'+value+'&quot;');</Code>
<Code>
else notSupported();</Code>
<Code>
}</Code>
<Code>
</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
&lt;body&gt;</Code>
<Code>
&lt;div style=&quot;margin: .5in; height=&quot;400&quot;&quot;&gt;</Code>
<Code>
&lt;p&gt;&lt;b&gt;&lt;tt&gt;text&lt;/tt&gt; color&lt;/p&gt;</Code>
<Code>
&lt;form&gt;</Code>
<Code>
&lt;select onChange=&quot;setBodyAttr('text',
this.options[this.selectedIndex].value);&quot;&gt;</Code>
<Code>
&lt;option value=&quot;black&quot;&gt;black</Code>
<Code>
&lt;option value=&quot;darkblue&quot;&gt;darkblue</Code>
<Code>
&lt;/select&gt;</Code>
<Code>
</Code>
<Code>
&lt;p&gt;&lt;b&gt;&lt;tt&gt;bgColor&lt;/tt&gt;&lt;/p&gt;</Code>
<Code>
&lt;select onChange=&quot;setBodyAttr('bgColor',
this.options[this.selectedIndex].value);&quot;&gt;</Code>
<Code>
&lt;option value=&quot;white&quot;&gt;white</Code>
<Code>
&lt;option value=&quot;lightgrey&quot;&gt;gray</Code>
<Code>
&lt;/select&gt;</Code>
<Code>
</Code>
<Code>
&lt;p&gt;&lt;b&gt;&lt;tt&gt;link&lt;/tt&gt;&lt;/p&gt;</Code>
<Code>
&lt;select onChange=&quot;setBodyAttr('link',
this.options[this.selectedIndex].value);&quot;&gt;</Code>
<Code>
&lt;option value=&quot;blue&quot;&gt;blue</Code>
<Code>
&lt;option value=&quot;green&quot;&gt;green</Code>
<Code>
&lt;/select&gt;&amp;nbsp;&amp;nbsp;&lt;small&gt;
&lt;a href=&quot;http://www.brownhen.com/dom_api_top.html&quot; id=&quot;sample&quot;&gt;
(sample link)&lt;/a&gt;&lt;/small&gt;&lt;br&gt;</Code>
<Code>
</Code>
<Code>
&lt;/form&gt;</Code>
<Code>
&lt;form&gt;</Code>
<Code>
&lt;input type=&quot;button&quot; value=&quot;version&quot; onclick=&quot;ver()&quot; /&gt;</Code>
<Code>
&lt;/form&gt;</Code>
<Code>
&lt;/div&gt;</Code>
<Code>
&lt;/body&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<Body>
To test a lot of interfaces in a single page--for example, a "suite" of properties that affect the colors of a web page--you can create a similar test page with a whole console of buttons, textfields, and other HTML elements. The following screenshot gives you some idea of how interfaces can be grouped together for testing.</Body>
<Body>
</Body>
<DIV>
<IMAGE xml:link="simple" href="test_page.gif" show="embed" actuate="auto"/>
</DIV>
<Figure>
Sample DOM Test Page</Figure>
<Body>
In this example, the dropdown menus dynamically update such DOM-accessible aspects of the web page as its background color (<Code>
bgColor</Code>
), the color of the hyperlinks (<Code>
aLink</Code>
), and color of the text (<Code>
text</Code>
). However you design your test pages, testing the interfaces as you read about them is an important part of learning how to use the DOM effectively.</Body>
</chapter>