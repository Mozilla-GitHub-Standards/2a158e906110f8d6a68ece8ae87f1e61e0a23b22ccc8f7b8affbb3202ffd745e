<?xml version="1.0" encoding="UTF-8"?>

<chapter>
<title>Preface</title>
<Heading2>
About This Reference</Heading2>
<Body>
This section describes the guide itself: who it’s for, how the information is presented, and how you can use the examples in the reference in your own DOM development.</Body>
<Body>
Note that this document is under development, and is not currently a comprehensive listing of the DOM methods and properties implemented for Gecko. Each individual section of the document (e.g., the <Bold>
DOM Document Reference</Bold>
) is complete for the object(s) it describes, however. As reference information for the various members of the huge APIs becomes available, it is integrated into this document here.</Body>
<Heading2>
Who Should Read This Guide</Heading2>
<Body>
The reader of the Gecko DOM Reference is a web developer or savvy web user who knows something about how web pages are constructed. This reference avoids making presumptions about the reader's acquaintance with the DOM, with XML, with web servers or web standards, and even with JavaScript, the language in which the DOM is made accessible to the reader. But the document does presume familiarity with HTML, with markup, with the basic strucure of web pages, with web browsers, and with stylesheets.</Body>
<Body>
In its introductory material, many examples, and high-level explanations, the document is a “beginners” web development guide. In general, however, the API reference should be valuable for inexperienced and experienced web developers alike.</Body>
<Heading2>
What is Gecko?</Heading2>
<Body>
Netscape 6.1, Mozilla, and other Mozilla-based browsers have identical implementations of the DOM. This is so because they use the same technology.</Body>
<Body>
Gecko, the software component in these browsers that handles the parsing of the HTML, the layout of the pages, the document object model, and even the rendering of the entire application interface, is a fast, standards-compliant rendering engine that implements the W3C DOM standards and the DOM-like (but not standardized) browser object model (i.e., <Code>
window</Code>
et al) in the context of web pages and the application interface, or chrome, of the browser. </Body>
<Body>
Though the application interface and the content displayed by the browser are different in many practical ways, the DOM exposes them uniformly as a hierarchy of nodes. The tree structure of the DOM (which in its application to the user</Body>
<Heading2>
API Syntax</Heading2>
<Body>
Each description in the API reference includes the syntax, the input and output parameters (where the return type of the return type is given), an example, any additional notes, and a link to the appropriate specification. </Body>
<Body>
Typically, read-only properties have a single line of syntax because those properties can only be gotten and not set. For example, the read-only property <Code>
availHeight</Code>
of the <Code>
document</Code>
object includes the following syntax information:</Body>
<DIV>
<IMAGE xml:link="simple" href="dom_book-1.gif" show="embed" actuate="auto"/>
</DIV>
<Body>
This means that you can only use the property on the right hand of the statement; whereas with read/write properties, you can assign to the property, as the following syntax example illustrates:</Body>
<DIV>
<IMAGE xml:link="simple" href="dom_book-2.gif" show="embed" actuate="auto"/>
</DIV>
<Body>
In general, the object whose member is being described is given in the syntax statement with a simple type, e.g, <Code>
element</Code>
for all elements, <Code>
document</Code>
for the top-level document object, table for the <Code>
TABLE</Code>
object, etc. (see <Bold>
Important Data Types</Bold>
for more information about data types).</Body>
<Heading2>
Using the Examples</Heading2>
<Body>
Many of the examples in this reference are complete files that you can execute by cutting and pasting into a new file and then opening in your web browser. Others are snippets. You can run these latter by placing them within JavaScript callback functions. For example, the example for the <Bold>
window.document</Bold>
property can be tested or within a function like the following, which is called by the accompanying button:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;html&gt;</Code>
<Code>
&lt;script&gt;</Code>
<CellCode>
function testWinDoc() {</CellCode>
<CellCode>
doc= window.document;</CellCode>
<CellCode>
alert(doc.title);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<Code>
&lt;button onclick=”testWinDoc();”&gt;
test document property&lt;/button&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Body>
Similar functions and pages can be devised for all the object members that are not already packaged up for use. See the <Bold>
Testing the DOM API</Bold>
section in the introduction for a “test harness” that you can use to test a number of APIs all at once.</Body>
</chapter>

<chapter>
<title>Introduction to the DOM</title>

<Body>
This section provides a brief conceptual introduction to the DOM: what it is, how it provides structure for HTML and XML documents, how you can access it, and how this API presents the reference information and examples.</Body>
<Heading1>
What is the DOM?</Heading1>
<Body>
The Document Object Model is an API for HTML and XML documents. It does two things for web developers: it provides a structural representation of the document, and it defines the way that that structure is to be accessed from script, allowing you to get at the web page as a structured group of nodes, which we will discuss shortly. Essentially, it connects web pages to scripts or programming languages.</Body>
<Body>
Note that the DOM is not a particular application, product, or proprietary ordering of web pages. Rather, it is an API, an interface that vendors must implement if they are to be conformant with the W3C DOM standard. Every browser vendor that supports the DOM, just to take one small example, must return all the <Code>
&lt;P&gt;</Code>
elements in an HTML web page as an array of nodes when the <Code>
getElementsByTagName</Code>
method is called against that web page in a script:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
paragraphs = document.getElementsByTagName(“P”);</Code>
<Code>
// paragraphs[0] is the first &lt;p&gt; element</Code>
<Code>
// paragraphs[1] is the second &lt;p&gt; element, etc.</Code>
<Code>
alert(paragraphs[0].nodeName);</Code>
</CELL>
</ROW>
</TABLE>
<Body>
All of the properties, methods, and events available to the web developer for manipulating and creating web pages are organized into objects (e.g., the <Code>
document</Code>
object that represents the document itself, the <Code>
table</Code>
object that implements that special <Code>
HTMLTableElement</Code>
DOM interface for accessing HTML tables, and so forth). This documentation provides an object-by-object reference to those APIs.</Body>
<Heading1>
DOM vs. JavaScript</Heading1>
<Body>
The short example above, like all of the examples in this reference, is JavaScript. That is to say, it’s written in JavaScript, but it uses the DOM to access the web page and its elements. The DOM is not a programming language, but without it, the JavaScript language wouldn’t have any model or notion of the web pages, XML pages, and elements with which it is usually concerned. Every element in a document--the document as a whole, the head, tables within the document, table headers, text within the table cells--is part of the document object model for that document, so they can all be accessed and manipulated using the DOM and a scripting language like JavaScript.</Body>
<Body>
The DOM was designed to be independent of any particular programming language, making the structural representation of the document available from a single, consistent API. Though we focus exclusively on JavaScript in this reference documentation, implementations of the DOM can be built for any language, as this Python example demonstrates:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
# Python DOM example</Code>
<Code>
import xml.dom.minidom as m</Code>
<Code>
doc = m.parse(“C:\\Projects\\Py\\chap1.xml”);</Code>
<Code>
doc.nodeName # DOM property of document object;</Code>
<Code>
p_list = doc.getElementsByTagName(“para”);</Code>
</CELL>
</ROW>
</TABLE>
<Heading1>
How Do I Access the DOM?</Heading1>
<Body>
You don’t have to do anything special to begin using the DOM. Different browsers have different implementations of the DOM, and these implementations exhibit varying degrees of conformance to the actual DOM standard (a subject we try to avoid in this documentation), but every web browser uses some document object model to make web pages accessible to script.</Body>
<Body>
When you create a script--whether it’s in-line in a <Code>
&lt;SCRIPT&gt;</Code>
element or included in the web page by means of a script loading instruction--you can immediately begin using the API for the <Code>
document</Code>
or <Code>
window</Code>
elements to manipulate the document itself or to get at the children of that document, which are the various elements in the web page. Your DOM programming may be something as simple as the following, which displays an alert message by using the <Code>
alert()</Code>
function from the <Code>
window</Code>
object, or it may use more sophisticated DOM methods to actually create new content, as in the longer example below.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;body 
onload=”window.alert(‘welcome to my home page!’);”&gt;</Code>
</CELL>
</ROW>
</TABLE>
<Body>
Aside from the <Code>
&lt;script&gt;</Code>
element in which the JavaScript is defined, this JavaScript creates a new H1 element, adds text to that element, and then adds the <Code>
H1</Code>
to the tree for this document:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;html&gt;</Code>
<Code>
&lt;script&gt;</Code>
<Code>
// create a couple of elements </Code>
<Code>
// in an otherwise empty HTML page</Code>
<Code>
heading = document.createElement(“H1”);</Code>
<Code>
heading_text = document.createTextNode(“Big Head!”);</Code>
<Code>
heading.appendChild(heading_text);</Code>
<Code>
document.body.appendChild(heading);</Code>
<Code>
</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/html&gt;</Code>
</CELL>
</ROW>
</TABLE>
<Heading1>
Important Data Types</Heading1>
<Body>
This reference tries to describe the various objects and types in as simple a way as possible. But there are a number of different data types being passed around the API that you should be aware of. For the sake of simplicity, syntax examples in this API reference typically refer to <Code>
nodes</Code>
as elements, to arrays of nodes as <Code>
nodeLists</Code>
(or simply <Code>
elements</Code>
), and to <Code>
attribute</Code>
nodes simply as attributes.</Body>
<Body>
The following table briefly describes these data types.</Body>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
document</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
When a member returns an object of type <Code>
document</Code>
(e.g., the ownerDocument property of an element returns the <Code>
document</Code>
to which it belongs), this object is the root <Code>
document</Code>
object itself. The <Bold>
DOM Document Reference</Bold>
chapter describes the <Code>
document</Code>
object.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
element</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
element</Code>
refers to an element or a node of type <Code>
element</Code>
returned by a member of the DOM API. Rather than saying, for example, that the <Code>
document.createElement()</Code>
method returns an object reference to a <Code>
node</Code>
, we just say that this method returns the <Code>
element</Code>
that has just been created in the DOM. </CellBody>
<CellBody>
</CellBody>
<CellBody>
<Code>
element</Code>
objects implement the DOM <Code>
Element</Code>
interface and also the more basic <Code>
Node</Code>
interface, both of which are included together in this reference.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
nodeList</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
A <Code>
nodeList</Code>
is an array of elements, like the kind that is returned by the method <Code>
document.getElementsByTagName()</Code>
. Items in a <Code>
nodeList</Code>
are accessed by index in either of two ways: </Body>
<CellListBulletList>
<CellListBullet>
list.item(1) </CellListBullet>
<CellListBullet>
list[1]</CellListBullet>
</CellListBulletList>
<Body>
These two are equivalent. In the first, <Bold>
item()</Bold>
is the single method on the <Code>
nodeList</Code>
object. The latter uses the typical array syntax to fetch the second item in the list.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
attribute</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
When an <Code>
attribute</Code>
is returned by a member (e.g., by the createAttribute() method), it is an object reference that exposes a special (albeit small) interface for attributes. Attributes are nodes in the DOM just like elements are, though you may rarely use them as such.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
NamedNodeMap</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
A <Code>
namedNodeMap</Code>
is like an array, but the items are accessed by name or index, though this latter case is merely a convenience for enumeration, as they are in no particular order in the list. A <Code>
NamedNodeMap</Code>
has an item() method for this purpose, and you can also add and remove items from a <Code>
NamedNodeMap</Code>
</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Heading1>
DOM Interfaces</Heading1>
<Body>
A stated purpose of this guide is to minimize talk about abstract interfaces, inheritance, and other nerdy implementation details, and to talk instead about the objects in the DOM, about the actual things you can use to manipulate the DOM hierarchy. From the point of view of the web programmer, it’s often a matter of indifference that the object representing the <Code>
HTML FORM</Code>
element gets its name property from the <Code>
HTMLFormElement</Code>
interface but its className property from the <Code>
HTMLElement</Code>
interface proper. In both cases, the property you want is simply in the <Code>
form</Code>
object.</Body>
<Body>
But the relationship between objects and the interfaces that they implement in the DOM can be confusing, and so this section attempts to say a little something about the actual interfaces in the DOM specification and how they are made available.</Body>
<Head3>
Interfaces Versus Objects</Head3>
<Body>
In some cases, an object exposes a single interface. But more often than not, an object like <Code>
table</Code>
represents several different interfaces. The <Code>
table</Code>
object, for example, implements a specialized <Code>
HTMLTableElement</Code>
interface, which includes such methods as XXX and YYY. But since it’s also an HTML element, <Code>
table</Code>
implements the <Code>
Element</Code>
interface described in the <Bold>
DOM Element Reference</Bold>
chapter. And finally, since an HTML element is also, as far as the DOM is concerned, a node in the tree of nodes that make up the object model for a web page or an XML page, the table element also implements the more basic <Code>
Node</Code>
interface, from which <Code>
Element</Code>
derives.</Body>
<Body>
When you get a reference to a <Code>
table</Code>
object, as in the following example, you routinely use all three of these interfaces interchangeably on the object, perhaps without knowing it.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table = document.getElementById(“table”);</Code>
<Code>
tats = table.attributes; // Node/Element interface</Code>
<Code>
for (var i = 0; i &lt; tats.length; i++) ) {</Code>
<Code>
if tats[i] == “border”</Code>
<Code>
table.setAttribute(“border”, “2px solid blue”);</Code>
<Code>
// HTMLTableElement interface: summary attribute</Code>
<Code>
table.summary = “note: increased border”;</Code>
<Code>
}</Code>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Core Interfaces in the DOM</Head3>
<Body>
This section lists some of the mostly commonly-used interfaces in the DOM. The idea is not to describe what these APIs do here but to give you an idea of the sorts of methods and properties you will see very often as you use the DOM. These common APIs are used in the longer examples in the <Bold>
DOM Examples</Bold>
chapter at the end of this book.</Body>
<Body>
<Code>
document</Code>
and <Code>
window</Code>
objects are the objects whose interfaces you generally use most often in DOM programming. In simple terms, the <Code>
window</Code>
object represents something like the browser, and the <Code>
document</Code>
object is the root of the document itself. <Code>
Element</Code>
inherits from the generic <Code>
Node</Code>
interface, and together these two interfaces provide many of the methods and properties you use on individual elements. These elements may also have specific interfaces for dealing with the kind of data those elements hold, as in the <Code>
table</Code>
object example in the previous section.</Body>
<Body>
The following is a brief list of common APIs in web and XML page scripting using the DOM.</Body>
<Body>
</Body>
<BulletedList>
<Bulleted>
<Code>
document.<Bold>
getElementById</Bold>
<Code>
</Code>
(id)</Code>
</Bulleted>
<Bulleted>
<Code>
document.<Bold>
getElementsByTagName</Bold>
<Code>
</Code>
(name)</Code>
</Bulleted>
<Bulleted>
<Code>
document.<Bold>
createElement</Bold>
<Code>
</Code>
(name)</Code>
</Bulleted>
<Bulleted>
<Code>
parentNode.<Bold>
appendChild</Bold>
<Code>
</Code>
(node)</Code>
</Bulleted>
<Bulleted>
element.<Bold>
innerHTML</Bold>
</Bulleted>
<Bulleted>
<Code>
element.<Bold>
style</Bold>
<Code>
</Code>
.left</Code>
</Bulleted>
<Bulleted>
<Code>
element.<Bold>
setAttribute</Bold>
<Code>
</Code>
</Code>
</Bulleted>
<Bulleted>
<Code>
element.<Bold>
getAttribute</Bold>
<Code>
</Code>
</Code>
</Bulleted>
<Bulleted>
<Code>
element.<Bold>
addEventListener</Bold>
<Code>
</Code>
</Code>
</Bulleted>
<Bulleted>
<Bold>
window._content</Bold>
</Bulleted>
<Bulleted>
<Bold>
window.onload</Bold>
</Bulleted>
<Bulleted>
<Bold>
window.dump()</Bold>
</Bulleted>
<Bulleted>
<Bold>
window.scrollTo()</Bold>
</Bulleted>
</BulletedList>
<Heading1>
Testing the DOM API</Heading1>
<Body>
This document provides samples for every interface that you can use in your own web development. In some cases, the samples are complete HTML pages, with the DOM access in a &lt;script&gt; element, the interface (e.g, buttons) necessary to fire up the script in a form, and the HTML elements upon which the DOM operates listed as well. When this is the case, you can cut and paste the example into a new HTML document, save it, and run the example from the browser.</Body>
<Body>
There are some cases, however, when the examples are more concise. To run examples that only demonstrate the basic relatioship of the interface to the HTML elements, you may want to set up a test page in which interfaces can be easily accessed from scripts. The following very simple web page provides a &lt;script&gt; element in the header in which you can place functions that test the interface, a few HTML elements with attributes that you can retrieve, set, or otherwise manipulate, and the web user interface necessary to call those functions from the browser.</Body>
<Body>
You can use this test page or create a similar one to test the DOM interfaces you are interested in and see how they work on the browser platform. You can update the contents of the<Code>
test()</Code>
function as needed, create more buttons, or add elements as necessary.</Body>
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;title&gt;DOM Tests&lt;/title&gt;</Code>
<Code>
&lt;script type=&quot;application/x-javascript&quot;&gt;</Code>
<Code>
function setBodyAttr(attr,value){</Code>
<Code>
if(document.body) eval('document.body.'+attr+'=&quot;'+value+'&quot;');</Code>
<Code>
else notSupported();</Code>
<Code>
}</Code>
<Code>
</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
&lt;body&gt;</Code>
<Code>
&lt;div style=&quot;margin: .5in; height=&quot;400&quot;&quot;&gt;</Code>
<Code>
&lt;p&gt;&lt;b&gt;&lt;tt&gt;text&lt;/tt&gt; color&lt;/p&gt;</Code>
<Code>
&lt;form&gt;</Code>
<Code>
&lt;select onChange=&quot;setBodyAttr('text',
this.options[this.selectedIndex].value);&quot;&gt;</Code>
<Code>
&lt;option value=&quot;black&quot;&gt;black</Code>
<Code>
&lt;option value=&quot;darkblue&quot;&gt;darkblue</Code>
<Code>
&lt;/select&gt;</Code>
<Code>
</Code>
<Code>
&lt;p&gt;&lt;b&gt;&lt;tt&gt;bgColor&lt;/tt&gt;&lt;/p&gt;</Code>
<Code>
&lt;select onChange=&quot;setBodyAttr('bgColor',
this.options[this.selectedIndex].value);&quot;&gt;</Code>
<Code>
&lt;option value=&quot;white&quot;&gt;white</Code>
<Code>
&lt;option value=&quot;lightgrey&quot;&gt;gray</Code>
<Code>
&lt;/select&gt;</Code>
<Code>
</Code>
<Code>
&lt;p&gt;&lt;b&gt;&lt;tt&gt;link&lt;/tt&gt;&lt;/p&gt;</Code>
<Code>
&lt;select onChange=&quot;setBodyAttr('link',
this.options[this.selectedIndex].value);&quot;&gt;</Code>
<Code>
&lt;option value=&quot;blue&quot;&gt;blue</Code>
<Code>
&lt;option value=&quot;green&quot;&gt;green</Code>
<Code>
&lt;/select&gt;&amp;nbsp;&amp;nbsp;&lt;small&gt;
&lt;a href=&quot;http://www.brownhen.com/dom_api_top.html&quot; id=&quot;sample&quot;&gt;
(sample link)&lt;/a&gt;&lt;/small&gt;&lt;br&gt;</Code>
<Code>
</Code>
<Code>
&lt;/form&gt;</Code>
<Code>
&lt;form&gt;</Code>
<Code>
&lt;input type=&quot;button&quot; value=&quot;version&quot; onclick=&quot;ver()&quot; /&gt;</Code>
<Code>
&lt;/form&gt;</Code>
<Code>
&lt;/div&gt;</Code>
<Code>
&lt;/body&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<Body>
To test a lot of interfaces in a single page--for example, a “suite” of properties that affect the colors of a web page--you can create a similar test page with a whole console of buttons, textfields, and other HTML elements. The following screenshot gives you some idea of how interfaces can be grouped together for testing.</Body>
<Body>
</Body>
<DIV>
<IMAGE xml:link="simple" href="test_page.gif" show="embed" actuate="auto"/>
</DIV>
<Figure>
Sample DOM Test Page</Figure>
<Body>
In this example, the dropdown menus dynamically update such DOM-accessible aspects of the web page as its background color (<Code>
bgColor</Code>
), the color of the hyperlinks (<Code>
aLink</Code>
), and color of the text (<Code>
text</Code>
). However you design your test pages, testing the interfaces as you read about them is an important part of learning how to use the DOM effectively.</Body>
</chapter>

<chapter>
<title>DOM Element Reference</title>
<Body>
This chapter provides a brief reference for all of the methods, properties, and events available to all HTML and XML elements in the Netscape 6 DOM. </Body>
<Body>
These DOM interfaces cross the various specification levels, but tend to concentrate on the published DOM Level 2 HTML recommendation. Each member includes a link to the appropriate place in the W3C DOM specifications.</Body>
<Heading1>
DOM 
Elements Interface</Heading1>
<Body>
In this case, Elements refers to the interface that all HTML and XML elements have available to them from the DOM. There are more specialized interfaces for particular objects--the <Code>
BODY</Code>
element, for example, has extra functions and properties you can use, as do tables. This chapter refers to the interface that all elements share.</Body>
<Heading2>
Properties</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
attributes</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an array of the attributes on the element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
childNodes</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an array of the child nodes on the element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
className</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the class of the element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
dir</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the directionality of the element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
firstChild</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the first direct child of the current node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
id</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the id of the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
innerHTML</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
innerHTML returns all of the markup and content within a given element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
lang</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Specifies the base language of an element's attribute values and text content. </CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
lastChild</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the last child of the current node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
length</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the number of items in a list (e.g. childNodes).</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
localName</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
localName returns the local part of the qualified name of this node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
namespaceURI</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The namespace URI of this node, or NULL if it is unspecified.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
nextSibling</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the node immediately following the current one in the tree.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
nodeName</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the name of the current node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
nodeType</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the type of the current node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
nodeValue</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the value of the current node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
offsetHeight</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
offsetHeight gets the number of pixels that the current element is offset within the offsetParent node</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
offsetLeft</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
offsetLeft gets/sets the number of pixels that the current element is offset to the left within the offsetParent node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
offsetParent</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
offsetParent returns a reference to the object in which the current element is offset (i.e., the parent element).</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
offsetTop</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
offsetTop returns the position of the current element relative to the top of the offsetParent node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
offsetWidth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
offsetWidth gets the number of pixels that the current element is offset within the offsetParent node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
ownerDocument</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the <Code>
document</Code>
in which this node appears.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
parentNode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the parent node of the current node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
prefix</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
prefix returns the namespace prefix of the current node, or <Code>
NULL</Code>
if it is unspecified.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
previousSibling</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the <Code>
node</Code>
immediately previous to the current one in the tree.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
style</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
style returns the block of style rules on the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
tabIndex</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the position of the element in the tabbing order.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
tagName</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
tagName returns the name of the element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
title</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
title returns the title of the document.</CellBody>
</CELL>
</ROW>
</TABLE>
<Heading2>
Methods</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
addEventListener</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
addEventListener allows the registration of event listeners on the event target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
appendChild</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The appendChild method inserts the specified node into the list of nodes on the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
blur</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The blur method removes keyboard focus from the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
click</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The click method excecutes a click on the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cloneNode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The cloneNode method returns a duplicate of the current node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
dispatchEvent</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The dispatchEvent method allows the dispatch of events into the implementation’s event model.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
focus</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
focus sets focus on the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
getAttribute</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
getAttribute returns the value of the named attribute on the current node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
getAttributeNS</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
getAttributeNS returns the value of the attribute with the given name and namespace.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
getAttributeNode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the attribute of the current element as a separate node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
getElementsByTagName</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the elements of a particular name that are children of the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
hasAttribute</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
hasAttribute returns a boolean value indicating whether the current element has the specified attribute or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
hasAttributeNS</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
hasAttribute is a boolean value indicating whether the current element has an attribute with the specified name and namespace.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
hasChildNodes</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
hasChildNodes is a boolean value indicating whether the current element has children or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
insertBefore</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The insertBefore method allows you to insert a node before the current element in the DOM.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
item</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The item method retrieves a node from the tree by index.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
normalize</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The normalize method puts the current node and all of its subtree into a “normalized” form (see below).</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
removeAttribute</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The removeAttribute() method removes an attribute from the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
removeAttributeNode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
removeAttributeNode removes the specified attribute from the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
removeChild</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The removeChild() method removes a child node from the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
removeEventListener</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
removeEventListener() allows the removal of event listeners from the event target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
replaceChild</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The replaceChild() method replaces one child node on the current element with another.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
setAttribute</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
setAttribute adds a new attribute or changes the value of an existing attribute on the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
setAttributeNS</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
setAttributeNS adds a new attribute or changes the value of an attribute with the given namespace and name.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
setAttributeNode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
setAttributeNode adds a new attribute node to the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
supports</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The supports method tests if this DOM implementation supports a particular feature.</CellBody>
</CELL>
</ROW>
</TABLE>
<Heading2>
Event Handlers</Heading2>
<Body>
These <Code>
element</Code>
properties cannot be assigned to in the way that the event handlers on the <Code>
document</Code>
and <Code>
window</Code>
objects can. All of the folllowing event handler properties are read-only, and are made to return the event handling code, if any, that has already been added to the element in the HTML or XML itself.</Body>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onblur</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the blur event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onclick</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the click event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
ondblclick</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the dblclick event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onfocus</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the focus event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onkeydown</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the keydown event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onkeypress</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the keypress event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onkeyup</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the keyup event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onmousedown</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the mousedown event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onmousemove</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the mousemove event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onmouseout</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the mouseout event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onmouseover</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the mouseover event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onmouseup</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the mouseup event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onresize</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the event handling code for the resize event.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head1>
attributes</Head1>
<Body>
Returns an array of attributes on the given element</Body>
<Head3>
Syntax</Head3>
<Code>
attributes = elementNode.attributes</Code>
<Head3>
Parameters</Head3>
<Indent>
The <Code>
attributes</Code>
parameter returned by this property is a <Code>
NamedNodeMap</Code>
of attribute nodes.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// get the first &lt;p&gt; element in the document</Code>
<Code>
para = document.getElementsByTag(“p”)[0];</Code>
<Code>
atts = para.attributes;</Code>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The array returned by this property is a <Code>
NamedNodeMap</Code>
, a list of objects rather than strings. The name and value of the attribute objects are accessible as separate properties, as in the following complete example, which retrieves the name/value pair of the first attribute of the “p1” paragraph in the document:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function showA() {</CellCode>
<CellCode>
p = document.getElementById(&quot;p1&quot;);</CellCode>
<CellCode>
t = document.getElementById(&quot;t&quot;);</CellCode>
<CellCode>
t.setAttribute(&quot;value&quot;, </CellCode>
<CellCode>
p.attributes[0].name + &quot;-&gt;&quot; + p.attributes[0].value);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;p id=&quot;p1&quot; style=&quot;color: blue;&quot;&gt;Sample Paragraph&lt;/p&gt;</CellCode>
<CellCode>
&lt;form&gt;</CellCode>
<CellCode>
&lt;input type=&quot;button&quot; value=&quot;show&quot; onclick=&quot;showA()&quot; /&gt;</CellCode>
<CellCode>
&lt;input id=&quot;t&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;</CellCode>
<CellCode>
&lt;/form&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Specification</Head3>
<Code>
attributes</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
childNodes</Head1>
<Body>
Returns an array of child nodes on the given element node.</Body>
<Head3>
Syntax</Head3>
<Code>
nodeList = elementNode.childNodes</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
nodeList</Code>
is a list of elements that are children of the current element.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// table is an object reference to a table element</CellCode>
<CellCode>
kids = table.childNodes;</CellCode>
<CellCode>
for (var i = 0; i &lt; kids.length; i++) {</CellCode>
<CellCode>
// do something with each kid as kids[i]</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
document</Code>
object itself has only a single child, and that is the <Code>
HTML</Code>
element. Note again that the items in the array are objects and not strings. To get data from those objects you must use their properties (e.g. <Code>
childNode[2].nodeName</Code>
to get the name, etc.)</Body>
<Head3>
Specification</Head3>
<Code>
childNodes</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
className</Head1>
<Body>
This property gets/sets the class of the current element</Body>
<Head3>
Syntax</Head3>
<Code>
name = element.className</Code>
<Code>
element.className = name</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
name</Code>
is a string representing the class of the current element.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
el = document.getElementById(“div1”);</Code>
<Code>
if (el.className == “fixed”) {</Code>
<Code>
// skip a particular class of element</Code>
<Code>
goNextElement(); </Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The name className is used for this property instead of “class” because of conflicts with the “class” keyword in many languages which use the DOM.</Body>
<Head3>
Specification</Head3>
<Code>
className</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
dir</Head1>
<Body>
The dir property specifies the directionality of the text of the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
directionality = element.dir</Code>
<Code>
element.dir = directionality</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
directionality</Code>
is a string representing the direction of the current element text. See Notes below for a list of the valid directions.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
p = document.getElementById(“para1”);</Code>
<Code>
p.dir = “rtl”; // change text direction on this &lt;p&gt;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The directionality of element text is which direction that text goes (for support of different language systems). Possible values for dir are <Code>
ltr</Code>
, for Left-to-right, and <Code>
rtl</Code>
, for Right-to-left.</Body>
<Head3>
Specification</Head3>
<Code>
dir</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
firstChild</Head1>
<Body>
firstChild returns the first child element of the current element</Body>
<Head3>
Syntax</Head3>
<Code>
element = element.firstChild</Code>
<Head3>
Parameters</Head3>
<Indent>
The <Code>
element</Code>
parameter returned is a node of type <Code>
element</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
trow = document.getElementById(“row1”);</Code>
<CellCode>
left_cell = trow.firstChild;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Returns <Code>
NULL</Code>
if the current node is childless.</Body>
<Head3>
Specification</Head3>
<Code>
firstChild</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
id</Head1>
<Body>
The id property uniquely identifies the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
id_str = element.id</Code>
<Code>
element.id = id_str</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
id_str</Code>
is a string representing the id of the current element.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if element.id != “main_loop”</CellCode>
<CellCode>
goBack();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
There is no more central property to the domain of web development than id. The ID of an element is what is most often used to retrieve it (i.e., with getElementById), and it allows the various nodes in a document to be manipulated independently of one another. In HTML and in XUL, the id is defined as an attribute on the element like so:</Body>
<Code>
&lt;td id=”table-cell2” /&gt;</Code>
<Body>
If you plan to use the DOM with your web pages, it’s a good idea to give as many of your elements id attributes as is necessary. Note that the id element is also frequently used to associated style rules with individual markup elements.</Body>
<Head3>
Specification</Head3>
<Code>
id</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
innerHTML</Head1>
<Body>
innerHTML returns all of the markup and content within a given element.</Body>
<Head3>
Syntax</Head3>
<Code>
HTML = element.innerHTML</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
HTML</Code>
is a string that contains the current element and its content (including child elements) as raw HTML</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// HTML:</Code>
<Code>
// &lt;div id=”d”&gt;&lt;p&gt;Content&lt;/p&gt;</Code>
<Code>
// &lt;p&gt;Further Elaborated&lt;/p&gt;</Code>
<Code>
// &lt;/div&gt;</Code>
<Code>
d = document.getElementById(“d”);</Code>
<Code>
dump(d.innerHTML);</Code>
<Code>
</Code>
<Code>
// the string “&lt;p&gt;Content&lt;/p&gt;&lt;p&gt;Further Elaborated&lt;/p&gt;”</Code>
<Code>
// is dumped to the console window</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Though not actually a part of the DOM spec, this property gives the web developer enormous flexibility over the contents of a web page. Consider the following example, where a script sets the blah blah..</Body>
<Body>
// nuther example</Body>
<Body>
You can get the HTML and text contained within any element--including BODY or HTML--and parse it yourself or blah blah. You can also set this property, which means that you can control the contents of the document by adding to or subtracting from the innerHTML. This third example gives you an idea about how evil this can be when it falls into the wrong hands.</Body>
<Body>
// third example</Body>
<Body>
Note that when you append to the innerHTML of a document, you have essentially created a new document. The session history for the browser is incremented, and when you go Back, the document is there in its original, unappended state.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
lang</Head1>
<Body>
This property specifies the base language of an element's attribute values and text content. </Body>
<Head3>
Syntax</Head3>
<Code>
language = element.lang</Code>
<Code>
element.lang = language</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
language</Code>
is a string that represents the language in which the text of the current element is written.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// this snippet checks that the base language blah blah</Code>
<Code>
if ( document.lang != “en” ) {</Code>
<Code>
document.location = “other_lang_top.html”;</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The language code returned by this property is defined in RFC 1766. Common examples include “en” for English, “ja” for Japanese, “sp” for Spanish, and so on. The default value of this attribute is <Code>
unknown</Code>
. Note that this property, though valid at the individual element level described here, is most often used for the <Code>
BODY</Code>
or for the document itself.</Body>
<Head3>
Specification</Head3>
<Code>
lang</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
lastChild</Head1>
<Body>
lastChild returns the last child of the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
last_child = element.lastChild</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
last_child</Code>
is the final element node in the nodeList of children on the current element.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
tr = document.getElementById(“row1”);</Code>
<CellCode>
corner_td = tr.lastChild;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Returns <Code>
NULL</Code>
if there are no child elements.</Body>
<Head3>
Specification</Head3>
<Code>
lastChild</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
length</Head1>
<Body>
length returns the number of items in a list.</Body>
<Head3>
Syntax</Head3>
<Code>
no_of_items = nodeList.length</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
no_of_items</Code>
is an integer value representing the number of items in a list.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// all the paragraphs in the document</Code>
<Code>
items = document.getElementsByTagName(“p”);</Code>
<Code>
// are there any at all?</Code>
<Code>
if ( items.length ) {</Code>
<Code>
// for each item in the list,</Code>
<Code>
// append the entire element as a string of HTML</Code>
<Code>
for (var i = 0; i &lt; items.length; i++) {</Code>
<Code>
gross += items[0].innerHTML;</Code>
<Code>
// gross is now all the HTML for the paragraphs</Code>
<Code>
}</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
length is a very common property in DOM programming. It’s very common to test the length of a list (to see if it exists at all) and to use it as the iterator in a for loop, as in the example above.</Body>
<Head3>
Specification</Head3>
<Code>
length</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
localName</Head1>
<Body>
localName returns the local part of the qualified name of this node.</Body>
<Head3>
Syntax</Head3>
<Code>
name = element.localName</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
name</Code>
is the local name as a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// qualifiedName = “XXXYYY”</Code>
<Code>
d = document.getElementById(“div1”);</Code>
<Code>
text_field = document.getElementById(“t”);</Code>
<Code>
text_field.setAttribute(“value”, d.localName);</Code>
<Code>
// text_field reads “YYY”</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
For nodes of any type other than <Code>
ELEMENT_NODE</Code>
and <Code>
ATTRIBUTE_NODE</Code>
and nodes created with a DOM Level 1 method, such as <Code>
createElement</Code>
on the <Code>
document</Code>
object, this is always <Code>
NULL</Code>
.</Body>
<Body>
The localname of a node is that part of the node’s qualified name that comes after the colon. Qualified names are typically used in XML as part of the namespace(s) of the particular XML documents. For example, in the qualified name “ecomm:partners,” “partners” is the localname and ecomm is the prefix:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;ecomm:business id=”soda_shop” type=”brick_n_mortar”&gt;</Code>
<Code>
&lt;ecomm:partners&gt;</Code>
<Code>
&lt;ecomm:partner id=”1001”&gt;Tony’s Syrup Warehouse</Code>
<Code>
&lt;/ecomm:partner&gt;</Code>
<Code>
&lt;/ecomm:partner&gt;</Code>
<Code>
&lt;/ecomm:business&gt;</Code>
</CELL>
</ROW>
</TABLE>
<Body>
The prefix--in this case, “ecomm”--defines the namespace in which the localname can be used. </Body>
<Head3>
See Also</Head3>
<Body>
<Bold>
namespaceURI</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
localName</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
namespaceURI</Head1>
<Body>
The namespace URI of this node, or <Code>
NULL</Code>
if it is unspecified.</Body>
<Head3>
Syntax</Head3>
<Code>
namespace = element.namespaceURI</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
namespace</Code>
is a string that represents the namespace URI of the current node.</Indent>
<Head3>
Example</Head3>
<Body>
In this snippet, a node is being examined for its localName and its namespaceURI. If the namespaceURI matches a variable in which the namespace for the XUL namespace is defined, then the node is understood to be a <Code>
&lt;browser /&gt;</Code>
widget from XUL.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
if (node.localName == &quot;browser&quot; 
&amp;&amp; node.namespaceURI == kXULNSURI) {</Code>
<Code>
// xul browser</Code>
<Code>
this.viewee = node.webNavigation.document;</Code>
<Code>
...</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This is not a computed value that is the result of a namespace lookup based on an examination of the namespace declarations in scope. It is merely the namespace URI given at creation time.</Body>
<Body>
For nodes of any type other than <Code>
ELEMENT_NODE</Code>
and <Code>
ATTRIBUTE_NODE</Code>
and nodes created with a DOM Level 1 method, such as <Code>
createElement</Code>
from the Document interface, this is always <Code>
NULL</Code>
.</Body>
<Body>
Per the Namespaces in XML Specification, an attribute does not inherit its namespace from the element it is attached to. If an attribute is not explicitly given a namespace, it simply has no namespace.</Body>
<Head3>
Specification</Head3>
<Code>
nameSpaceURI</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
nextSibling</Head1>
<Body>
Returns the <Code>
node</Code>
immediately following the current one in the tree.</Body>
<Head3>
Syntax</Head3>
<Code>
next_element = element.nextSibling</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
next_element</Code>
is the element node directly after the current element in the list of siblings (i.e., the list of children for the parentNode).</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// in a table, the cells are siblings</Code>
<Code>
cell1 = document.getElementById(“td1”);</Code>
<Code>
cell2 = cell1.nextSibling;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Returns <Code>
NULL</Code>
if there are no more nodes.</Body>
<Head3>
Specification</Head3>
<Code>
nextSibling</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
nodeName</Head1>
<Body>
Returns the name of the current node as a string.</Body>
<Head3>
Syntax</Head3>
<Code>
name = element.nodeName</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
name</Code>
is a string representing the name of the currrent element.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
div1 = document.getElementById(“d1”);</Code>
<Code>
text_field = document.getElementById(“t”);</Code>
<Code>
text_field.setAttribute(“value”, div1.nodeName);</Code>
<Code>
// textfield reads “div” now</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
nodeName</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
nodeType</Head1>
<Body>
Returns a code representing the type of the underlying node</Body>
<Head3>
Syntax</Head3>
<Code>
code = document.nodeType</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
code</Code>
is an unsigned short with one of the following values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
ELEMENT_NODE                   = 1;</Code>
<Code>
ATTRIBUTE_NODE                 = 2;</Code>
<Code>
TEXT_NODE                      = 3;</Code>
<Code>
CDATA_SECTION_NODE             = 4;</Code>
<Code>
ENTITY_REFERENCE_NODE          = 5;</Code>
<Code>
ENTITY_NODE                    = 6;</Code>
<Code>
PROCESSING_INSTRUCTION_NODE    = 7;</Code>
<Code>
COMMENT_NODE                   = 8;</Code>
<Code>
DOCUMENT_NODE                  = 9;</Code>
<Code>
DOCUMENT_TYPE_NODE             = 10;</Code>
<Code>
DOCUMENT_FRAGMENT_NODE         = 11;</Code>
<Code>
NOTATION_NODE                  = 12;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if document.nodeType != 9</CellCode>
<CellCode>
document.close()</CellCode>
<CellCode>
else</CellCode>
<CellCode>
document.write(“&lt;p&gt;I’m a doc!&lt;/p&gt;”);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
nodeType</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
nodeValue</Head1>
<Body>
Returns the value of the current node.</Body>
<Head3>
Syntax</Head3>
<Code>
value = document.nodeValue</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
value</Code>
is a string containing the value of the current node, if any.</Indent>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
For the document itself, nodeValue returns <Code>
NULL</Code>
. For text, comment, and <Code>
CDATA</Code>
nodes, nodeValue returns the content of the node. For attribute nodes, the value of the attribute is returned.</Body>
<Body>
The following table shows the return values for different elements:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Attr</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
value of attribute</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
CDATASection</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
content of the CDATA Section</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Comment</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
content of the comment</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Document</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
null</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
DocumentFragment</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
null</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
DocumentType</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
null</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Element</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
null </CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
NamedNodeMap</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
null</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
EntityReference</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
null </CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Notation</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
null </CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
ProcessingInstruction</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
entire content excluding the target</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Text</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
content of the text node</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
When nodeValue is defined to be <Code>
NULL</Code>
, setting it has no effect.</Body>
<Head3>
Specification</Head3>
<Code>
nodeValue</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
offsetHeight</Head1>
<Body>
offsetHeight gets the number of pixels that the current element is offset within the <Code>
offsetParent</Code>
node.</Body>
<Head3>
Syntax</Head3>
<Code>
height = element.offsetHeight</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
height</Code>
is an integer representing the offset in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
color_table = document.getElementById(“t1”);</Code>
<Code>
tOffset = color_table.offsetHeight;</Code>
<Code>
if ( tOffset &gt; 5 ) {</Code>
<Code>
// large offset: do something here</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
offsetLeft</Head1>
<Body>
Gets/sets the number of pixels that the current element is offset to the left within the <Code>
offsetParent</Code>
node.</Body>
<Head3>
Syntax</Head3>
<Code>
left = element.offsetLeft</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
left</Code>
is an integer representing the offset to the left in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
color_table = document.getElementById(“t1”);</Code>
<Code>
tOLeft = color_table.offsetLeft;</Code>
<Code>
if ( tOLeft &gt; 5 ) {</Code>
<Code>
// large left offset: do something here</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
offsetParent</Head1>
<Body>
offsetParent returns a reference to the object which is the closest (nearest in the containment hierarchy) positioned containing element. If the element is non-positioned, the root element (html in standards compliant mode; body in quirks rendering mode) is the offsetParent.</Body>
<Head3>
Syntax</Head3>
<Code>
parentObj = element.offsetParent</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
parentObj</Code>
is an object reference to the element in which the current element is offset.</Indent>
<Head3>
Example</Head3>
<Code>
example here</Code>
<Head3>
Notes</Head3>
<Body>
extra information</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
offsetTop</Head1>
<Body>
offsetTop returns the position of the current element relative to the top of the <Code>
offsetParent</Code>
node.</Body>
<Head3>
Syntax</Head3>
<Code>
topPos = element.offsetTop</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
topPos</Code>
is the number of pixels from the top of the parent element.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
d = document.getElementById(“div1”);</Code>
<Code>
topPos = d.offsetTop;</Code>
<Code>
if (topPos &gt; 10 ) {</Code>
<Code>
// object it offset less</Code>
<Code>
// than 10 pixels in its parent</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
offsetWidth</Head1>
<Body>
offsetWidth gets the number of pixels that the current element is offset within the <Code>
offsetParent</Code>
node.</Body>
<Head3>
Syntax</Head3>
<Code>
width = element.offsetWidth</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
width</Code>
is an integer representing the offset in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
color_table = document.getElementById(“t1”);</Code>
<Code>
tOffset = color_table.offsetWidth;</Code>
<Code>
if ( tOffset &gt; 5 ) {</Code>
<Code>
// large offset: do something here</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
ownerDocument</Head1>
<Body>
The ownerDocument property returns the top-level <Code>
document</Code>
object for this node.</Body>
<Head3>
Syntax</Head3>
<Code>
document = element.ownerDocument</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
document</Code>
is the <Code>
document</Code>
object parent of the current element.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// given a node “p”, get the top-level HTML child</Code>
<Code>
// of the document object</Code>
<Code>
d = p.ownerDocument;</Code>
<Code>
htm = p.documentElement;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
document</Code>
object returned by this property is the main object with which all the child nodes in the actual HTML document are created. </Body>
<Body>
If this property is used on a node that is itself a document, the result is <Code>
NULL</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
ownerDocument</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
parentNode</Head1>
<Body>
The parentNode property returns the parent of the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
pElement = element.parentNode</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
pElement</Code>
is the <Code>
element</Code>
parent of the current node.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
text_field = document.getElementById(“t”);</Code>
<Code>
if ( div1.parentNode == document ){</Code>
<Code>
text_field.setAttribute(“value”, “top-level”);</Code>
<Code>
// textfield displays text “top-level”</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
extra information</Body>
<Head3>
Specification</Head3>
<Body>
<Code>
parentNode</Code>
</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
prefix</Head1>
<Body>
prefix returns the namespace prefix of the current node, or <Code>
NULL</Code>
if it is unspecified.</Body>
<Head3>
Syntax</Head3>
<Code>
pre = element.prefix</Code>
<Code>
element.prefix = pre</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
pre</Code>
is the namespace prefix as a string.</Indent>
<Head3>
Example</Head3>
<Code>
example here</Code>
<Head3>
Notes</Head3>
<Body>
extra information</Body>
<Head3>
Specification</Head3>
<Code>
prefix</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
previousSibling</Head1>
<Body>
Returns the <Code>
node</Code>
immediately previous to the current one in the tree.</Body>
<Head3>
Syntax</Head3>
<Code>
pNode = elementNode.previousSibling</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
pNode</Code>
is the node prior to this one in the ordered list.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
n1 = n2.previousSibling;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Returns <Code>
NULL</Code>
if there are no more nodes.</Body>
<Head3>
Specification</Head3>
<Code>
previousSibling</Code>
<Body>
</Body>
<Head1>
style</Head1>
<Body>
style returns the block of style rules on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
styleBlock = element.style </Code>
<Code>
( element.style.styleAttr = value )</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
styleBlock</Code>
is a string containing the</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
div = document.getElementById(“div1);</Code>
<Code>
div.style.marginTop = “.25in”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
style is a very commonly used property in DOM programming. You can use it to get the style rules associated with a particular element, and though you cannot set style on an element by assigning to the style property directly, you can use the style property to get to the writable style attributes on the node, as in the short example above.</Body>
<Body>
See the <Bold>
DOM CSS Properties List</Bold>
for a list of the CSS properties that are accessible from the Gecko DOM. There are some additional notes there about the use of the style property to style elements in the DOM.</Body>
<Head3>
Specification</Head3>
<Code>
style</Code>
<Body>
</Body>
<Head1>
tabIndex</Head1>
<Body>
Gets/sets the tab order of the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
element.tabIndex = iIndex</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iIndex</Code>
is a number</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
b1 = document.getElementById(“button1”);</CellCode>
<CellCode>
b1.tabIndex = 1;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
tabIndex</Code>
<Body>
</Body>
<Head1>
tagName</Head1>
<Body>
tagName returns the name of the element.</Body>
<Head3>
Syntax</Head3>
<Code>
elementName = element.tagName</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
elementName</Code>
is a string containing the name of the current element.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;paragraph id=”p001”&gt;When I was born...&lt;/paragraph&gt;</Code>
<Code>
</Code>
<Code>
p = document.getElementById(“p001”);</Code>
<Code>
// p.tagName returns “paragraph”</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
In XML, tagName preserves case. In HTML, tagName returns the element name in the canonical uppercase form. The value of tagName is the same as that of <Bold>
nodeName</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
tagName</Code>
<Body>
</Body>
<Head1>
title</Head1>
<Body>
title returns the title of the document.</Body>
<Head3>
Syntax</Head3>
<Code>
sTitle = document.title</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sTitle</Code>
is a string that contains the title of the current document.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;html&gt;</Code>
<Code>
&lt;title&gt;Hello World!&lt;/title&gt;</Code>
<Code>
&lt;body&gt;...</Code>
<Code>
</Code>
<Code>
// document.title returns “Hello World!”</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
title</Code>
<Body>
</Body>
<Head1>
addEventListener</Head1>
<Body>
addEventListener allows the registration of event listeners on the event target.</Body>
<Head3>
Syntax</Head3>
<Code>
element.addEventListener( type, listener, useCapture )</Code>
<Head3>
Parameters</Head3>
<Body>
The <Code>
addEventListener()</Code>
method takes the following parameters:</Body>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<Code>
type</Code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
A string representing the event type being registered.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<BodyKeepNext>
<Code>
listener</Code>
</BodyKeepNext>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The listener parameter takes an interface implemented by the user which contains the methods to be called when the event occurs.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<BodyKeepNext>
<Code>
useCapture</Code>
</BodyKeepNext>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
If true, useCapture indicates that the user wishes to initiate capture. After initiating capture, all events of the specified type will be dispatched to the registered EventListener before being dispatched to any EventTargets beneath them in the tree. Events which are bubbling upward through the tree will not trigger an EventListener designated to use capture.</CellBody>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;title&gt;DOM Event Examples&lt;/title&gt;</Code>
<Code>
&lt;style&gt;</Code>
<Code>
#t { border: 1px solid red }</Code>
<Code>
#t1 { background-color: pink; }</Code>
<Code>
&lt;/style&gt;</Code>
<Code>
&lt;script&gt;</Code>
<Code>
// Event Registration Example</Code>
<Code>
function l_func() {</Code>
<Code>
t2 = document.getElementById(&quot;t2&quot;);</Code>
<Code>
t2.innerHTML = &quot;three&quot;;    </Code>
<Code>
}</Code>
<Code>
</Code>
<Code>
function load() {</Code>
<Code>
el = document.getElementById(&quot;t&quot;);</Code>
<Code>
el.addEventListener(&quot;click&quot;, l_func, false);</Code>
<Code>
}</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
&lt;body onload=&quot;load();&quot;&gt;</Code>
<Code>
&lt;table id=&quot;t&quot;&gt;</Code>
<Code>
&lt;tr&gt;&lt;td id=&quot;t1&quot;&gt;one&lt;/td&gt;&lt;/tr&gt;</Code>
<Code>
&lt;tr&gt;&lt;td id=&quot;t2&quot;&gt;two&lt;/td&gt;&lt;/tr&gt;</Code>
<Code>
&lt;/table&gt;</Code>
<Code>
&lt;/body&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<Code>
</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If an <Code>
EventListener</Code>
is added to an <Code>
EventTarget</Code>
while it is processing an event, it will not be triggered by the current actions but may be triggered during a later stage of event flow, such as the bubbling phase.</Body>
<Body>
If multiple identical <Code>
EventListeners</Code>
are registered on the same <Code>
EventTarget</Code>
with the same parameters the duplicate instances are discarded. They do not cause the <Code>
EventListener</Code>
to be called twice and since they are discarded they do not need to be removed with the <Bold>
removeEventListener</Bold>
method.</Body>
<Head3>
Specification</Head3>
<Code>
addEventListener</Code>
<Body>
</Body>
<Head1>
appendChild</Head1>
<Body>
The appendChild method inserts the specified node into the list of nodes on the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
element.appendChild(newChild)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
newChild</Code>
is a node.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// puts the new, empty paragraph at the end</Code>
<Code>
// of the document</Code>
<Code>
p = document.createElement(“p”);</Code>
<Code>
element.appendChild(p);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
appendChild is one of the fundamental methods of web programming using the DOM. The appendChild method inserts a new node into the DOM structure of the HTML document, and is the second part of the one-two, create-and-append process so central to building web pages programmatically. The example above illustrates this basic process.</Body>
<Head3>
Specification</Head3>
<Code>
appendChild</Code>
<Body>
</Body>
<Head1>
blur</Head1>
<Body>
The blur method removes keyboard focus from the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
element.blur()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
None.</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
blur</Code>
<Body>
</Body>
<Head1>
click</Head1>
<Body>
The click method excecutes a click on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
element.click()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
example here</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The click method simulates a click event on the current element. This is frequently used to execute event handlers that have been placed on the current element or on elements above it in the “event chain.” </Body>
<Head3>
Specification</Head3>
<Code>
click</Code>
<Body>
</Body>
<Head1>
cloneNode</Head1>
<Body>
The cloneNode method returns a duplicate of the current node.</Body>
<Head3>
Syntax</Head3>
<Code>
dupNode = element.cloneNode(deep)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
deep</Code>
is a boolean value indicating whether the clone is a deep clone or not (see notes below).</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
p = document.getElementById(“para1”);</Code>
<Code>
p_prime = p.cloneNode(true);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The duplicate node returned by cloneNode() has no parent. Cloning a node copies all of its attributes and their values but does not copy any of the text that the node contains, since that text is contained in a child <Code>
Text</Code>
node.</Body>
<Body>
A deep clone is a clone in which the given node and the whole subtree beneath it (including the text that makes up any child Text nodes) is copied and returned.</Body>
<Head3>
Specification</Head3>
<Code>
cloneNode</Code>
<Body>
</Body>
<Head1>
dispatchEvent</Head1>
<Body>
The dispatchEvent method allows the dispatch of events into the implementation’s event model.</Body>
<Head3>
Syntax</Head3>
<Code>
boolean = element.dispatchEvent(event)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
event</Code>
is an event object that contains information about the type, behavior, and contextual information of the event to be dispatched.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
b = document.getElementById(“button1”);</Code>
<Code>
res = b.dispatchEvent(“click”);</Code>
<Code>
if ( res ) {</Code>
<Code>
// event dispatch was successful</Code>
<Code>
b.disabled = true;</Code>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When you create and dispatch an event using this method, the event has the same effect as events dispatched by user interaction. They are “real” events, in other words, and they bubble up the UI in the same way. See the event object interface for more information about the information that is passed in with this method.</Body>
<Head3>
Specification</Head3>
<Code>
dispatchEvent</Code>
<Body>
</Body>
<Head1>
focus</Head1>
<Body>
focus sets focus on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
element.focus()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
None.</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Calling the focus method on an element is equivalent to selecting that element in the user interface.</Body>
<Head3>
Specification</Head3>
<Code>
focus</Code>
<Body>
</Body>
<Head1>
getAttribute</Head1>
<Body>
getAttribute returns the value of the named attribute on the current node.</Body>
<Head3>
Syntax</Head3>
<Code>
attribute = element.getAttribute(name)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
name</Code>
is the name of the attribute whose value you want to get.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
div1 = document.getElementById(“div1”);</Code>
<Code>
a = divvy.getAttribute(“align”);</Code>
<Code>
alert(a); // shows the value of align for that DIV</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
getAttribute is another very common and useful method for web developers. The corollary to this method is <Bold>
setAttributeNS</Bold>
, which allows you to change the value of a named attribute.</Body>
<Head3>
Specification</Head3>
<Code>
getAttribute</Code>
<Body>
</Body>
<Head1>
getAttributeNS</Head1>
<Body>
getAttributeNS returns the value of the attribute with the given name and namespace.</Body>
<Head3>
Syntax</Head3>
<Code>
attribute = element.getAttributeNS(namespace, name)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
attribute</Code>
is an attribute node</Indent>
<Indent>
<Code>
namespace</Code>
is the namespace of the requested attribute.</Indent>
<Indent>
<Code>
name</Code>
is the name of the attribute whose value you want to get.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
div1 = document.getElementById(“div1”);</Code>
<Code>
a = divvy.getAttributeNS(</Code>
<Code>
www.mozilla.org/ns/specialspace/”,</Code>
<Code>
special-align”);</Code>
<Code>
alert(a); // shows the value of align for that DIV</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
getAttributeNS is another very common and useful method for web developers. It differs from <Bold>
getAttribute</Bold>
in that it allows you to further specify the requested attribute as being part of a particular namespace, as in the example above, where the attribute is part of the fictional “specialspace” namespace on mozilla.</Body>
<Body>
The corollary to this method is setAttributeNS, which allows you to change the value of a named attribute.</Body>
<Head3>
Specification</Head3>
<Code>
getAttributeNS</Code>
<Body>
</Body>
<Body>
</Body>
<Head1>
getAttributeNode</Head1>
<Body>
Returns the attribute of the current element as a separate node.</Body>
<Head3>
Syntax</Head3>
<Code>
attributeNode = element.getAttributeNode(nodeName)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
nodeName</Code>
is a string containing the name of the node.</Indent>
<Indent>
<Code>
attributeNode</Code>
is a separate Attribute node.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// html: &lt;div id=”top” /&gt;</Code>
<Code>
t = document.getElementById(“top”);</Code>
<Code>
iNode = t.getAttributeNode(“id”);</Code>
<Code>
// iNode.value = “top”</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
Attribute</Code>
node inherits from node, but is not considered a part of the document tree. Common node attributes like <Code>
parentNode</Code>
, <Code>
previousSibling</Code>
, and <Code>
nextSibling</Code>
are <Code>
NULL</Code>
for an Attribute node. You can, however, get the element to which the attribute belongs with the <Code>
ownerElement</Code>
property.</Body>
<Head3>
Specification</Head3>
<Code>
getAttributeNode</Code>
<Body>
</Body>
<Head1>
getAttributeNodeNS</Head1>
<Body>
Returns the attribute with the given namespace and name as a separate node.</Body>
<Head3>
Syntax</Head3>
<Code>
attributeNode = element.getAttributeNode(namespace, nodeName)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
namespace</Code>
is a string containing the namespace of the attribute.</Indent>
<Indent>
<Code>
nodeName</Code>
is a string containing the name of the node.</Indent>
<Indent>
<Code>
attributeNode</Code>
is a separate Attribute node.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// html: &lt;div id=”top” /&gt;</Code>
<Code>
t = document.getElementById(“top”);</Code>
<Code>
specialNode = t.getAttributeNodeNS(
http://www.mozilla.org/ns/specialspace”, </Code>
<Code>
id”);</Code>
<Code>
// iNode.value = “full-top”</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
Attribute</Code>
node inherits from node, but is not considered a part of the document tree. Common node attributes like <Code>
parentNode</Code>
, <Code>
previousSibling</Code>
, and <Code>
nextSibling</Code>
are <Code>
NULL</Code>
for an Attribute node. </Body>
<Body>
You can, however, get the element to which the attribute belongs with the <Code>
ownerElement</Code>
property.</Body>
<Body>
getAttributeNodeNS is more specific than <Bold>
getAttributeNode</Bold>
in that it allows you to specify attributes that are part of a particular namespace. The corresponding setter method is <Bold>
setAttributeNodeNS</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
getAttributeNodeNS</Code>
<Body>
</Body>
<Head1>
getElementsByTagName</Head1>
<Body>
Returns a list of the child elements of a given name on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
elements = element.getElementsByTagName(Name)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
elements</Code>
is a <Code>
nodeList</Code>
of elements.</Indent>
<Indent>
<Code>
tagName</Code>
is a string representing the name of the elements.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// check the alignment on a number of cells in a table.</CellCode>
<CellCode>
table = document.getElementById(“forecast-table”);</CellCode>
<CellCode>
cells = table.getElementsByTagName(“td”);</CellCode>
<Code>
for (var i = 0; i &lt; cells.length; i++) {</Code>
<Code>
status = cells[i].getAttribute(“status”);</Code>
<Code>
if ( status == “open”) {</Code>
<Code>
// grab the data</Code>
<Code>
}</Code>
<Code>
}</Code>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
getElementsByTagName on the element is the same as getElementsByTagName on the document, except that its search is restricted to those elements which are children of the current element.</Body>
<Head3>
Specification</Head3>
<Code>
getElementsByTagName</Code>
<Body>
</Body>
<Head1>
hasAttribute</Head1>
<Body>
hasAttribute is a boolean value indicating whether the current element has the specified attribute or not.</Body>
<Head3>
Syntax</Head3>
<Code>
[ true | false ] = element.hasAttribute(attName)</Code>
<Head3>
Parameters</Head3>
<Indent>
boolean <Code>
true | false</Code>
</Indent>
<Indent>
<Code>
attName</Code>
is a string representing the name of the attribute</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// check that the attirbute exists</Code>
<Code>
// before you set a value</Code>
<Code>
d = document.getElementById(“div1”);</Code>
<Code>
if d.hasAttribute(“align”) {</Code>
<Code>
d.setAttribute(“align”, “center”);</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
hasAttribute</Code>
<Body>
</Body>
<Head1>
hasAttributeNS</Head1>
<Body>
hasAttribute is a boolean value indicating whether the current element has an attribute with the specified name and namespace.</Body>
<Head3>
Syntax</Head3>
<Code>
[ true | false ] = element.hasAttribute(namespace, localName)</Code>
<Head3>
Parameters</Head3>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Indent>
boolean <Code>
true | false</Code>
</Indent>
<Indent>
<Code>
namespace</Code>
is a string representing the namespace you are looking for</Indent>
<Indent>
<Code>
localName</Code>
is a string representing the name of the attribute</Indent>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// check that the attirbute exists</Code>
<Code>
// before you set a value</Code>
<Code>
d = document.getElementById(“div1”);</Code>
<Code>
if d.hasAttributeNS(</Code>
<Code>
http://www.mozilla.org/ns/specialspace/”, </Code>
<Code>
special-align”) { d.setAttribute(“align”, “center”); }</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
hasAttributeNS</Code>
<Body>
</Body>
<Head1>
hasAttributes</Head1>
<Body>
hasAttributes is a boolean value indicating whether the current element has any attributes.</Body>
<Head3>
Syntax</Head3>
<Code>
[ true | false ] = element.hasAttributes</Code>
<Head3>
Parameters</Head3>
<Indent>
boolean <Code>
true | false</Code>
</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
t1 = document.getElementById(“table-data”);</Code>
<Code>
if ( t1.hasAttributes ) {</Code>
<Code>
// do something with</Code>
<Code>
// t1.attributes</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
hasAttributes</Code>
<Body>
</Body>
<Head1>
hasChildNodes</Head1>
<Body>
hasChildNodes is a method that returns a boolean value indicating whether the current element has children or not.</Body>
<Head3>
Syntax</Head3>
<Code>
[ true | false ] = element.hasChildNodes()</Code>
<Head3>
Parameters</Head3>
<Indent>
boolean <Code>
true | false</Code>
</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
t1 = document.getElementById(“table-data”);</Code>
<Code>
if ( t1.hasChildNodes() ) {</Code>
<Code>
// table has kids</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that <Code>
element.hasChildNodes</Code>
, without the parentheses, is the incorrect usage of this method, and always returns a <Code>
true</Code>
value indicating that the method is available on the object. Do not be fooled.</Body>
<Head3>
Specification</Head3>
<Code>
hasChildNodes</Code>
<Body>
</Body>
<Head1>
insertBefore</Head1>
<Body>
The <Code>
insertBefore</Code>
method allows you to insert a node before a reference element as a child of the current node.</Body>
<Head3>
Syntax</Head3>
<Code>
insertedElement = element.insertBefore(
newElement, targetElement)</Code>
<Head3>
Parameters</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
insertedElement</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The node being inserted.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
newElement</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The node to insert.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
targetElement</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The node before which <Code>
newElement</Code>
is inserted.</CellBody>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
parentDiv = document.getElementById(&quot;parentDiv&quot;);</Code>
<Code>
sp2 = document.getElementById(&quot;childSpan&quot;);</Code>
<Code>
sp1 = document.createElement(&quot;span&quot;);</Code>
<Code>
parentDiv.insertBefore(sp1, sp2);</Code>
<Code>
</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
insertBefore</Code>
<Body>
</Body>
<Head1>
item</Head1>
<Body>
The <Code>
item</Code>
method retrieves a node from the tree by index.</Body>
<Head3>
Syntax</Head3>
<Code>
nodeItem = element.item(index)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
nodeItem</Code>
is a node.</Indent>
<Indent>
<Code>
index</Code>
is the index of the node to be fetched. Index is zero-based.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
tbls = document.getElementsByTagName(“table”);</Code>
<Code>
first_table = tbls.item(1);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
A value of <Code>
NULL</Code>
is returned if the index is out of range.</Body>
<Head3>
Specification</Head3>
<Code>
item</Code>
<Body>
</Body>
<Head1>
nextSibling</Head1>
<Body>
Returns the <Code>
node</Code>
immediately following the current one in the tree.</Body>
<Head3>
Syntax</Head3>
<Code>
node = elementNode.nextSibling</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
node</Code>
is a node object.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// in a table, the cells are siblings</Code>
<Code>
cell1 = document.getElementById(“td1”);</Code>
<Code>
cell2 = cell1.nextSibling;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Returns <Code>
NULL</Code>
if there are no more nodes.</Body>
<Head3>
Specification</Head3>
<Body>
<Code>
nextSibling</Code>
</Body>
<Body>
</Body>
<Head1>
normalize</Head1>
<Body>
The normalize method puts the current node and all of its subtree into a “normalized” form (see below).</Body>
<Head3>
Syntax</Head3>
<Code>
element.normalize()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
example here</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The normalized form of a subtree is that subtree’s nodelist cleansed of extranous and adjacent Text nodes.</Body>
<Head3>
Specification</Head3>
<Code>
normalize</Code>
<Body>
</Body>
<Head1>
removeAttribute</Head1>
<Body>
The removeAttribute() method removes an attribute from the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
element.removeAttribute(attName)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
attName</Code>
is a string that names the attribute to be removed from the current node.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// &lt;div align=”left” width=”200px” /&gt;</Code>
<Code>
d = document.getElementById(“div1”);</Code>
<Code>
d.removeAttribute(“align”);</Code>
<Code>
// now: &lt;div width=”200px” /&gt;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
removeAttribute allows you to change the attribute list dynamically on the current node.</Body>
<Head3>
Specification</Head3>
<Code>
removeAttribute</Code>
<Body>
</Body>
<Head1>
removeAttributeNS</Head1>
<Body>
The removeAttributeNS() method removes an attribute with the specified namespacde and name.</Body>
<Head3>
Syntax</Head3>
<Code>
element.removeAttribute(namespace, attName)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
namespace</Code>
is a string that contains the namespace of the specified attribute.</Indent>
<Indent>
<Code>
attName</Code>
is a string that names the attribute to be removed from the current node.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// &lt;div special-align=”utterleft” width=”200px” /&gt;</Code>
<Code>
d = document.getElementById(“div1”);</Code>
<Code>
d.removeAttributeNS(
http://www.mozilla.org/ns/specialspace”,</Code>
<Code>
special-align”);</Code>
<Code>
// now: &lt;div width=”200px” /&gt;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
removeAttributeNS allows you to change the attribute list dynamically on the current node.</Body>
<Head3>
Specification</Head3>
<Code>
removeAttributeNS</Code>
<Body>
</Body>
<Head1>
removeAttributeNode</Head1>
<Body>
removeAttributeNode removes the specified attribute from the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
remove_attr = element.removeAttributeNode(attribute)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
attribute</Code>
is the Attribute node that needs to be removed.</Indent>
<Indent>
<Code>
remove_attr</Code>
is an Attribute node.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// &lt;div id=”top” align=”center” /&gt;</Code>
<Code>
d = document.getElementById(“top”);</Code>
<Code>
d_align = d.getAttributeNode(“align”);</Code>
<Code>
d.removeAttributeNode(d_align);</Code>
<Code>
// align has a default value, center,</Code>
<Code>
// so the removed attribute is immediately </Code>
<Code>
// replaced: &lt;div id=”top” align=”center” /&gt;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the removed Attribute has a default value it is immediately replaced. The replacing attribute has the same namespace URI and local name, as well as the original prefix, when applicable. </Body>
<Head3>
Specification</Head3>
<Code>
removeAttributeNode</Code>
<Body>
</Body>
<Head1>
removeChild</Head1>
<Body>
The removeChild() method removes a child node from the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
oldChild = element.removeChild(child)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
oldChild</Code>
is the node that needs to be removed.</Indent>
<Indent>
<Code>
child</Code>
is a node.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// &lt;div id=”top” align=”center”&gt;&lt;div id=”nested”/&gt;&lt;/div&gt;</Code>
<Code>
d = document.getElementById(“top”);</Code>
<Code>
d_nested = document.getElementById(“nested”);</Code>
<Code>
throwaway_node = d.removeChild(d_nested);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
removeChild</Code>
<Body>
</Body>
<Head1>
removeEventListener</Head1>
<Body>
removeEventListener() allows the removal of event listeners from the event target.</Body>
<Head3>
Syntax</Head3>
<Code>
element.removeEventListener(type, listener, useCapture)</Code>
<Head3>
Parameters</Head3>
<Body>
The <Code>
removeEventListener()</Code>
method takes the following parameters:</Body>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<Code>
type</Code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
A string representing the event type being registered.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<BodyKeepNext>
<Code>
listener</Code>
</BodyKeepNext>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The listener parameter takes an interface implemented by the user which contains the methods to be called when the event occurs.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<BodyKeepNext>
<Code>
useCapture</Code>
</BodyKeepNext>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
If true, useCapture indicates that the user wishes to initiate capture. After initiating capture, all events of the specified type will be dispatched to the registered EventListener before being dispatched to any EventTargets beneath them in the tree. Events which are bubbling upward through the tree will not trigger an EventListener designated to use capture.</CellBody>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
example here</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If an EventListener is removed from an EventTarget while it is processing an event, it will not be triggered by the current actions. EventListeners can never be invoked after being removed.</Body>
<Body>
Calling removeEventListener with arguments which do not identify any currently registered EventListener on the EventTarget has no effect.</Body>
<Body>
See also <Bold>
addEventListener</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
removeEventListener</Code>
<Body>
</Body>
<Head1>
replaceChild</Head1>
<Body>
The replaceChild() method replaces one child node on the current element with another.</Body>
<Head3>
Syntax</Head3>
<Code>
element.replaceChild(newChild, oldChild)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
newChild</Code>
is a node.</Indent>
<Indent>
<Code>
oldChild</Code>
is the existing child node to be replaced.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;script language=&quot;javascript&quot;&gt;</Code>
<Code>
function init()</Code>
<Code>
{</Code>
<Code>
d1 = document.getElementById(&quot;top&quot;); </Code>
<Code>
d2 = document.getElementById(&quot;in&quot;); </Code>
<Code>
d_new = document.createElement(&quot;p&quot;); </Code>
<Code>
d1.replaceChild(d_new, d2); </Code>
<Code>
alert(d1.childNodes[1].nodeName) </Code>
<Code>
}</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
</Code>
<Code>
&lt;body onload=&quot;init()&quot;&gt;</Code>
<Code>
&lt;div id=&quot;top&quot; align=&quot;left&quot;&gt; </Code>
<Code>
&lt;div id=&quot;in&quot;&gt;in </Code>
<Code>
&lt;/div&gt; </Code>
<Code>
</Code>
<Code>
&lt;/body&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<Code>
</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
extra information</Body>
<Head3>
Specification</Head3>
<Code>
replaceChild</Code>
<Body>
</Body>
<Head1>
setAttribute</Head1>
<Body>
setAttribute adds a new attribute or changes the value of an existing attribute on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
element.setAttribute(name, value)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
name</Code>
is the name of the new attribute as a string.</Indent>
<Indent>
<Code>
value</Code>
is the desired value of the new attribute.</Indent>
<Head3>
Example</Head3>
s
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
d = document.getElementById(“d1”);</Code>
<Code>
d.setAttribute(“align”, “center”);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the attribute named already exists, then the value of that attribute is changed to the value passed in as part of this function. If it does not exist, then a new attribute node is created.</Body>
<Head3>
Specification</Head3>
<Code>
setAttribute</Code>
<Body>
</Body>
<Head1>
setAttributeNS</Head1>
<Body>
setAttributeNS adds a new attribute or changes the value of an attribute with the given namespace and name.</Body>
<Head3>
Syntax</Head3>
<Code>
element.setAttribute(namespace, name, value)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
namespace</Code>
is the namespace of the new attribute as a string.</Indent>
<Indent>
<Code>
name</Code>
is the name of the new attribute as a string.</Indent>
<Indent>
<Code>
value</Code>
is the desired value of the new attribute.</Indent>
<Head3>
Example</Head3>
<Body>
This example splits the text in a paragraph element. The new, second child of p2 is the sibling node hat contains the text after the split. <Code>
data</Code>
gets the text from the <Code>
text</Code>
object.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
d = document.getElementById(“d1”);</Code>
<Code>
d.setAttributeNS(</Code>
<Code>
http://www.mozilla.org/ns/specialspace”,</Code>
<Code>
align”, </Code>
<Code>
center”);</Code>
<Code>
</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the attribute named already exists, then the value of that attribute is changed to the value passed in as part of this function. If it does not exist, then a new attribute node is created.</Body>
<Head3>
Specification</Head3>
<Code>
setAttributeNS</Code>
<Body>
</Body>
<Head1>
setAttributeNode</Head1>
<Body>
setAttributeNode adds a new attribute node to the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
replaced_attr = element.setAttributeNode(attribute)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
attribute</Code>
is a node of type <Code>
Attribute</Code>
</Indent>
<Indent>
<Code>
replaced_attr</Code>
is the replaced attribute node, if any, returned by this function</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// &lt;div id=”one” align=”left”&gt;one&lt;/div&gt;</Code>
<Code>
// &lt;div id=”two”&gt;two&lt;/div&gt;</Code>
<Code>
d1 = document.getElementById(&quot;one&quot;);</Code>
<Code>
d2 = document.getElementById(&quot;two&quot;);</Code>
<Code>
a = d1.getAttributeNode(“align”);</Code>
<Code>
d2.setAttributeNode(a);</Code>
<Code>
alert(d2.attributes[1].value)</Code>
<Code>
// returns: ‘left’</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the attribute named already exists on the element, then that attribute is replaced with the new one and the replaced one is returned. </Body>
<Body>
Note that this function does not the set the value of the new attribute, only creates it on the element. Use setAttribute to set or change the value on an existing node.</Body>
<Head3>
Specification</Head3>
<Code>
setAttributeNode</Code>
<Body>
</Body>
<Head1>
setAttributeNodeNS</Head1>
<Body>
setAttributeNodeNS adds a new attribute node with the specified namespace and name.</Body>
<Head3>
Syntax</Head3>
<Code>
replaced_attr =
element.setAttributeNodeNS(namespace, attribute)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
namespace</Code>
is the namespace of the attribute as a string.</Indent>
<Indent>
<Code>
attribute</Code>
is a node of type <Code>
Attribute.</Code>
</Indent>
<Indent>
<Code>
replaced_attr</Code>
is the replaced attribute node, if any, returned by this function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// &lt;div id=”one” special-align=”utterleft”&gt;one&lt;/div&gt;</Code>
<Code>
// &lt;div id=”two”&gt;two&lt;/div&gt;</Code>
<Code>
myns = “http://www.mozilla.org/ns/specialspace”;</Code>
<Code>
</Code>
<Code>
d1 = document.getElementById(&quot;one&quot;);</Code>
<Code>
d2 = document.getElementById(&quot;two&quot;);</Code>
<Code>
a = d1.getAttributeNodeNS(
myns,
special-align”);</Code>
<Code>
d2.setAttributeNodeNS(</Code>
<Code>
myns,</Code>
<Code>
a);</Code>
<Code>
alert(d2.attributes[1].value)</Code>
<Code>
// returns: ‘utterleft’</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the attribute named already exists on the element, then that attribute is replaced with the new one and the replaced one is returned. The corresponding getter method for namespaced attribute nodes is <Bold>
getAttributeNodeNS</Bold>
.</Body>
<Body>
Note that this function does not the set the value of the new attribute, only creates it on the element. Use <Bold>
setAttributeNS</Bold>
to set or change the value on an existing node within a particular namespace.</Body>
<Head3>
Specification</Head3>
<Code>
setAttributeNodeNS</Code>
<Body>
</Body>
<Head1>
supports</Head1>
<Body>
The supports method tests if this DOM implementation supports a particular feature.</Body>
<Head3>
Syntax</Head3>
<Code>
boolean = element.supports(feature[, version])</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
feature</Code>
is a string that contains the name of the feature (e.g., ““)</Indent>
<Indent>
<Code>
version</Code>
is a string containing the version number of the feature.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
if ( document.supports(“package”, “4.0”) ) {</Code>
<Code>
// do something that only package 4.0 allows</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If version is not supplied, the method returns true is any version of the specified feature is supported.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of the specification.</Body>
<Body>
</Body>
<Head1>
onblur</Head1>
<Body>
The onblur property returns the onBlur event handler code, if any, that exists on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onblur</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
warnFunc = window.onblur;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The blur event is raised when an element loses focus.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
onclick</Head1>
<Body>
The onclick property returns the onClick event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onclick</Code>
<Head3>
Example</Head3>
<Body>
Perhaps the simplest example of using the onclick DOM property is to retrieve the existing onclick event handler code. The following function sets the event handler code, then gets it and displays it.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
function pawnClick()  {</Code>
<Code>
p = document.getElementById(&quot;mutable&quot;);</Code>
<Code>
p.onclick = &quot;alert('moot!');&quot;;</Code>
<Code>
text = p.onclick;</Code>
<Code>
alert(text);</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The click event is raised when the user clicks on an element.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
ondblclick</Head1>
<Body>
The ondblclick property returns the onDblClick event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.ondblclick</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// &lt;img src=”pawn.gif” onDblClick=”movePawn(this);” /&gt;</Code>
<Code>
function pawnClick()  {</Code>
<Code>
i = document.getElementById(&quot;img1&quot;);</Code>
<Code>
alert(i.ondblclick);</Code>
<Code>
}</Code>
<Code>
// alerts: function anonymous(event) { movePawn(this) }</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The dblclick event is raised when a user double-clicks on an element.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
onfocus</Head1>
<Body>
The onfocus property returns the onFocus event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onfocus</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
None.</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The focus event is raised when the user sets focus on the given element.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
onkeydown</Head1>
<Body>
The onkeydown property returns the onKeyDown event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onkeydown</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
None.</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The keydown event is raised when the user presses a keyboard key.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
onkeypress</Head1>
<Body>
The onkeypress property returns the onKeyPress event handler code for the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onkeypress</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
None.</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The keypress event is raised when the user presses a key on the keyboard.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
onkeyup</Head1>
<Body>
The onkeyup property returns the onKeyUp event handler code for the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onclick</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
None.</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The keyup event is raised when the user releases a key that’s been pressed.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
onmousedown</Head1>
<Body>
The onmousedown property returns the onMouseDown event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onmousedown</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
None.</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mousedown event is raised when the user presses the left button button.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
onmousemove</Head1>
<Body>
The onmousemove propety returns the onMouseMove event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onmousemove</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
movement = element.onmousemove</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mousemove event is raised when the user moves the mouse.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
onmouseout</Head1>
<Body>
The onmouseout property returns the onMouseOut event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onmouseout</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
None.</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mouseout event is raised when the mouse leaves an element (e.g, when the mouse moves off of an image in the web page, the mouseout event is raised for that image element).</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
onmouseover</Head1>
<Body>
The onmouseover property returns the onMouseOver event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onmouseover</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
None.</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mouseover event is raised when the user moves the mouse over a particular element.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
onmouseup</Head1>
<Body>
The onmouseup property returns the onMouseUp event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onmouseup</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
None.</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mouseup event is raised when the user releases the left mouse button.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
onresize</Head1>
<Body>
The onresize property returns the onResize event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onresize</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// &lt;img src=”pawn.gif” onResize=”growBoard();” /&gt;</Code>
<Code>
function pawnClick()  {</Code>
<Code>
i = document.getElementById(&quot;img1&quot;);</Code>
<Code>
alert(i.onresize);</Code>
<Code>
}</Code>
<Code>
// alerts: function anonymous(event) { growBoard() }</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The resize event is raised when the user resizes a resizable element (such as a window).</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<BodyKeepNext>
</BodyKeepNext>
</chapter>

<chapter>
<title>DOM window Reference</title>
<Body>
This chapter provides a brief reference for all of the methods, properties, and events available through the DOM <Code>
window</Code>
object. </Body>
<Body>
The <Code>
window</Code>
object represents the window itself. Typically, <Code>
window</Code>
contains the <Code>
document</Code>
as a child (see <Bold>
DOM Document Reference</Bold>
), provides access to the <Bold>
window.navigator</Bold>
and <Bold>
window.screen</Bold>
objects for manipulating the browsing environment itself, and provides a number of special properties for accessing the object model below it. </Body>
<Heading1>
DOM window Interface</Heading1>
<Body>
The properties, methods, and event handlers of the <Code>
window</Code>
object are given here.</Body>
<Head2>
Properties</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window._content</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the content element in the current window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.closed</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
This property indicates whether the current window is closed or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.Components</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an array of the 
components installed in the browser.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.controllers</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the XUL controller objects for the current chrome window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.crypto</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the browser <Code>
crypto</Code>
object</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.defaultStatus</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the status bar text for the given window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.directories</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the directories toolbar in the current chrome.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.document</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the document that the window contains.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.frames</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an array of the subframes in the current window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.history</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the <Code>
history</Code>
object.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.innerHeight</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the height of the content area of the browser window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.innerWidth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the height of the content area of the browser window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.length</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the number of frames in the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.location</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the location, or current URL, of the window object.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.locationbar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the <Code>
locationbar </Code>
object, whose visibility can be toggled in the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.menubar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the <Code>
menubar</Code>
object, whose visibility can be toggled in the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.name</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the name of the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the <Code>
navigator</Code>
object.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.appCodeName</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the internal “code” name of the current browser.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.appName</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the official name of the browser.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.appVersion</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the version of the browser as a string.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.cookieEnabled</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether cookies are enabled in the browser or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.language</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a string representing the language version of the browser.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.mimeTypes</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a list of the MIME types supported by the browser.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.oscpu</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a string that represents the current operating system.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.platform</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a string representing the platform of the browser.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.plugins</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns an array of the plugins installed in the browser.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.product</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the product name of the browser (e.g., “Gecko”)</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.productSub</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the product version number (e.g., “5.0”)</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.userAgent</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the user agent string for the current browser.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.vendor</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the vendor name of the current browser (e.g., “Netscape6”)</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.vendorSub</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the vendor version number (e.g., “6.1”)</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.opener</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the window that opened this current window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.outerHeight</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets/sets the height of the outside of the browser window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.outerWidth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets/sets the width of the outside of the browser window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.pageXOffset</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets the amount of content that has been hidden by scrolling to the right</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.pageYOffset</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets the amount of content that has been hidden by scrolling down.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.parent</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the parent of the current window or subframe.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.personalbar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the personalbar object, whose visibility can be toggled in the window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.pkcs11</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the <Code>
pkcs11</Code>
object , which can be used to install drivers other software associated with the pkcs11 protocol.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.prompter</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the prompt window, if any, currently displayed.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the screen object associated with the window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.availHeight</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.availLeft</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the first available pixel available from the left side of the screen. </Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.availTop</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.availWidth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the amount of horizontal space in pixels available to the window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.colorDepth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the color depth of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.height</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the height of the screen in pixels.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.left</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets/sets the current distance in pixels from the left side of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.pixelDepth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Getst the bit depth of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.top</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets/sets the distance from the top of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.width</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the width of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screenX</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the horizontal distance of the left border of the user's browser from the left side of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screenY</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the vertical distance of the top border of the user's browser from the top side of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollbars</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the scrollbars object, whose visibility can be toggled in the window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollX</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the number of pixels that the document has already been scrolled horizontally.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollY</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the number of pixels that the document has already been scrolled vertically.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.self</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns an object reference to the window object itself.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.sidebar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the window object of the sidebar.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.status</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets/sets the text in the statusbar at the bottom of the browser.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.statusbar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the statusbar object, whose visibility can be toggled in the window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.toolbar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the toolbar object, whose visibility can be toggled in the window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.top</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the topmost window in the window hierarchy.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.window</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the current window.</Body>
</CELL>
</ROW>
</TABLE>
<Head2>
Methods</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.alert()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Displays an alert dialog.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.back()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Moves back one in the window history.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.blur()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Sets focus away from the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.captureEvents()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Registers the window to capture all events of the specified type.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.clearInterval()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Clears a delay that’s been set for a specific function.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.clearTimeout()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Clears the delay set by <Bold>
window.setTimeout()</Bold>
.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.close()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Closes the current window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.confirm()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Displays a dialog with a message that the user needs to respond to.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.dump()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Writes a message to the console.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.escape()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Encodes a string.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.focus()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Sets focus on the current window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.forward()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Moves the window one document forward in the history.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.GetAttention()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Flashes the application icon.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.getSelection()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the selection object representing the selected item(s).</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.home()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the browser to the home page.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.moveBy()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Moves the current window by a specified amount.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.moveTo()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Moves the window to the specified coordinates.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.open()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Opens a new window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.print()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Prints the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.prompt()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the text entered by the user in a prompt dialog.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.releaseEvents()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Releases the window from trapping events of a specific type.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.resizeBy()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Resizes the current window by a certain amount.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.resizeTo()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Dynamically resizes window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scroll()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Scrolls the window to a particular place in the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollBy()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Scrolls the document in the window by the given amount.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollByLines()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Scrolls the document by the given number of lines.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollByPages()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Scrolls the current document by the specified number of pages.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollTo()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Scrolls to a particular set of coordinates in the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.setCursor()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Changes the cursor.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.setInterval()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Set a delay for a specific function.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.setTimeout()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Sets a delay for executing a function.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.sizeToContent()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Sizes the window according to its content.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.stop()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
This method stops window loading.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.unescape()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Unencodes a value that has been encoded in hexadecimal (e.g., a cookie).</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.updateCommands()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
</TABLE>
<Head2>
Event Handlers</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onabort</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for abort events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onblur</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for blur events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onchange</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for change events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onclick</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for click events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onclose</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for handling the window close event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.ondragdrop</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for drag and drop events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onerror</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for errors raised on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onfocus</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for focus events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onkeydown</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for keydown events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onkeypress</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for keypress events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onkeyup</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for keyup events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onload</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for window loading.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onmousedown</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for mousedown events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onmousemove</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for mousemove events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onmouseout</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for mouseout events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onmouseover</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for mouseover events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onmouseup</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for mouseup events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onpaint</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for paint events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onreset</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for reset events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onresize</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for window resizing</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onscroll</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for window scrolling.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onselect</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for window selection.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onsubmit</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for submits on window forms</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onunload</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for unload events on the window.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head1>
window.
alert()</Head1>
<Body>
Display an alert dialog with the specified text.</Body>
<Head3>
Syntax</Head3>
<Code>
window.alert(text)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
text</Code>
is a string of the text you want displayed in the alert dialog.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.alert(“I’m a Scorpio!”);</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
<DIV>
<IMAGE xml:link="simple" href="alert.gif" show="embed" actuate="auto"/>
</DIV>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The alert dialog should be used for messages which do not require any response of the part of the user. See also <Bold>
window.confirm()</Bold>
, <Bold>
window.prompt()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
_content</Head1>
<Body>
Returns a reference to the content element in the current window.</Body>
<Head3>
Syntax</Head3>
<Code>
cHolder = window._content</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
cHolder</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// for HTML &lt;iframe</CellCode>
<CellCode>
//    type=”content-primary” </CellCode>
<CellCode>
//    src=”blur.html” /&gt;</CellCode>
<CellCode>
function cont() {</CellCode>
<CellCode>
loc = window._content.location.href;</CellCode>
<CellCode>
alert(loc);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If there is no particular element or subframe given as the content element, this method returns a reference to the window itself. Also note that this does not give you a very good way to refer to a number of different content elements. In this case, you may want to use the <Code>
getElementById</Code>
method to get references to the subframes you want.</Body>
<Body>
This property is effectively the same as window.content. It’s generally used to get the content from a browser window.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
back()</Head1>
<Body>
Returns the window to the previous item in the history.</Body>
<Head3>
Syntax</Head3>
<Code>
window.back()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goBack() {</CellCode>
<CellCode>
if ( canGoBack )</CellCode>
<CellCode>
window.back();</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
blur()</Head1>
<Body>
Shifts focus away from the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.blur()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.blur();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The window.blur() method is the programmatic equivalent of the user shifting focus away from the current window.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
captureEvents()</Head1>
<Body>
Registers the window to capture all events of the specified type.</Body>
<Head3>
Syntax</Head3>
<Code>
window.captureEvents(Event.eventType)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
eventType</Code>
is a string with one of the following values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Abort</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Load</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Blur</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseDown</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Click</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseMove</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Change</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseOut</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
DblClick</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseOver</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
DragDrop</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseUp</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Error</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Move</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Focus</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Reset</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
KeyDown</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Resize</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
KeyPress</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Select</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
KeyUp</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Submit</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Unload</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function reg() {</CellCode>
<CellCode>
window.captureEvents(Event.CLICK);</CellCode>
<CellCode>
window.onclick = hit;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
function hit() {</CellCode>
<CellCode>
alert('hit');</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;body onload=&quot;reg();&quot;&gt;</CellCode>
<CellCode>
&lt;button&gt;test&lt;/button&gt;</CellCode>
<CellCode>
&lt;div id=&quot;d&quot;&gt;&amp;nbsp;&lt;/div&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Events raised in the DOM by user activity (such as clicking buttons or shifting focus away from the current document) generally pass through the high-level <Code>
window</Code>
and <Code>
document</Code>
objects first before arriving at the object that initiated the event. </Body>
<Body>
When you call the captureEvents() method on the <Code>
window</Code>
, events of the type you specify (for example, <Code>
Event.CLICK</Code>
) no longer pass through to “lower” objects in the hierarchy. In order for events to “bubble up” in the way that they normally do, you must call releaseEvents() on the window to keep it from trapping events.</Body>
<Body>
Also note that the eventType parameter is case-insensitive, so you can also say, for example, <Code>
window.releaseEvents(Event.KeyPress)</Code>
.</Body>
<Body>
See also <Bold>
window.releaseEvents()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
clearInterval()</Head1>
<Body>
Clears a delay that’s been set for a specific function.</Body>
<Head3>
Syntax</Head3>
<Code>
window.clearInterval(intervalID)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
intervalID</Code>
is the ID of the specific interval you want to clear.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.clearInterval(animID);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.setInterval()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
clearTimeout()</Head1>
<Body>
Clears the delay set by <Bold>
window.setTimeout()</Bold>
.</Body>
<Head3>
Syntax</Head3>
<Code>
window.clearTimeout(timeoutID)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
timeoutID</Code>
is the ID of the timeout you wish you clear.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.clearTimeout(inactive_ID);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The ID for the timeout is returned by the <Bold>
window.setTimeout()</Bold>
function.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
close()</Head1>
<Body>
Closes this window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.close()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.close();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
closed</Head1>
<Body>
This property indicates whether the current window is closed or not.</Body>
<Head3>
Syntax</Head3>
<Code>
bRes = window.closed</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bRes</Code>
is a boolean value.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( window.opener.closed ) {</CellCode>
<CellCode>
// the window that opened me has been closed!</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Addtional notes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
Components</Head1>
<Body>
Returns a reference to the XPCOM components that are installed in Mozilla/Netscape.</Body>
<Head3>
Syntax</Head3>
<Code>
componentList = window.Components</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
componentList</Code>
is a read-only array of XPCOM components accessible via XPConnect.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// use the Components property to get a particular class</CellCode>
<CellCode>
// and a related interface</CellCode>
<CellCode>
var cp = Components.classes['@mozilla.org/preferences;1']</CellCode>
<CellCode>
var icp = Components.interfaces.nsIPref;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
Components</Code>
property does not work from HTML and XML pages loaded as content in the browser (i.e., it returns “<Code>
[object nsXPCComponents]”</Code>
, which can’t be further interrogated), since those pages are not typically considered part of the trusted application chrome and content that can use XPConnect. From trusted scripts, however, <Code>
Components</Code>
can be used to get and use the XPCOM objects which the browser itself uses for its internal functionality, as in the example above.</Body>
<Body>
See the following document for more information about the <Code>
Components</Code>
object:</Body>
<ListBulletList>
<ListBullet>
http://www.mozilla.org/scriptable/components_object.html</ListBullet>
</ListBulletList>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
confirm()</Head1>
<Body>
Displays a dialog with a message that the user needs to respond to.</Body>
<Head3>
Syntax</Head3>
<Code>
result = window.confirm(text)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
text</Code>
is a string.</Indent>
<Indent>
<Code>
result</Code>
is a boolean value indicating whether OK or Cancel was selected.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( window.confirm(“Want to see my mood ring?”)) {</CellCode>
<CellCode>
window.open(“mood.html”, “mood ring”, ““);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
<DIV>
<IMAGE xml:link="simple" href="confirm.gif" show="embed" actuate="auto"/>
</DIV>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Unlike the alert dialog, a confirm dialog has OK and Cancel buttons, and returns true only when the user confirms the choice being presented by clicking OK. The return value of window.confirm() is often tested as part of a conditional block, as in the example above. See also <Bold>
window.alert()</Bold>
, <Bold>
window.prompt()</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
controllers</Head1>
<Body>
Returns the XUL controllers of the chrome window.</Body>
<Head3>
Syntax</Head3>
<Code>
controllers = window.controllers</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
controllers</Code>
is an array of objects of the type <Code>
XUL Controllers</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function con() {</CellCode>
<CellCode>
alert(window.controllers);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
// displays: [object XULControllers]</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
crypto</Head1>
<Body>
Returns the browser <Code>
crypto</Code>
object, which can then be used to manipulate various browser security features.</Body>
<Head3>
Syntax</Head3>
<Code>
syntax code</Code>
<Head3>
Parameters</Head3>
<Indent>
blah is a blah.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example code here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Addtional notes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
defaultStatus</Head1>
<Body>
Gets/sets the status bar text for the given window.</Body>
<Head3>
Syntax</Head3>
<Code>
sMsg = window.defaultStatus</Code>
<Code>
window.defaultStatus = sMsg</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sMsg</Code>
is a string containing the text to be displayed by default in the statusbar.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;body onload=&quot;window.defaultStatus='hello!';&quot;/&gt;</CellCode>
<CellCode>
&lt;button onclick=&quot;window.confirm('Are you sure you want to quit?');&quot;&gt;confirm&lt;/button&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/htm&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
To set the status once the window has been opened, use <Bold>
window.status</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
directories</Head1>
<Body>
Returns the <Code>
window</Code>
directories toolbar object.</Body>
<Head3>
Syntax</Head3>
<Code>
dirBar = window.directories</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
dirBar</Code>
is an object of the type <Code>
barProp</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function dirs() {</CellCode>
<CellCode>
alert(window.directories);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
document</Head1>
<Body>
Returns a reference to the document that the window contains.</Body>
<Head3>
Syntax</Head3>
<Code>
doc = window.document</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
doc</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
doc= window.document;</CellCode>
<CellCode>
window.dump(doc.title);</CellCode>
<CellCode>
// prints the current document’s title to the console.</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
dump()</Head1>
<Body>
Prints messages to the console.</Body>
<Head3>
Syntax</Head3>
<Code>
window.dump(text)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
text</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
doc= window.document;</CellCode>
<CellCode>
window.dump(doc.title);</CellCode>
<CellCode>
// prints the current document’s title to the console.</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If you have no console available, this method prints nothing but doesn’t raise an error. window.dump is commonly used to print statements to the console can be used to debug JavaScript used to access the DOM.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
escape()</Head1>
<Body>
Encodes a string.</Body>
<Head3>
Syntax</Head3>
<Code>
sEscaped = window.escape(sRegular)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sEscaped</Code>
is the endoded string.</Indent>
<Indent>
<Code>
sRegular</Code>
is a regular string</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
alert(escape(“http://www.cnn.com”));</CellCode>
<CellCode>
// displays: http%3Awww.cnn.com</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The escape() method converts special characters (any characters that are not regular text or numbers) into hexadecimal characters, which is especially necessary for setting the values of cookies.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
focus()</Head1>
<Body>
Sets focus on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.focus()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if (clicked) { window.focus(); }</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
forward()</Head1>
<Body>
Moves the window one document forward in the history.</Body>
<Head3>
Syntax</Head3>
<Code>
window.forward()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goForward() {</CellCode>
<CellCode>
if ( canGoForward)</CellCode>
<CellCode>
window.forward();</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.frames</Head1>
<Body>
Returns an array of the subframes in the current window.</Body>
<Head3>
Syntax</Head3>
<Code>
frameList = window.frames</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
frameList</Code>
is an array of <Code>
frame</Code>
objects.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
frames = window.frames;</CellCode>
<CellCode>
for (var i = 0; i &lt; frames.length; i++) {</CellCode>
<CellCode>
// do something with each subframe as frames[i]</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellHeading>
window.
GetAttention()</CellHeading>
</CELL>
</ROW>
</TABLE>
<Body>
Flashes the application icon to get the user’s attention.</Body>
<Head3>
Syntax</Head3>
<Code>
window.GetAttention()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// from Chatzilla</CellCode>
<CellCode>
function notifyAttention (source)</CellCode>
<CellCode>
{</CellCode>
<CellCode>
if (typeof source != &quot;object&quot;)</CellCode>
<CellCode>
source = client.viewsArray[source].source;</CellCode>
<CellCode>
</CellCode>
<CellCode>
if (client.currentObject != source)</CellCode>
<CellCode>
{</CellCode>
<CellCode>
var tb = getTabForObject (source, true);</CellCode>
<CellCode>
var vk = Number(tb.getAttribute(&quot;viewKey&quot;));</CellCode>
<CellCode>
</CellCode>
<CellCode>
tb.setAttribute (&quot;state&quot;, &quot;attention&quot;);</CellCode>
<CellCode>
client.activityList[vk] = &quot;!&quot;;</CellCode>
<CellCode>
updateTitle();</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
if (client.FLASH_WINDOW)</CellCode>
<CellCode>
window.GetAttention();</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
On windows and linux, the icon flashes in the system tray. On macintosh, the icon in the upper right corner of the desktop flashes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellHeading>
window.
getSelection()</CellHeading>
</CELL>
</ROW>
</TABLE>
<Body>
Returns a <Code>
selection</Code>
object representing the selected item(s).</Body>
<Head3>
Syntax</Head3>
<Code>
selection = window.getSelection()</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
selection</Code>
is a <Code>
selection</Code>
object.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function cutThis() {</CellCode>
<CellCode>
selObj = window.getSelection();</CellCode>
<CellCode>
selText = selObj.toSting();</CellCode>
<CellCode>
if len(selText) ...</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
selection</Code>
object returned by this method is automatically converted to a string as needed. If you asked for the <Code>
len</Code>
of <Code>
selObj</Code>
in the listing above, for example, the method would return the length of the object converted into a string (using the selection object’s own <Code>
toString()</Code>
method. But you can also get the ranges in the selection and you can navigate through the selected nodes using these range objects.</Body>
<Body>
See the <Code>
nsISelection</Code>
interface in mozilla for more information about selection objects and the services they provide for manipulating selections:</Body>
<Body>
http://lxr.mozilla.org/seamonkey/source/content/base/public/nsISelection.idl</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
history</Head1>
<Body>
Returns a reference to the <Code>
history</Code>
object, which provides an interface for manipulating the browser history.</Body>
<Head3>
Syntax</Head3>
<Code>
historyObj = window.history</Code>
<Head3>
Parameters</Head3>
<Indent>
historyObject is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
h = window.history;</CellCode>
<CellCode>
if ( h.length ) { // if there is a history</CellCode>
<CellCode>
h.back();     // equivalent to clicking back button</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
history</Code>
object provides the following interface:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
current</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
back()</Code>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
length</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
forward()</Code>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
next</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
go()</Code>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
previous</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
</Code>
</CELL>
</ROW>
</TABLE>
<Body>
You can call access this interface from the <Code>
window</Code>
object by calling, for example, <Code>
window.history.back()</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
home()</Head1>
<Body>
Returns the window to the home page.</Body>
<Head3>
Syntax</Head3>
<Code>
window.home()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goHome() {</CellCode>
<CellCode>
window.home();</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
innerHeight</Head1>
<Body>
Gets/sets the height of the content area of the browser window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.innerHeight = iPx</Code>
<Code>
iPx = window.innerHeight</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iPx</Code>
is the number of pixels as an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.innerHeight = 400;</CellCode>
<CellCode>
window.innerWidth = 400;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.innerWidth</Bold>
, <Bold>
window.outerHeight</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
innerWidth</Head1>
<Body>
Gets/sets the height of the content area of the browser window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.innerWidth = iPx</Code>
<Code>
iPx = window.innerWidth</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iPx</Code>
is the number of pixels as an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.innerHeight = 400;</CellCode>
<CellCode>
window.innerWidth = 400;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.innerHeight</Bold>
, <Bold>
window.outerHeight</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
length</Head1>
<Body>
Returns the number of frames in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
ifrms = window.length</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
ifrms</Code>
is the number of frames as an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( window.length )</CellCode>
<CellCode>
// this is a document with subframes</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
location</Head1>
<Body>
Gets/sets the location, or current URL, of the window object.</Body>
<Head3>
Syntax</Head3>
<Code>
url = window.location</Code>
<Code>
window.location = url</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
url</Code>
is a string containing the URL for the specified location.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function getNews() {</CellCode>
<CellCode>
window.location= “http://www.cnn.com”;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
// in html: &lt;button onclick=”getNews();”&gt;News&lt;/button&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
locationbar</Head1>
<Body>
Returns the <Code>
locationbar </Code>
object, whose visibility can be toggled in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
lBarObj = window.locationbar</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
lBarObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<Body>
The following complete HTML example shows way that the visible property of the various “bar” objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;Various DOM Tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
// changing bar states on the existing window</CellCode>
<CellCode>
netscape.security.PrivilegeManager.</CellCode>
<CellCode>
enablePrivilege(&quot;UniversalBrowserWrite&quot;);</CellCode>
<CellCode>
window.locationbar.visible=</CellCode>
<CellCode>
!window.locationbar.visible;</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;p&gt;Various DOM Tests&lt;/p&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When you load the example page above, the browser displays the following dialog:</Body>
<DIV>
<IMAGE xml:link="simple" href="dom_book-6.gif" show="embed" actuate="auto"/>
</DIV>
<Body>
To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page.</Body>
<Body>
See also: <Bold>
window.locationbar</Bold>
, <Bold>
window.menubar</Bold>
, <Bold>
window.personalbar</Bold>
, <Bold>
window.scrollbars</Bold>
, <Bold>
window.statusbar</Bold>
, <Bold>
window.toolbar</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
menubar</Head1>
<Body>
Returns the <Code>
menubar</Code>
object, whose visibility can be toggled in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
mBarObj = window.menubar</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
mBarObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<Body>
The following complete HTML example shows way that the visible property of the various “bar” objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;Various DOM Tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
// changing bar states on the existing window</CellCode>
<CellCode>
netscape.security.PrivilegeManager.</CellCode>
<CellCode>
enablePrivilege(&quot;UniversalBrowserWrite&quot;);</CellCode>
<CellCode>
window.menubar.visible=!window.menubar.visible;</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;p&gt;Various DOM Tests&lt;/p&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When you load the example page above, the browser displays the following dialog:</Body>
<DIV>
<IMAGE xml:link="simple" href="dom_book-7.gif" show="embed" actuate="auto"/>
</DIV>
<Body>
To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page.</Body>
<Body>
See also: <Bold>
window.locationbar</Bold>
, <Bold>
window.menubar</Bold>
, <Bold>
window.personalbar</Bold>
, <Bold>
window.scrollbars</Bold>
, <Bold>
window.statusbar</Bold>
, <Bold>
window.toolbar</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
moveBy()</Head1>
<Body>
Moves the current window by a specified amount.</Body>
<Head3>
Syntax</Head3>
<Code>
window.moveBy(deltaX, deltaY)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
deltaX</Code>
is the amount of pixels to move the window horizontally.</Indent>
<Indent>
<Code>
deltaY</Code>
is the amount of pixels to move the window vertically.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function budge() {</CellCode>
<CellCode>
moveBy(10, -10);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
You can use negative numbers as parameters for this function. This function makes a relative move while <Bold>
window.moveTo()</Bold>
makes an absolute move.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
moveTo()</Head1>
<Body>
Moves the window to the specified coordinates.</Body>
<Head3>
Syntax</Head3>
<Code>
window.moveTo(x, y)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
x</Code>
is the horizontal coordinate to be moved to.</Indent>
<Indent>
<Code>
y </Code>
is the vertical coordinate to be moved to.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function origin() {</CellCode>
<CellCode>
// moves to top left corner of screen</CellCode>
<CellCode>
window.moveTo(0, 0) </CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This function moves the window absolutely while <Bold>
window.moveBy()</Bold>
moves the window relative to its current location.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
name</Head1>
<Body>
Gets/sets the name of the window.</Body>
<Head3>
Syntax</Head3>
<Code>
sName = window.name</Code>
<Code>
window.name = sName</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
name</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.name = “lab_view”;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The name of the window is used primarily for setting targets for hyperlinks and forms. Windows do not need to have names.</Body>
<Body>
See also <Bold>
window.name</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator</Head1>
<Body>
Returns a reference to the <Code>
navigator</Code>
object.</Body>
<Head3>
Syntax</Head3>
<Code>
nav = window.navigator</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
nav</Code>
is a <Code>
navigator</Code>
object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
nav = window.navigator;</CellCode>
<CellCode>
if ( nav.language != en ) {</CellCode>
<CellCode>
res = window.confirm(lang_warn);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
navigator</Code>
object is used to examine the actual browser being used. It includes properties like <Code>
appName</Code>
, <Code>
appCore</Code>
, <Code>
plugins</Code>
(described below) for getting information about the browser itself.</Body>
<Body>
All of the properties and methods available from <Code>
window.navigator</Code>
can also be referenced simple with <Code>
navigator</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
appCodeName</Head1>
<Body>
Returns the internal “code” name of the current browser.</Body>
<Head3>
Syntax</Head3>
<Code>
codeName = window.navigator.appCodeName</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
codeName</Code>
is the internal name of the browser as a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
dump(window.navigator.appCodeName);</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Mozilla, Netscape 6, and IE5 all use the internal name “Mozilla.”</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
appName</Head1>
<Body>
Returns the official name of the browser.</Body>
<Head3>
Syntax</Head3>
<Code>
appName = window.navigator.appName</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
appName</Code>
is the name of the browser as a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
dump(window.navigator.appName);</CellCode>
<CellCode>
// prints “Navigator” to the console for NS6</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
appVersion</Head1>
<Body>
Returns the version of the browser as a string.</Body>
<Head3>
Syntax</Head3>
<Code>
ver = window.navigator.appVersion</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
ver</Code>
is the version number of the browser as a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( navigator.appVersion.charAt(0) == “5” ) {</CellCode>
<CellCode>
// browser is putatively a v5 browser</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Bold>
window.navigator.userAgent</Bold>
property also contains the version number (example: “Mozilla/5.0 (Windows; U; Win98; en-US; rv:0.9.2) Gecko/20010725 Netscape 6/6.1”), but you should be aware of how easy it is to change the user agent string and “spoof” other browsers, platforms, or user agents, and also how cavalier the browser vendor themselves are with these properties.</Body>
<Body>
The window.navigator.appVersion and window.navigator.userAgent properties are quite often used in “browser sniffing” code: scripts that attempt to find out what kind of browser you are using and adjust pages accordingly.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
cookieEnabled</Head1>
<Body>
Returns a boolean value indicating whether cookies are enabled or not.</Body>
<Head3>
Syntax</Head3>
<Code>
res = window.navigator.cookieEnabled</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
res</Code>
is a boolean True or False.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if (window.navigator.cookieEnabled) {</CellCode>
<CellCode>
// set a cookie</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
javaEnabled()</Head1>
<Body>
This method indicates whether the current browser is Java-enabled or not.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = window.navigator.javaEnabled</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean value.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( window.navigator.javaEnabled() ) {</CellCode>
<CellCode>
// browser has java</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The return value for this method indicates whether the preference that controls Java is on or off--not whether the browser offers Java support in general. </Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
language</Head1>
<Body>
Returns a string representing the language version of the browser.</Body>
<Head3>
Syntax</Head3>
<Code>
lang = window.navigator.language</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
lang</Code>
is a two character string (e.g., “en” or “ja”) representing the language version.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( window.navigator.language != “en” ) {</CellCode>
<CellCode>
doLangSelect(window.navigator.language);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property also shows up as part of the <Bold>
window.navigator.userAgent</Bold>
string.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
mimeTypes</Head1>
<Body>
Returns a list of the MIME types supported by the browser.</Body>
<Head3>
Syntax</Head3>
<Code>
syntax code</Code>
<Head3>
Parameters</Head3>
<Indent>
blah is a blah.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example code here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Addtional notes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
oscpu</Head1>
<Body>
Returns a string that identifies the current operating system.</Body>
<Head3>
Syntax</Head3>
<Code>
oscpuInfo = window.navigator.oscpu</Code>
<Head3>
Parameters</Head3>
<Indent>
oscpu is a string that takes the following form.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function osInfo() {</CellCode>
<CellCode>
alert(window.navigator.oscpu);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
// returns: Win98</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
platform</Head1>
<Body>
Returns a string representing the platform of the browser.</Body>
<Head3>
Syntax</Head3>
<Code>
plat = window.navigator.platform</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
plat</Code>
is a string with one of the following values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Win95</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Windows 95</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
WinNT</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Windows NT</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
MacPPC</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Macintosh PowerPC</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
SunOS</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Solaris</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
....</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function osInfo() {</CellCode>
<CellCode>
alert(window.navigator.platform);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
// returns: win32</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
plugins</Head1>
<Body>
Returns an array of the plugins installed in the browser.</Body>
<Head3>
Syntax</Head3>
<Code>
plugins = window.navigator.plugins</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
plugins</Code>
is an array of <Code>
plugin</Code>
objects.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function pluginInfo() {</CellCode>
<CellCode>
alert(window.navigator.plugins.item(0).name);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
// returns “Shockwave for Director”</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The plugin objecct exposes a small interface for getting information about the various plugins installed in your browser.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
product</Head1>
<Body>
This property returns the product name of the current browser.</Body>
<Head3>
Syntax</Head3>
<Code>
productName = window.navigator.product</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
productName</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function prod() {</CellCode>
<CellCode>
dt = document.getElementById(&quot;d&quot;).childNodes[0]; </CellCode>
<CellCode>
dt.data = window.navigator.userAgent;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;button onclick=&quot;prod();&quot;&gt;product&lt;/button&gt;</CellCode>
<CellCode>
&lt;div id=&quot;d&quot;&gt;&amp;nbsp;&lt;/div&gt;</CellCode>
<CellCode>
// returns “Gecko”</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
product is that portion of the full user agent string that comes directly after the platform. In the user agent for Netscape 6.1, for example, the product is “Gecko” and the full agent string is the following:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Mozilla/5.0 (Windows; U; Win98; en-US; rv:0.9.2) Gecko/20010725 Netscape6/6.1</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
productSub</Head1>
<Body>
productSub returns the build number of the current browser.</Body>
<Head3>
Syntax</Head3>
<Code>
prodSub = window.navigator.productSub</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
prodSub</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function prodsub() {</CellCode>
<CellCode>
dt = document.getElementById(&quot;d&quot;).childNodes[0]; </CellCode>
<CellCode>
dt.data = window.navigator.productSub;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;button onclick=&quot;prodsub();&quot;&gt;productSub&lt;/button&gt;</CellCode>
<CellCode>
// returns: 20010725</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
On IE, this property returns <Code>
undefined</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
userAgent</Head1>
<Body>
Returns the user agent string for the current browser.</Body>
<Head3>
Syntax</Head3>
<Code>
uaString = window.navigator.userAgent</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
uaString</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.navigator.userAgent</CellCode>
<CellCode>
// returns Mozilla/5.0 (Windows; U; Win98; en-US;    rv:0.9.2) Gecko/20010725 Netscape6/6.1</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
vendor</Head1>
<Body>
Returns the name of the browser vendor for the current browser.</Body>
<Head3>
Syntax</Head3>
<Code>
venString = window.navigator.vendor</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
venString</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.navigator.vendor</CellCode>
<CellCode>
// returns “Netscape6”</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
vendor is another portion of the userAgent string. The product and the vendor can be different--as when Netscape 6.1 uses the Gecko product to do its rendering. </Body>
<Body>
See also <Bold>
window.navigator.product</Bold>
, <Bold>
window.navigator.userAgent</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
vendorSub</Head1>
<Body>
vendorSub is the substring of the vendor having to do with the vendor version number.</Body>
<Head3>
Syntax</Head3>
<Code>
venSub = window.navigator.vendorSub</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
venSub</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.navigator.vendorSub</CellCode>
<CellCode>
// returns “6.1” where the vendor part of userAgent is</CellCode>
<CellCode>
// Netscape6/6.1</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
vendorSub is yet another component of the full user agent string. It refers to the version number that the vendor themselves have given the current browser (as opposed to the version of the product, which may be different). In Netscape 6.1, the productSub is given as “5.0” and the vendorSub is “6.1.”</Body>
<Body>
See also <Bold>
window.navigator.productSub</Bold>
, <Bold>
window.navigator.userAgent</Bold>
, <Bold>
window.navigator.vendor</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onabort</Head1>
<Body>
An event handler for abort events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onabort = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onabort = resetThatServerThing</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onblur</Head1>
<Body>
The onblur property returns the onBlur event handler code, if any, that exists on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onblur = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to the function to be executed.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
warnFunc = window.onblur;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The blur event is raised when a window loses focus.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
window.
onchange</Head1>
<Body>
An event handler for change events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onchange = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onchange = resetThatServerThing</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onclick</Head1>
<Body>
An event handler for click events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onclick = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onclick = doPopup;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The click event is raised when the user clicks on the window.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onclose</Head1>
<Body>
An event handler for close events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onclose = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onclose = resetThatServerThing</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
ondragdrop</Head1>
<Body>
An event handler for drag &amp; drop events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.ondragdrop = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.ondragdrop = examineItem;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onerror</Head1>
<Body>
An event handler for error events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onerror = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onerror = null;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The error event is raised when an error occurs in the script. The example above prevents error dialogs from displaying--which is the window’s normal behavior--by overriding the default event handler for error events that go to the window.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onfocus</Head1>
<Body>
An event handler for focus events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onfocus = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onfocus = startTimer;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The focus event is raised when the user sets focus on the current window.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onkeydown</Head1>
<Body>
An event handler for the keydown event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onkeydown = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onkeydown = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The keydown event is raised when the user presses any key.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onkeypress</Head1>
<Body>
An event handler for the keypress event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onkeypress = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onkeypress = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The keypress event is raised when the user presses and releases any key on the keyboard.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onkeyup</Head1>
<Body>
An event handler for the keyup event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onkeyup = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onkeyup = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The keyup event is raised when a key that has been pressed is released.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onload</Head1>
<Body>
An event handler for the load event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onload = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onload = init;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The load event is fired at the end of the document loading process. At this point, all of the objects in the document are in the DOM.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onmousedown</Head1>
<Body>
An event handler for the mousedown event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onmousedown = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onmousedown = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mousedown event is raised when the user clicks the left mouse button anywhere in the document.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onmousemove</Head1>
<Body>
An event handler for the mousemove event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onmousemove = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onmousemove = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mousemove event is raised when the user moves the mouse at all.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onmouseout</Head1>
<Body>
An event handler for the mousedown event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onmouseout = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onmouseout = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mouseout event is raised when the mouse leaves the area of the specified element (in this case the window itself).</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onmouseover</Head1>
<Body>
An event handler for the mouseover event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onmouseover = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onmouseover = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mouseover event is raised when the moves over the current element (in this case the window itself).</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onmouseup</Head1>
<Body>
An event handler for the mousedown event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onmousedown = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onmousedown = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mousedown event is raised when the user clicks the left mouse button anywhere in the document.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onpaint</Head1>
<Body>
An event handler for the paint event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onpaint = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onpaint = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The paint event is raised when the window is rendered. This event occurs after the load event for a window, and reoccurs each time the window needs to be rerendered, as when another window obscures it and is then cleared away.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onreset</Head1>
<Body>
An event handler for the reset event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onreset = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function reg() {</CellCode>
<CellCode>
window.captureEvents(Event.RESET);</CellCode>
<CellCode>
window.onreset = hit;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
function hit() {</CellCode>
<CellCode>
alert('hit');</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;body onload=&quot;reg();&quot;&gt;</CellCode>
<CellCode>
&lt;form&gt;</CellCode>
<CellCode>
&lt;input type=&quot;reset&quot; value=&quot;reset&quot; /&gt;</CellCode>
<CellCode>
&lt;/form&gt;</CellCode>
<CellCode>
&lt;div id=&quot;d&quot;&gt;&amp;nbsp;&lt;/div&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The reset event is raised when the user clicks a reset button in a form
(<Code>
&lt;input type=”reset”/&gt;</Code>
).</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onresize</Head1>
<Body>
An event handler for the resize event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onresize = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onresize = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The resize event is fired when the window is resized.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onscroll</Head1>
<Body>
An event handler for the scroll event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onscroll = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onscroll = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The scroll event is raised when the window is scrolled.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onselect</Head1>
<Body>
An event handler for the select event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onselect = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onselect = textToCell;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The select event is raised when text in the window is selected.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onsubmit</Head1>
<Body>
An event handler for the submit event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onsubmit = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function reg() {</CellCode>
<CellCode>
window.captureEvents(Event.SUBMIT);</CellCode>
<CellCode>
window.onsubmit = hit;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
function hit() {</CellCode>
<CellCode>
alert('hit');</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;body onload=&quot;reg();&quot;&gt;</CellCode>
<CellCode>
&lt;form&gt;</CellCode>
<CellCode>
&lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;</CellCode>
<CellCode>
&lt;/form&gt;</CellCode>
<CellCode>
&lt;div id=&quot;d&quot;&gt;&amp;nbsp;&lt;/div&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The submit event is raised when the user clicks a submit button in a form
(<Code>
&lt;input type=”submit”/&gt;</Code>
). </Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onunload</Head1>
<Body>
An event handler for the unload event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onunload = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onunload = saveStuff;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The unload event is raised as one document is unloaded and another is about to be loaded into the browser.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
open()</Head1>
<Body>
Opens a new window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.open(“URL”, “name” [, “windowfeatures”])</Code>
<Head3>
Parameters</Head3>
<Indent>
URL is a string that points to the window you want to open.</Indent>
<Indent>
name is a string that names the new window.</Indent>
<Indent>
windowfeatures is one or more of the following in a comma-separated list:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
toolbar</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Toolbar is present</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
location</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Locationbar is present</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
directories</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
status</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
menubar</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
XXX have to update this whole list XXX</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
scrollbars</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
resizable</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
copyhistory</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
width</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
height</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.open(“btest2.html”, “bwin”, “toolbar,status”);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The name attribute is not a reference or the title of the window. It is used as a target to links and forms.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
opener</Head1>
<Body>
Returns a reference to the window that opened this current window.</Body>
<Head3>
Syntax</Head3>
<Code>
wObj = window.opener</Code>
<Head3>
Parameters</Head3>
<Indent>
wObj is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if window.opener != indexWin {</CellCode>
<CellCode>
referToTop(window.opener);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When a window is opened from another window, it maintains a reference to that first window as <Code>
window.opener</Code>
. If the current window has no opener, this method returns <Code>
NULL</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
outerHeight</Head1>
<Body>
Gets/sets the height of the outside of the browser window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.outerHeight = iPx</Code>
<Code>
iPx = window.outerHeight</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iPx</Code>
is an integer representing the number of pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.outerHeight = ( window.screen.availHeight );</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
As the snippet above demonstrates, the outerHeight property is very often used to size the browser to the available screen area. Contrast this with the innerHeight property, which controls the size of the content area of the browser.</Body>
<Body>
See also <Bold>
window.screen</Bold>
, <Bold>
window.innerHeight</Bold>
, <Bold>
window.outerWidth</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
outerWidth</Head1>
<Body>
Gets/sets the width of the outside of the browser window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.outerWidth = iPx</Code>
<Code>
iPx = window.outerWidth</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iPx</Code>
is an integer representing the number of pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.outerWidth = ( window.screen.availWidth );</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
As the snippet above demonstrates, the outerWidth property is very often used to size the browser to the available screen area. Contrast this with the innerWidth property, which controls the size of the content area of the browser.</Body>
<Body>
See also <Bold>
window.screen</Bold>
, <Bold>
window.innerHeight</Bold>
, <Bold>
window.outerHeight</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
pageXOffset
</Head1>
<Body>
Gets the amount of content that has been hidden by scrolling to the right.</Body>
<Head3>
Syntax</Head3>
<Code>
hScroll = window.pageXOffset</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
hScroll</Code>
is the number of pixels scrolled as an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
var hScroll = pageXOffset;</CellCode>
<CellCode>
var vScroll = pageYOffset;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the user has scrolled to the right and 200 pixels of the content is hidden by this, then the pageXOffset property returns 200.</Body>
<Body>
<Bold>
window.pageYOffset</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
pageYOffset</Head1>
<Body>
Gets the amount of content that has been hidden by scrolling down.</Body>
<Head3>
Syntax</Head3>
<Code>
vScroll = window.pageYOffset</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
vScroll</Code>
is the number of pixels as an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
var hScroll = pageXOffset;</CellCode>
<CellCode>
var vScroll = pageYOffset;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the user has scrolled down and 400 pixels of the content is hidden by this, then the pageYOffset property returns 400.</Body>
<Body>
See also <Bold>
window.pageXOffset</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
parent</Head1>
<Body>
Returns a reference to the parent of the current window or subframe.</Body>
<Head3>
Syntax</Head3>
<Code>
pWin = window.parent</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
pWin</Code>
is an object reference to the parent window.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if window.parent != window.top</CellCode>
<CellCode>
// we’re deeper than one down</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When a window is loaded in a frameset, its parent is .</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
personalbar</Head1>
<Body>
Returns the <Code>
personalbar</Code>
object, whose visibility can be toggled in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
pBarObj = window.menubar</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
pBarObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<Body>
The following complete HTML example shows way that the visible property of the various “bar” objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;Various DOM Tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
// changing bar states on the existing window</CellCode>
<CellCode>
netscape.security.PrivilegeManager.</CellCode>
<CellCode>
enablePrivilege(&quot;UniversalBrowserWrite&quot;);</CellCode>
<CellCode>
window.personalbar.visible=</CellCode>
<CellCode>
!window.personalbar.visible;</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;p&gt;Various DOM Tests&lt;/p&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page.</Body>
<Body>
See also: <Bold>
window.locationbar</Bold>
, <Bold>
window.menubar</Bold>
, <Bold>
window.personalbar</Bold>
, <Bold>
window.scrollbars</Bold>
, <Bold>
window.statusbar</Bold>
, <Bold>
window.toolbar</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
pkcs11</Head1>
<Body>
Returns the <Code>
pkcs11</Code>
object , which can be used to install drivers other software associated with the pkcs11 protocol.</Body>
<Head3>
Syntax</Head3>
<Code>
pkcsObj = window.pkcs11</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
pkcsObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.pkcs11.addModule(sMod, secPath, 0, 0);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See the nsIDOMPkcs11.idl in the mozilla source for more information about how to manipulate <Code>
pkcs11</Code>
objects.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
print()</Head1>
<Body>
Prints the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
window.print()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.print();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None. </Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
prompt()</Head1>
<Body>
Returns the text entered by the user in a prompt dialog.</Body>
<Head3>
Syntax</Head3>
<Code>
syntax code</Code>
<Head3>
Parameters</Head3>
<Indent>
blah is a blah.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function pr() {</CellCode>
<CellCode>
sign = prompt(“What’s your sign?”);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
<DIV>
<IMAGE xml:link="simple" href="prompt.gif" show="embed" actuate="auto"/>
</DIV>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.alert()</Bold>
, <Bold>
window.confirm()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
prompter</Head1>
<Body>
Returns a reference to the prompt window, if any, currently displayed.</Body>
<Head3>
Syntax</Head3>
<Code>
prompt = window.prompter</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
prompt</Code>
is an object reference to the prompt window.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
prompt_window = window.prompter</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
releaseEvents()</Head1>
<Body>
Releases the window from trapping events of a specific type.</Body>
<Head3>
Syntax</Head3>
<Code>
window.releaseEvents(Event.eventType)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
eventType</Code>
is a string with one of the following values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Abort</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Load</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Blur</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseDown</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Click</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseMove</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Change</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseOut</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
DblClick</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseOver</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
DragDrop</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseUp</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Error</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Move</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Focus</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Reset</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
KeyDown</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Resize</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
KeyPress</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Select</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
KeyUp</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Submit</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Unload</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.releaseEvents(Event.KEYPRESS)</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that you can pass a list of events to this method using the following syntax: <Code>
window.releaseEvents(Event.KEYPRESS | Event.KEYDOWN | Event.KEYUP)</Code>
. Also note that the eventType parameter is case-insensitive, so you can also say, for example, <Code>
window.releaseEvents(Event.KeyPress)</Code>
.</Body>
<Body>
See also <Bold>
window.captureEvents()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
resizeBy()</Head1>
<Body>
Resizes the current window by a certain amount.</Body>
<Head3>
Syntax</Head3>
<Code>
window.resizeBy(xDelta, yDelta)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
xDelta</Code>
is the number of pixels to grow the window horizontally.</Indent>
<Indent>
<Code>
yDelta</Code>
is the number of pixels to grow the window vertically.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// shrink the window</CellCode>
<CellCode>
window.resizeBy(-200, -200);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This method resizes the window relative to its current size. To resize the window in absolute terms, use <Bold>
window.resizeTo()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
resizeTo()</Head1>
<Body>
Dynamically resizes window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.resizeTo(iWidth, iHeight)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iWidth</Code>
is an integer representing the new width in pixels.</Indent>
<Indent>
<Code>
iHeight</Code>
is an integer value representing the new height in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// function resizes the window to take up half</CellCode>
<CellCode>
// of the available screen.</CellCode>
<CellCode>
function halve() {</CellCode>
<CellCode>
window.resizeTo(window.screen.availWidth/2,      window.screen.availHeight/2);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.resizeBy()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen</Head1>
<Body>
Returns a reference to the <Code>
screen</Code>
object associated with the window.</Body>
<Head3>
Syntax</Head3>
<Code>
screenObj = window.screen</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
screenObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
s = window.screen;</CellCode>
<CellCode>
if ( s.colorDepth &lt; 8) {</CellCode>
<CellCode>
// use low-color version of page</CellCode>
<CellCode>
} else { </CellCode>
<CellCode>
// use regular, colorful page</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
screen</Code>
object is a special JavaScript object for controlling aspects of the screen on which the current window is being rendered. <Code>
screen</Code>
object properties such as <Code>
colorDepth</Code>
, <Code>
height</Code>
, and <Code>
availHeight</Code>
can be accessed from the <Code>
window</Code>
object by using properties like <Code>
window.screen.colorDepth</Code>
and others described below.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
availHeight</Head1>
<Body>
Returns the amount of vertical space available to the window on the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
iAvail = window.screen.availHeight</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iAvail</Code>
is an integer number representing the amount of space in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if window.screen.availHeight != window.screen.height {</CellCode>
<CellCode>
// something’s in the way!</CellCode>
<CellCode>
// use available to size window</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Addtional notes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
availLeft</Head1>
<Body>
Returns the first available pixel available from the left side of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
iAvail = window.screen.availLeft</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iAvail</Code>
is an integer representing the amount of space in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
setY = window.screen.height - window.screen.availTop;</CellCode>
<CellCode>
setX = window.screen.width - window.screen.availLeft;</CellCode>
<CellCode>
window.moveTo(setX, setY);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
In most cases, this property returns 0.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
availTop</Head1>
<Body>
Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.</Body>
<Head3>
Syntax</Head3>
<Code>
iAvail = window.screen.availTop</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iAvail</Code>
is an integer representing the amount of space in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
setY = window.screen.height - window.screen.availTop;</CellCode>
<CellCode>
setX = window.screen.width - window.screen.availLeft;</CellCode>
<CellCode>
window.moveTo(setX, setY);</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
In most cases, this property returns 0.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
availWidth</Head1>
<Body>
Returns the amount of horizontal space in pixels available to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
iAvail = window.screen.availWidth</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iAvail</Code>
is an integer representing the amount of space in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example code here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Addtional notes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
colorDepth</Head1>
<Body>
Returns the color depth of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
bitDepth = window.screen.colorDepth</Code>
<Head3>
Parameters</Head3>
<Indent>
bitDepth is an integer representing the color depth in bits.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// check the color depth of the screen</CellCode>
<CellCode>
if ( window.screen.colorDepth &lt; 8) {</CellCode>
<CellCode>
// use low-color version of page</CellCode>
<CellCode>
} else { </CellCode>
<CellCode>
// use regular, colorful page</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.screen.pixelDepth</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
height</Head1>
<Body>
Returns the height of the screen in pixels.</Body>
<Head3>
Syntax</Head3>
<Code>
iHeight = window.screen.height</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iHeight</Code>
is an integer representing the height in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if (window.screen.availHeight != window.screen.height) {</CellCode>
<CellCode>
// something is occupying some screen real estate!</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that not all of the height given by this property may be available to the window itself. Widgets such as taskbars or other special application windows that integrate with the OS (e.g., the Spinner player minimized to act like an additional toolbar on windows) may reduce the amount of space available to browser windows and other applications.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
left</Head1>
<Body>
Gets/sets the current distance in pixels from the left side of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
lLeft = window.screen.left</Code>
<Code>
window.screen.left = lLeft</Code>
<Head3>
Parameters</Head3>
<Indent>
lLeft is the number of pixels from the left side of the screen.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// move and resize the current window</CellCode>
<CellCode>
window.resizeTo(window.screen.availWidth/2);</CellCode>
<CellCode>
window.screen.left = 1;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Code>
window.screen.top</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
pixelDepth</Head1>
<Body>
Returns the bit depth of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
depth = window.screen.pixelDepth</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
depth</Code>
is the number of bits per pixel as an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// if there is not adequate bit depth</CellCode>
<CellCode>
// choose a simpler color</CellCode>
<CellCode>
if ( window.screen.pixelDepth &gt; 8 ) {</CellCode>
<CellCode>
document.style.color = “#FAEBD7”;</CellCode>
<CellCode>
} else {</CellCode>
<CellCode>
document.style.color = “#FFFFFF”;</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.screen.colorDepth</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
top</Head1>
<Body>
Gets/sets the distance from the top of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
lTop = window.screen.top</Code>
<Code>
window.screen.top = lTop</Code>
<Head3>
Parameters</Head3>
<Indent>
lTop is the number of pixels from the top of the screen.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// move and resize the current window, </CellCode>
<CellCode>
// making it like a bar across the top</CellCode>
<CellCode>
window.resizeTo( window.screen.availHeight/4 );</CellCode>
<CellCode>
window.screen.top = 0;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Code>
window.screen.left</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
width</Head1>
<Body>
Returns the width of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
lWidth = window.screen.width</Code>
<Head3>
Parameters</Head3>
<Indent>
lWidth is the width of the screen in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// crude way to check that the screen is at 1024x768</CellCode>
<CellCode>
if (window.screen.width &gt; 1000) {</CellCode>
<CellCode>
// resolution is below 10 x 7</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that not all of the width given by this property may be available to the window itself. When other widgets occupy space that cannot be used by the window object, there is a difference in <Code>
window.screen.width</Code>
and <Code>
window.screen.availWidth</Code>
. See also <Code>
window.screen.height</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screenX</Head1>
<Body>
Returns the horizontal distance of the left border of the user's browser from the left side of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
lLoc = window.screenX</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
lLoc</Code>
is the number of pixels from the left side the screen.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
None.</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.screenY</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screenY</Head1>
<Body>
Returns the vertical distance of the top border of the user's browser from the top side of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
lLoc = window.screenY</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
lLoc</Code>
is the number of pixels from the top of the screen.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
None.</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.screenX</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollbars</Head1>
<Body>
Returns the <Code>
scrollbars</Code>
object, whose visibility can be toggled in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
sBarObj = window.scrollbars</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sBarObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<Body>
The following complete HTML example shows way that the visible property of the various “bar” objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;Various DOM Tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
// changing bar states on the existing window</CellCode>
<CellCode>
netscape.security.PrivilegeManager.</CellCode>
<CellCode>
enablePrivilege(&quot;UniversalBrowserWrite&quot;);</CellCode>
<CellCode>
window.menubar.visible=!window.menubar.visible;</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;p&gt;Various DOM Tests&lt;/p&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that <Code>
scrollbars</Code>
is not an array of the scrollbars. The visibility of these objects can only be controlled as a group.</Body>
<Body>
To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page.</Body>
<Body>
See also: <Bold>
window.locationbar</Bold>
, <Bold>
window.menubar</Bold>
, <Bold>
window.personalbar</Bold>
, <Bold>
window.scrollbars</Bold>
, <Bold>
window.statusbar</Bold>
, <Bold>
window.toolbar</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scroll()</Head1>
<Body>
Scrolls the window to a particular place in the document.</Body>
<Head3>
Syntax</Head3>
<Code>
window.scroll(x-coord, y-coord)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
x-coord</Code>
is the pixel along the horizontal axis of the document that you want displayed in the upper left.</Indent>
<Indent>
<Code>
y-coord</Code>
is the pixel along the vertical axis of the document that you want displayed in the upper left.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// put the 1000th vertical pixel at</CellCode>
<CellCode>
// the top of the window</CellCode>
<CellCode>
&lt;INPUT TYPE=”button” VALUE=”1000”</CellCode>
<CellCode>
onClick=”scroll(0, 1000);”/&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Bold>
window.scrollTo()</Bold>
is effectively the same as this method.</Body>
<Body>
For scrolling a particular distance repeatedly, use the <Bold>
window.scrollBy()</Bold>
. Also see <Bold>
window.scrollByLines()</Bold>
, <Bold>
window.scrollByPages()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollBy()</Head1>
<Body>
Scrolls the document in the window by the given amount.</Body>
<Head3>
Syntax</Head3>
<Code>
window.scrollBy(xDelta, yDelta)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
xDelta</Code>
is the amount of pixels to scroll horizontally.</Indent>
<Indent>
<Code>
yDelta</Code>
is the amount of pixels to scroll vertically.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// scroll one page</CellCode>
<CellCode>
window.scrollBy(0, window.innerHeight);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
window.scrollBy() scrolls by a particular amount where <Bold>
window.scroll()</Bold>
scrolls to an absolute position in the document.</Body>
<Body>
See also <Bold>
window.scrollByLines()</Bold>
, <Bold>
window.scrollByPages()</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollByLines()</Head1>
<Body>
Scrolls the document by the given number of lines.</Body>
<Head3>
Syntax</Head3>
<Code>
window.scrollByLines(lines)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
lines</Code>
is the number of lines.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;button onclick=”scrollByLines(10);”&gt;jump&lt;/button&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.scrollBy()</Bold>
, <Bold>
window.scrollByPages()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollByPages()</Head1>
<Body>
Scrolls the current document by the specified number of pages.</Body>
<Head3>
Syntax</Head3>
<Code>
window.scrollByPages(pages)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
pages</Code>
is the number of pages to scroll.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// scroll one page</CellCode>
<CellCode>
window.scrollByPages(1);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.scrollBy()</Bold>
, <Bold>
window.scrollByLines()</Bold>
, <Bold>
window.scroll()</Bold>
, <Bold>
window.scrollTo()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollTo()</Head1>
<Body>
Scrolls to a particular set of coordinates in the document.</Body>
<Head3>
Syntax</Head3>
<Code>
window.scrollTo(x-coord, y-coord)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
x-coord</Code>
is the pixel along the horizontal axis of the document that you want displayed in the upper left.</Indent>
<Indent>
<Code>
y-coord</Code>
is the pixel along the vertical axis of the document that you want displayed in the upper left.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.scrollTo(0, 1000);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This function is effectively the same as <Bold>
window.scroll()</Bold>
. For relative scrolling, <Bold>
window.scrollBy()</Bold>
, <Bold>
window.scrollByLines()</Bold>
, and <Bold>
window.scrollByPages()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollX</Head1>
<Body>
Returns the number of pixels that the document has already been scrolled horizontally.</Body>
<Head3>
Syntax</Head3>
<Code>
xpix = window.scrollX</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
xpix</Code>
is the number of pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// make sure and go over to the second horizontal page</CellCode>
<CellCode>
if (window.scrollX) {</CellCode>
<CellCode>
scroll(0,0);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
scrollBy(400, 0);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Use this property to check that the document hasn’t already been scrolled some if you are using relative scroll functions such as <Bold>
window.scrollBy()</Bold>
, <Bold>
window.scrollByLines()</Bold>
, or <Bold>
window.scrollByPages()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollY</Head1>
<Body>
Returns the number of pixels that the document has already been scrolled vertically.</Body>
<Head3>
Syntax</Head3>
<Code>
ypix = window.scrollY</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
ypix</Code>
is the number of pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// make sure and go down to the second page</CellCode>
<CellCode>
if (window.scrollY) {</CellCode>
<CellCode>
scroll(0,0);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
scrollByPages(1);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Head3>
Use this property to check that the document hasn’t already been scrolled some if you are using relative scroll functions such as <Bold>
window.scrollBy()</Bold>
, <Bold>
window.scrollByLines()</Bold>
, or <Bold>
window.scrollByPages()</Bold>
</Head3>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
self</Head1>
<Body>
Returns an object reference to the <Code>
window</Code>
object.</Body>
<Head3>
Syntax</Head3>
<Code>
selfObj = window.self</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
selfObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if (window.parent.frames[0] != window.self) {</CellCode>
<CellCode>
// this window is not the first frame in the list</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Code>
window.self</Code>
is almost always used in comparisons like in the example above, which finds out if the current window is the first subframe in the parent frameset.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
setCursor()</Head1>
<Body>
Changes the cursor for the current window.</Body>
<Head3>
Syntax</Head3>
<Code>
syntax code</Code>
<Head3>
Parameters</Head3>
<Indent>
blah is a blah.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function SetBusyCursor(window, enable)</CellCode>
<CellCode>
{</CellCode>
<CellCode>
if(enable)</CellCode>
<CellCode>
window.setCursor(&quot;wait&quot;);</CellCode>
<CellCode>
else</CellCode>
<CellCode>
window.setCursor(&quot;auto&quot;);</CellCode>
<CellCode>
</CellCode>
<CellCode>
var numFrames = window.frames.length;</CellCode>
<CellCode>
for(var i = 0; i &lt; numFrames; i++)</CellCode>
<CellCode>
SetBusyCursor(window.frames[i], enable);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The cursor is locked until it's set back to auto.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
setInterval()</Head1>
<Body>
Set a delay for a specific function.</Body>
<Head3>
Syntax</Head3>
<Code>
ID = window.setInterval(“funcName”, delay)</Code>
<Head3>
Parameters</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
funcName is the name of the function for which you want to set a delay.</Body>
<Body>
delay is the number of milliseconds (thousandths of a second) that the function should be delayed.</Body>
<Body>
ID is the interval ID.</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
intervalID = window.setInterval(“animalate()”, 500);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The interval ID is used to refer to the specific interval when it needs to be cleared. The setInterval() function is commonly used to set a delay for functions that are executed again and again, such as animations. </Body>
<Body>
See also <Bold>
window.clearInterval()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
setTimeout()</Head1>
<Body>
Sets a delay for executing a function.</Body>
<Head3>
Syntax</Head3>
<Code>
ID = window.setTimeout(“funcName”, delay)</Code>
<Head3>
Parameters</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
funcName is the name of the function for which you want to set a delay.</Body>
<Body>
delay is the number of milliseconds (thousandths of a second) that the function should be delayed.</Body>
<Body>
ID is the interval ID.</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
setTimeout('parent.generateOutput(&quot;Cancel&quot;)',0);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The setTimeout() method is often used to establish a time limit on certain applications, as when a user is logged out or certain information is reset if there has not been any interaction within the given time.</Body>
<Body>
See also <Bold>
window.clearTimeout()</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
sidebar</Head1>
<Body>
Returns a reference to the window object of the sidebar.</Body>
<Head3>
Syntax</Head3>
<Code>
sidebar = window.sidebar</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sidebar</Code>
is a window object.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
sbar = window.sidebar;</CellCode>
<CellCode>
if (sbar) {</CellCode>
<CellCode>
sbar_content = sbar._content;</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The sidebar is a subframe in the DOM of the application window. Its content can be accessed with <Code>
sidebar._content</Code>
, as in the foregoing example, and it is a sibling of the window’s main content frame.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
sizeToContent()</Head1>
<Body>
Sizes the window according to its content.</Body>
<Head3>
Syntax</Head3>
<Code>
window.sizeToContent()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.sizeToContent();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
status</Head1>
<Body>
Gets/sets the text in the statusbar at the bottom of the browser.</Body>
<Head3>
Syntax</Head3>
<Code>
msg = window.status</Code>
<Code>
window.status = msg</Code>
<Head3>
Parameters</Head3>
<Indent>
msg is a string containing the text to appear in the statusbar.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
while ( bigLoad ) {</CellCode>
<CellCode>
window.status = “Loading...”;</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
statusbar</Head1>
<Body>
Returns the <Code>
statusbar</Code>
object, whose visibility can be toggled in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
sBarObj = window.menubar</Code>
<Head3>
Parameters</Head3>
<Indent>
sBarObj is an object reference.</Indent>
<Head3>
Example</Head3>
<Body>
The following complete HTML example shows way that the visible property of the various “bar” objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;Various DOM Tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
// changing bar states on the existing window</CellCode>
<CellCode>
netscape.security.PrivilegeManager.</CellCode>
<CellCode>
enablePrivilege(&quot;UniversalBrowserWrite&quot;);</CellCode>
<CellCode>
window.statusbar.visible=!window.statusbar.visible;</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;p&gt;Various DOM Tests&lt;/p&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When you load the example page above, the browser displays the following dialog:</Body>
<DIV>
<IMAGE xml:link="simple" href="dom_book-9.gif" show="embed" actuate="auto"/>
</DIV>
<Body>
To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page.</Body>
<Body>
See also: <Bold>
window.locationbar</Bold>
, <Bold>
window.menubar</Bold>
, <Bold>
window.personalbar</Bold>
, <Bold>
window.scrollbars</Bold>
, <Bold>
window.statusbar</Bold>
, <Bold>
window.toolbar</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
stop()</Head1>
<Body>
This method stops window loading.</Body>
<Head3>
Syntax</Head3>
<Code>
window.stop()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.stop();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The stop() method is exactly equivalent to clicking the stop button in the browser. Because of the order in which scripts are loaded, the stop() method cannot stop the document in which it is contained from loading, but it will stop the loading of large images, new windows, and other objects whose loading is deferred.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
toolbar</Head1>
<Body>
Returns the <Code>
toolbar</Code>
object, whose visibility can be toggled in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
tBarObj = window.menubar</Code>
<Head3>
Parameters</Head3>
<Indent>
tBarObj is an object reference.</Indent>
<Head3>
Example</Head3>
<Body>
The following complete HTML example shows way that the visible property of the various “bar” objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;Various DOM Tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
// changing bar states on the existing window</CellCode>
<CellCode>
netscape.security.PrivilegeManager.</CellCode>
<CellCode>
enablePrivilege(&quot;UniversalBrowserWrite&quot;);</CellCode>
<CellCode>
window.toolbar.visible=!window.toolbar.visible;</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;p&gt;Various DOM Tests&lt;/p&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page.</Body>
<Body>
See also: <Bold>
window.locationbar</Bold>
, <Bold>
window.menubar</Bold>
, <Bold>
window.personalbar</Bold>
, <Bold>
window.scrollbars</Bold>
, <Bold>
window.statusbar</Bold>
, <Bold>
window.toolbar</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
top</Head1>
<Body>
Returns a reference to the topmost window in the window hierarchy.</Body>
<Head3>
Syntax</Head3>
<Code>
windowObj = window.top</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
windowObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
None.</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Where the <Code>
window.parent</Code>
property returns the immediate parent of the current window, <Code>
window.top</Code>
returns the topmost window in the hierarchy of window objects. This property is especially useful when you are dealing with a window that is in a subframe of a parent or parents, and you want to get to the top-level frameset.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
unescape()</Head1>
<Body>
Unencodes a value that has been encoded in hexadecimal (e.g., a cookie).</Body>
<Head3>
Syntax</Head3>
<Code>
window.escape(sValue)</Code>
<Head3>
Parameters</Head3>
<Indent>
sValue is an encoded string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
cookieValuePlain = unescape( cookieValue );</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.escape()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
updateCommands()</Head1>
<Body>
Brief description.</Body>
<Head3>
Syntax</Head3>
<Code>
syntax code</Code>
<Head3>
Parameters</Head3>
<Indent>
blah is a blah.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example code here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Addtional notes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
window</Head1>
<Body>
Returns a reference to this window.</Body>
<Head3>
Syntax</Head3>
<Code>
windowObj = window.window</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
windowObj</Code>
is an object reference to the current window.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( window.top ) != ( window.window ) {</CellCode>
<CellCode>
...</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property is redundant. window is itself an object reference that can be used in all cases where window.window can. If for no other reason, it may exist so that comparisons like the example above are more readable.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Body>
</Body>
<Body>
</Body>
</chapter>

<chapter>
<title>DOM Document Reference</title>
<Heading1>
The document Interface</Heading1>
<Body>
In the DOM, the document object provides a general way to represent HTML, XHTML1, and XML documents. In addition to the generalized document interface, the APIs listed here include <Code>
HTMLDocument</Code>
, which is a more specialized interface for dealing with HTML documents (e.g., <Code>
cookie</Code>
, <Code>
alinkColor</Code>
). Interfaces that are part of this more specialized HTML document have asterisks next to them in the table below2.</Body>
<Body>
The <Code>
document</Code>
is contained by the <Code>
window</Code>
object (see <Bold>
DOM window Reference</Bold>
) and may contain any number of elements (see <Bold>
DOM Element Reference</Bold>
.)</Body>
<Body>
As you can see from the lists below, the interfaces on <Code>
document</Code>
deal with such things as the document type, features of the document such as its color and formatting, the plugins and applets that are exposed to the user in the document, as well as methods for creating all of the document’s child nodes, or elements that typically live in the structural representation of the whole document, such as the <Code>
&lt;BODY&gt;</Code>
element, a <Code>
&lt;TABLE&gt;</Code>
and so forth.</Body>
<Heading2>
Properties</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
attributes</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an array of attributes on the given element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
alinkColor</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns or sets the color of active links in the document body.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
anchors</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
anchors returns a list of all of the anchors in the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
applets</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
applets</Bold>
returns an ordered list of the applets within a document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
bgColor</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
bgColor</Bold>
gets/sets the background color of the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
body</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
body returns the BODY node of the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
characterSet</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the character set being used by the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
childNodes</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an array of child nodes on the given element node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
compatMode</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Indicates whether the document is rendered in Quirks or Strict mode.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cookie</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a semicolon-separated list of the cookies for that document or sets a single cookie.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
contentWindow</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the window object for the containing window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
doctype</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the Document Type Definition (DTD) of the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
documentElement</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the Element that is a direct child of document, which in most cases is the HTML element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
domain</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
domain returns the domain of the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
embeds</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
embeds</Bold>
returns a list of the embedded OBJECTS within the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
fgColor</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
fgColor gets/sets the foreground color, or text color, of the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
firstChild</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
firstChild returns the first node in the list of direct children of the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
forms</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
forms returns a list of the <Code>
FORM</Code>
elements within the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
height</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
height gets/sets the height of the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
images</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
images returns a list of the images in the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
implementation</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the DOM implementation associated with the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
lastModified</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the date on which the document was last modified.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
linkColor</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the color of hyperlinks in the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
links</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an array of all the hyperlinks in the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
location</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the URI of the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
namespaceURI</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the XML namespace of the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
nextSibling</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the <Code>
node</Code>
immediately following the current one in the tree.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
nodeName</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the name of the current node as a string.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
nodeType</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the node type of the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
nodeValue</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the value of particular types of nodes.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
ownerDocument</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an object reference to the document that owns the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
parentNode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an object reference to the parent node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
plugins</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an array of the available plugins.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
previousSibling</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the <Code>
node</Code>
immediately previous to the current one in the tree.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
referrer</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the URI of the page that linked to this page. </CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
styleSheets</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The stylesheets property returns a list of the <Code>
stylesheet</Code>
objects on the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
title</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the title of the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
URL</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a string containing the URL of the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
vlinkColor</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the color of visited hyperlinks.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
width</Bold>
*</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the width of the current document.</CellBody>
</CELL>
</ROW>
</TABLE>
<Heading2>
Methods</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
clear</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Clears a document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
close</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Closes a document stream for writing.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
createAttribute</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Create a new attribute on the current element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
createDocumentFragment</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Creates a new document fragment.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
createElement</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Creates a new element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
createTextNode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Creates a text node.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
getElementById</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an object reference to the identified element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
getElementsByName</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a list of elements with the given name.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
getElementsByTagName</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a list of elements with the given tag name.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
open</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Opens a document stream for writing.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
write</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Writes text to a document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
writeln</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Write a line of text to a document.</CellBody>
</CELL>
</ROW>
</TABLE>
<Heading2>
Event Handlers</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onblur</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onBlur event handler code, if any, that exists on the current element.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onclick</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onClick event handler code on the current element.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
ondblclick</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onDblClick event handler code on the current element.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onfocus</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onFocus event handler code on the current element.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onkeydown</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onKeyDown event handler code on the current element.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onkeypress</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onKeyPress event handler code for the current element.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onkeyup</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onKeyUp event handler code for the current element.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onmousedown</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onMouseDown event handler code for the current element.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onmousemove</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onMouseMove event handler code for the current element.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onmouseout</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onMouseOut event handler code for the current element.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onmouseover</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onMouseOver event handler code for the current element.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onmouseup</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onMouseUp event handler code for the current element.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
onresize</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the onResize event handler code for the current element.</Body>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head1>
attributes</Head1>
<Body>
Returns an array of attributes on the given element.</Body>
<Head3>
Syntax</Head3>
<Code>
attributes = elementNode.attributes</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
attributes</Code>
is a <Code>
namedNodeMap</Code>
of attributes on the current element.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// get the first &lt;p&gt; element in the document</Code>
<Code>
para = document.getElementsByTag(“p”)[0];</Code>
<Code>
atts = para.attributes;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The array returned by this property is a <Code>
namedNodeMap</Code>
, a list of objects rather than strings. The name and value of the attribute objects are accessible as separate properties, as in the following complete example, which retrieves the name/value pair of the first attribute of the “p1” paragraph in the document:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;script&gt;</Code>
<Code>
function showA() {</Code>
<Code>
p = document.getElementById(&quot;p1&quot;);</Code>
<Code>
t = document.getElementById(&quot;t&quot;);</Code>
<Code>
t.setAttribute(&quot;value&quot;, </Code>
<Code>
p.attributes[0].name + &quot;-&gt;&quot; + p.attributes[0].value);</Code>
<Code>
}</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
</Code>
<Code>
&lt;p id=&quot;p1&quot; style=&quot;color: blue;&quot;&gt;Sample Paragraph&lt;/p&gt;</Code>
<Code>
&lt;form&gt;</Code>
<Code>
&lt;input type=&quot;button&quot; value=&quot;show&quot; onclick=&quot;showA()&quot; /&gt;</Code>
<Code>
&lt;input id=&quot;t&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;</Code>
<Code>
&lt;/form&gt;</Code>
<Code>
&lt;/html&gt;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Specification</Head3>
<Code>
attribute</Code>
<BodyKeepNext>
</BodyKeepNext>
<Head1>
alinkColor</Head1>
<Body>
Returns or sets the color of active links in the document body.</Body>
<Head3>
Syntax</Head3>
<Code>
color = HTMLBodyElement.aLinkColor</Code>
<Code>
HTMLBodyElement.aLinkColor = color</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
color</Code>
is a string containing the name of the color (e.g., “blue”, “darkblue”, etc., or the octal value of the color (e.g., <Code>
FFFFF</Code>
)</Indent>
<Head3>
Example</Head3>
<Code>
example here</Code>
<Head3>
Notes</Head3>
<Indent>
extra information</Indent>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
anchors</Head1>
<Body>
anchors returns a list of all of the anchors in the document.</Body>
<Head3>
Syntax</Head3>
<Code>
a_list = document.anchors</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
a_list</Code>
is a <Code>
nodeList</Code>
of all of the anchor elements within the document</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
if ( document.anchors.length &gt;= 5 ) {</Code>
<Code>
dump(“dump found too many anchors”);</Code>
<Code>
window.location = “http://www.getoutahere.com”;</Code>
<Code>
}</Code>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
For reasons of backwards compatibility, the returned set of anchors only contains those anchors created with the <Code>
name</Code>
attribute, not those created with the <Code>
id</Code>
attribute. </Body>
<Head3>
Specification</Head3>
<Code>
anchor</Code>
<Body>
</Body>
<Head1>
applets</Head1>
<Body>
applets returns an ordered list of the applets within a document.</Body>
<Head3>
Syntax</Head3>
<Code>
app_list = document.applets</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
app_list</Code>
is a <Code>
nodeList</Code>
of the applets within the document.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// ( When you know the second applet is the one</Code>
<Code>
// you want )</Code>
<Code>
my_java_app = document.applets[1];</Code>
<Code>
</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
applets</Code>
<Body>
</Body>
<Head1>
bgColor</Head1>
<Body>
bgColor gets/sets the background color of the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
color = document.bgColor</Code>
<Code>
document.bgColor = color</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
color</Code>
is a string representing the color as a word (e.g., “red’) or as an octal value, as in HTML (e.g., “#eee”)</Indent>
<Head3>
Example</Head3>
<Code>
document.bgColor = “darkblue”;</Code>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
body</Head1>
<Body>
body returns the <Code>
BODY</Code>
node of the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
bodyObj = document.body</Code>
<Code>
document.body = aNewBodyElement</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bodyObj</Code>
is a node representing the <Code>
BODY</Code>
or <Code>
FRAMESET </Code>
element in the current document.</Indent>
<Indent>
<Code>
aNewBodyElement</Code>
is a <Code>
BODY</Code>
or <Code>
FRAMESET</Code>
element that will replace the current <Code>
BODY</Code>
or <Code>
FRAMESET</Code>
element</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// in HTML: &lt;body id=&quot;oldBodyElement&quot;&gt;&lt;/body&gt;</Code>
<Code>
alert(document.body.id); // &quot;oldBodyElement&quot;</Code>
<Code>
var aNewBodyElement = document.createElement(&quot;body&quot;);</Code>
<Code>
aNewBodyElement.id = &quot;newBodyElement&quot;;</Code>
<Code>
document.body = aNewBodyElement;</Code>
<Code>
alert(document.body.id); // &quot;newBodyElement&quot; </Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Code>
body</Code>
is the element that contains the content for the document. In documents with <Code>
BODY</Code>
contents, returns the <Code>
BODY</Code>
element, and in frameset documents, this returns the outermost <Code>
FRAMESET</Code>
element.</Body>
<Body>
Though <Code>
body</Code>
is settable, setting a new body on a document will effectively remove all the current children of the existing <Code>
BODY</Code>
element.</Body>
<Head3>
Specification</Head3>
<Code>
body</Code>
<Body>
</Body>
<Head1>
characterSet</Head1>
<Body>
Returns the character set of the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
charSet = document.characterSet</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
charSet</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;input </CellCode>
<CellCode>
value=&quot;char&quot; </CellCode>
<CellCode>
type=&quot;button&quot;    onclick=&quot;alert(document.characterSet);&quot; /&gt;</CellCode>
<CellCode>
// returns “ISO-8859-1”</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
For a complete list of character sets, see: 
http://www.iana.org/assignments/character-sets.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level “0”. Not part of specification.</Body>
<Body>
</Body>
<Head1>
childNodes</Head1>
<Body>
Returns an array of child nodes on the given element node.</Body>
<Head3>
Syntax</Head3>
<Code>
children = elementNode.childNodes</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
children</Code>
is a nodeList of children of the document.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// table is an object reference to a table element</Code>
<Code>
kids = table.childNodes;</Code>
<Code>
for (var i = 0; i &lt; kids.length; i++) {</Code>
<Code>
// do something with each kid as kids[i]</Code>
<Code>
</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
document</Code>
object itself has only a single child, and that is the <Code>
HTML</Code>
element. Note again that the items in the array are objects and not strings. To get data from those objects you must use their properties (e.g. <Code>
childNode[2].nodeName</Code>
to get the name, etc.)</Body>
<Head3>
Specification</Head3>
<Body>
<Code>
childNodes</Code>
</Body>
<Body>
</Body>
<Head1>
cookie</Head1>
<Body>
Gets/sets a list of the cookies associated with the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
cookie_list = document.cookie</Code>
<Code>
document.cookie = cookie_list</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
cookie_list</Code>
is a string containing a semicolon-separated list of cookies</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// this function sets two cookies and then</CellCode>
<CellCode>
// displays them in an alert</CellCode>
<CellCode>
function sgCookie() {</CellCode>
<CellCode>
document.cookie = “name=oeschger”;</CellCode>
<CellCode>
document.cookie = “favorite_food=tripe”;</CellCode>
<CellCode>
alert(document.cookie);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
// returns: name=oeschger;favorite_food=tripe</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If there are no cookies associated with a document, this function returns an empty string. Note also that you cannot use this property to set more than one cookie at a time.</Body>
<Head3>
Specification</Head3>
<Code>
cookie</Code>
<Body>
</Body>
<Head1>
compatMode</Head1>
<Body>
Indicates whether the document is rendered in Quirks mode or Strict mode.</Body>
<Head3>
Syntax</Head3>
<Code>
mode = document.compatMode</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
mode</Code>
is a string containing “BackCompat” for Quirks mode or “CSS1Compat” for Strict mode.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<Code>
if ( document.compatMode == “BackCompat” ){</Code>
</Code>
<Code>
// use some quirky stuff</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Code>
None</Code>
.</Body>
<Body>
</Body>
<Head1>
contentWindow</Head1>
<Body>
Returns the containing window of the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
window = document.contentWindow</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
window</Code>
is a window object for the window that contains the current document.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<Code>
// get to the browser</Code>
</Code>
<Code>
<Code>
// then load new content</Code>
</Code>
<Code>
<Code>
browserWindow = document.contentWindow;</Code>
</Code>
<Code>
browserWindow.home();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Code>
None</Code>
.</Body>
<Body>
</Body>
<Head1>
doctype</Head1>
<Body>
Returns the Document Type Definition (DTD) of the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
docType = document.DocumentType</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
docType</Code>
is a string representing the DTD, if any, of the current document.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Head3>
<Code>
None.</Code>
</Head3>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Code>
DocumentType</Code>
attribute is a read-only property. It returns <Code>
NULL</Code>
if there is no DTD for the current document.</Body>
<Head3>
Specification</Head3>
<Body>
<Code>
docType</Code>
</Body>
<Body>
</Body>
<Head1>
documentElement</Head1>
<Body>
Returns the <Code>
Element</Code>
that is a direct child of <Code>
document</Code>
, which in most cases is the <Code>
HTML</Code>
element.</Body>
<Head3>
Syntax</Head3>
<Code>
doc = document.documentElement</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
doc</Code>
is a node representing the direct child of document.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
actual_doc = document.documentElement;</Code>
<Code>
first_tier = actual_doc.childNodes;</Code>
<Code>
// first_tier are the direct children of HTML</Code>
<Code>
for (var i = 0; i &lt; first_tier.length; i++) {</Code>
<Code>
// do something with each kid of HTML</Code>
<Code>
// as first_tier[i]</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property is a read-only convenience for getting the <Code>
HTML</Code>
element associated with all valid HTML documents. The example above is quite typical: you actually want the <Code>
HTML</Code>
element so you can access all of its children, and so you use this <Code>
document</Code>
property to get a hold of it. </Body>
<Body>
Note that <Code>
document</Code>
itself typically contains a single child node, <Code>
HTML</Code>
, which itself contains all of the elements in the actual HTML document as a <Code>
nodeList</Code>
of children.</Body>
<Head3>
Specification</Head3>
<Body>
<Code>
documentElement</Code>
</Body>
<Body>
</Body>
<Head1>
domain</Head1>
<Body>
domain gets/sets the domain of the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
domain_name = document.domain</Code>
<Code>
document.domain = domain_name</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
domain_name</Code>
is a string referring to the domain of the current document.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
bad_domain = “www.love.com”;</CellCode>
<CellCode>
if ( document.domain == bad_domain ) {</CellCode>
<CellCode>
window.close();</CellCode>
<CellCode>
}</CellCode>
<CellCode>
// for document www.love.com/good.html, </CellCode>
<CellCode>
// this script closes the window</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property returns <Code>
NULL</Code>
if the server of the document cannot be identified. In the DOM spec, this property is listed as being read-only, but Mozilla lets you set it.</Body>
<Head3>
Specification</Head3>
<Code>
domain</Code>
<Body>
</Body>
<Head1>
embeds</Head1>
<Body>
embeds returns a list of the embedded OBJECTS within the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
embedded_objects = document.embeds</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
embedded_objects</Code>
is a <Code>
nodeList</Code>
of embedded objects.</Indent>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
fgColor</Head1>
<Body>
fgColor gets/sets the foreground color, or text color, of the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
color = document.fgColor</Code>
<Code>
document.fgColor = color</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
color</Code>
is a string representing the color as a word (e.g., “red”) or as an octal value, as in HTML (e.g., “#eee”).</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
document.fgColor = “white”;</Code>
<Code>
document.bgColor = “darkblue”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
firstChild</Head1>
<Body>
firstChild returns the first node in the list of direct children of the document.</Body>
<Head3>
Syntax</Head3>
<Code>
child = document.firstChild</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
child</Code>
is a node of the type <Code>
element</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function fChild() {</CellCode>
<CellCode>
f = document.firstChild;</CellCode>
<CellCode>
alert(f.tagName);</CellCode>
<CellCode>
} // returns: HTML</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that you may have to recurse into the DOM tree with this property to get the the child nodes you expect, since HTML is almost always given as the first child of the <Code>
document</Code>
itself.</Body>
<Head3>
Specification</Head3>
<Body>
<Code>
firstChild</Code>
</Body>
<Body>
</Body>
<Head1>
forms</Head1>
<Body>
forms returns a list of the <Code>
FORM</Code>
elements within the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
form_list = document.forms</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
form_list</Code>
is a <Code>
nodeList</Code>
of <Code>
FORM</Code>
elements.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;form id=”marjoree”&gt;</CellCode>
<CellCode>
&lt;input
type=”button”    onclick=&quot;alert(document.forms[0].id);&quot;/&gt;</CellCode>
<CellCode>
&lt;/form&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
forms</Code>
<Body>
</Body>
<Head1>
height</Head1>
<Body>
height gets/sets the height of the current document.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
height_value = document.height</Code>
<Code>
document.height = height_value</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
height_value</Code>
is a string representing the height of the document in pixels, inches, or ems. If no type is specified (e.g., “px” in 200px), the value is assumed to be the number of pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// make the window small on load</Code>
<Code>
function onLoad() {</Code>
<Code>
document.height = “200”;</Code>
<Code>
document.width = “200”;</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
height</Code>
<Body>
</Body>
<Head1>
images</Head1>
<Body>
images returns a list of the images in the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
image_list = document.images</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
image_list</Code>
is a <Code>
nodeList</Code>
of all the <Code>
IMG</Code>
elements in the document.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
ilist = document.images;</Code>
<Code>
for ( var i = 0; i &lt; ilist.length; i++ ) {</Code>
<Code>
if ( ilist[i] == “banner.gif” ) {</Code>
<Code>
// found the banner</Code>
<Code>
}</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
images</Code>
<Body>
</Body>
<Head1>
implementation</Head1>
<Body>
Returns the DOM implementation associated with the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
implemetation = document.DOMImplentation</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
implementation</Code>
is a <Code>
DOMImplementation</Code>
object</Indent>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
If available, the <Code>
DOMImplementation</Code>
is a special object that provides services for controlling things outside of a single document. For example, the <Code>
DOMImplementation</Code>
interface includes a <Code>
createDocumentType</Code>
method with which DTDs can be created for one or more documents managed by the implementation.</Body>
<Head3>
Specification</Head3>
<Body>
<Code>
implementation</Code>
</Body>
<Body>
</Body>
<Head1>
lastModified</Head1>
<Body>
Returns the date on which the current document was last modified.</Body>
<Head3>
Syntax</Head3>
<Code>
date = document.lastModified</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
date</Code>
is a string containing the date and time of last modification.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
dump(document.lastModified);</CellCode>
<CellCode>
// returns: Tuesday, July 10, 2001 10:19:42</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that as a string, lastModified cannot easily be used for comparisions between the modified dates of documents.</Body>
<Head3>
Specification</Head3>
<Body>
link to DOM spec here</Body>
<Body>
</Body>
<Head1>
linkColor</Head1>
<Body>
linkcolor gets/sets the color of links within the document.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
color = document.linkColor</CellCode>
<CellCode>
document.linkColor = color</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
color</Code>
is a string representing the color as a word (e.g., “red’) or as an octal value, as in HTML (e.g., “#eee”)</Indent>
<Head3>
Example</Head3>
<Code>
document.linkColor = “blue”;</Code>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
links</Head1>
<Body>
The links property returns a collection of all <Code>
AREA</Code>
elements and anchor elements in a document with a value for the <Code>
href </Code>
attribute.</Body>
<Head3>
Syntax</Head3>
<Code>
linkArray = document.links</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
linkArray</Code>
is an array of the links in the document</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
var links = document.links;</CellCode>
<CellCode>
for(var i = 0; i &lt; links.length; i++) {</CellCode>
<CellCode>
var linkHref = 
document.createTextNode(links[i].href);</CellCode>
<CellCode>
var lineBreak = document.createElement(&quot;br&quot;);</CellCode>
<CellCode>
document.body.appendChild(linkHref);</CellCode>
<CellCode>
document.body.appendChild(lineBreak);</CellCode>
<CellCode>
} </CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
links</Code>
<Body>
</Body>
<Head1>
location</Head1>
<Body>
Gets the URL of the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
loc = document.location</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
loc</Code>
is the URL as a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
dump(document.location);</Code>
<Code>
// returns a string like</Code>
<Code>
// http://www.peoplemagazine.com/juicybits.html</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Code>
document.location</Code>
works the same as <Code>
document.URL</Code>
. Both are read-only properties unlike window.location, which can be set. Since the <Code>
document</Code>
object represents a single document or URL, its location cannot be changed.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
namespaceURI</Head1>
<Body>
namespaceURI returns the XML namespace for the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
NSURI = document.namespaceURI</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
NSURI</Code>
is a string containing the namespace.</Indent>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
The DOM does not handle or enforce namespace validation per se. It is up to the DOM application to do any validation necessary. Note too that the namespace prefix, once it is associated with a particular node, cannot be changed. </Body>
<Head3>
Specification</Head3>
<Code>
namespaceURI</Code>
<Body>
</Body>
<Head1>
nextSibling</Head1>
<Body>
Returns the <Code>
node</Code>
immediately following the current one in the tree.</Body>
<Head3>
Syntax</Head3>
<Code>
node = elementNode.nextSibling</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
node</Code>
is a node object.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// in a table, the cells are siblings</Code>
<Code>
cell1 = document.getElementById(“td1”);</Code>
<Code>
cell2 = cell1.nextSibling;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Returns <Code>
NULL</Code>
if there are no more nodes.</Body>
<Head3>
Specification</Head3>
<Body>
<Code>
nextSibling</Code>
</Body>
<Body>
</Body>
<Head1>
nodeName</Head1>
<Body>
Returns the name of the current node as a string.</Body>
<Head3>
Syntax</Head3>
<Code>
name = nodeElement.nodeName</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
name</Code>
is a string that contains the name of the node.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
div1 = document.getElementById(“d1”);</Code>
<Code>
text_field = document.getElementById(“t”);</Code>
<Code>
text_field.setAttribute(“value”, div1.nodeName);</Code>
<Code>
// textfield reads “div” now</Code>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
<Code>
nodeName</Code>
</Body>
<Body>
</Body>
<Head1>
nodeType</Head1>
<Body>
Returns a code representing the type of the underlying node</Body>
<Head3>
Syntax</Head3>
<Code>
<Code>
code</Code>
= document.nodeType</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
code</Code>
is an unsigned short with one of the following values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
ELEMENT_NODE                   = 1;</Code>
<Code>
ATTRIBUTE_NODE                 = 2;</Code>
<Code>
TEXT_NODE                      = 3;</Code>
<Code>
CDATA_SECTION_NODE             = 4;</Code>
<Code>
ENTITY_REFERENCE_NODE          = 5;</Code>
<Code>
ENTITY_NODE                    = 6;</Code>
<Code>
PROCESSING_INSTRUCTION_NODE    = 7;</Code>
<Code>
COMMENT_NODE                   = 8;</Code>
<Code>
DOCUMENT_NODE                  = 9;</Code>
<Code>
DOCUMENT_TYPE_NODE             = 10;</Code>
<Code>
DOCUMENT_FRAGMENT_NODE         = 11;</Code>
<Code>
NOTATION_NODE                  = 12;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if document.nodeType != 9</CellCode>
<CellCode>
document.close()</CellCode>
<CellCode>
else</CellCode>
<CellCode>
document.write(“&lt;p&gt;I’m a doc!&lt;/p&gt;”);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
nodeType</Code>
<Body>
</Body>
<Head1>
nodeValue</Head1>
<Body>
Returns the value of the current node.</Body>
<Head3>
Syntax</Head3>
<Code>
value = document.nodeValue</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
value</Code>
is a string containing the value of the current node.</Indent>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
For the document itself, the nodeValue is null. For text, comment, and CDATA nodes, nodeValue returns the content of the node. For attribute nodes, the value of the attribute is returned.</Body>
<Head3>
Specification</Head3>
<Code>
nodeValue</Code>
<Body>
</Body>
<Head1>
ownerDocument</Head1>
<Body>
ownerDocument returns the <Code>
document</Code>
object associated with this node.</Body>
<Head3>
Syntax</Head3>
<Code>
ownerDoc = document.ownerDocument</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
ownerdoc</Code>
is a <Code>
document</Code>
object.</Indent>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
This property returns <Code>
NULL</Code>
for a document object.</Body>
<Head3>
Specification</Head3>
<Code>
ownerDocument</Code>
<Body>
</Body>
<Head1>
parentNode</Head1>
<Body>
Returns the parent of the current node.</Body>
<Head3>
Syntax</Head3>
<Code>
node = element.parentNode</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
node</Code>
is a <Code>
node</Code>
object.</Indent>
<Head3>
Example</Head3>
<Body>
As you can see from the following not very interesting example, even simple HTML documents can contain a complex hierarchy of parents and children. In this case, the document object is a parent of the <Code>
HTML</Code>
object, which is a parent of the <Code>
BODY</Code>
object, which in turn is a parent of the <Code>
H1</Code>
object being examined.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// alerts: 9 for Document object</CellCode>
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function init() {</CellCode>
<CellCode>
h1 = document.createElement('H1');</CellCode>
<CellCode>
t = document.createTextNode(&quot;heading 1&quot;);</CellCode>
<CellCode>
h1.appendChild(t);</CellCode>
<CellCode>
bod = document.getElementById(&quot;b&quot;);</CellCode>
<CellCode>
bod.appendChild(h1);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
function findParent() {</CellCode>
<CellCode>
h1 = document.getElementsByTagName(&quot;H1&quot;);</CellCode>
<CellCode>
alert(h1[0].parentNode.parentNode.parentNode.nodeName);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body id=&quot;b&quot; onload=&quot;init();&quot;&gt;</CellCode>
<CellCode>
&lt;form&gt;&lt;input type=&quot;button&quot; value=&quot;find parent&quot; onclick=&quot;findParent();&quot; /&gt;&lt;/form&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that this property returns <Code>
NULL</Code>
for the <Code>
document</Code>
itself, but can be used on the children of the document to refer back to the document or other intermediate parents (see example above).</Body>
<Head3>
Specification</Head3>
<Code>
parentNode</Code>
<Body>
</Body>
<Head1>
plugins</Head1>
<Body>
Returns a list of the plugins currently installed.</Body>
<Head3>
Syntax</Head3>
<Code>
pluginCollection = document.plugins</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
pluginCollection</Code>
is an object of the type <Code>
PluginArray</Code>
</Indent>
<Head3>
Example</Head3>
<Body>
The following example prints out information about the installed plug-ins for the high-level document. Note that properties available on the plugin object: length (on the array of plug-ins), name, filename, and description.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;script TYPE=&quot;text/javascript&quot;&gt;</Code>
<Code>
&lt;!--</Code>
<Code>
var L = navigator.plugins.length</Code>
<Code>
document.write( L );</Code>
<Code>
document.write(&quot;Plugins&quot;.bold());</Code>
<Code>
document.write(&quot;&lt;BR&gt;&quot;);</Code>
<Code>
document.write(&quot;Name | Filename | description&quot;.bold());</Code>
<Code>
document.write(&quot;&lt;BR&gt;&quot;);</Code>
<Code>
for(i=0; i&lt;L; i++){</Code>
<Code>
document.write(navigator.plugins[i].name);</Code>
<Code>
document.write(&quot; | &quot;.bold());</Code>
<Code>
document.write(navigator.plugins[i].filename);</Code>
<Code>
document.write(&quot; | &quot;.bold());</Code>
<Code>
document.write(navigator.plugins[i].description);</Code>
<Code>
document.write(&quot;&lt;BR&gt;&quot;);</Code>
<Code>
}</Code>
<Code>
//--&gt;</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
</Code>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
previousSibling</Head1>
<Body>
Returns the <Code>
node</Code>
immediately previous to the current one in the tree.</Body>
<Head3>
Syntax</Head3>
<Code>
node = elementNode.previousSibling</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
node</Code>
is a node object.</Indent>
<Head3>
Example</Head3>
<Code>
n1 = n2.previousSibling;</Code>
<Head3>
Notes</Head3>
<Body>
Returns <Code>
NULL</Code>
if there are no more nodes.</Body>
<Head3>
Specification</Head3>
<Code>
previousSibling</Code>
<Body>
</Body>
<Head1>
referrer</Head1>
<Body>
Returns the URI of the page that linked to this page.</Body>
<Head3>
Syntax</Head3>
<Code>
referring_page = document.referrer</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
referring_page</Code>
is a string containing the URI of the referring page.</Indent>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
The value is an empty string if the user navigated to the page directly (not through a link, but, for example, via a bookmark).</Body>
<Body>
Note that since this property returns only a string it does not give you DOM access to the referring page.</Body>
<Head3>
Specification</Head3>
<Code>
referrer</Code>
<Body>
</Body>
<Head1>
styleSheets</Head1>
<Body>
The stylesheets property returns a list of the <Code>
stylesheet</Code>
objects on the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
style_sheets = document.stylesheets</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
style_sheets</Code>
is a <Code>
nodeList</Code>
of stylesheet objects.</Indent>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
title</Head1>
<Body>
Gets/sets the title of the current document.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
document.title = t</CellCode>
<CellCode>
t = document.title</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
t</Code>
is a string containing the document title.</Indent>
<Head3>
Example</Head3>
<Body>
This example checks to see if the document has a title that can be set and, if so, changes it to the value of the input parameter:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
function setTitle(str){</Code>
<Code>
if(document.title){</Code>
<Code>
document.title=str;</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Body>
You can call a function like this in the HTML with the following elements:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;input type=&quot;text&quot;</Code>
<Code>
name=&quot;t&quot; </Code>
<Code>
value=&quot;HTMLTitleElement&quot; </Code>
<Code>
size=30&gt;</Code>
<Code>
&lt;input type=&quot;button&quot; </Code>
<Code>
value=&quot;set the HTMLDocument:title&quot; </Code>
<Code>
onClick=&quot;setTitle(form.t.value);&quot;&gt;</Code>
</CELL>
</ROW>
</TABLE>
<Body>
Where the button takes the value in the text element “t” and passes it to the function.</Body>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
URL</Head1>
<Body>
Returns the URL of the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
url = document.URL</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
url</Code>
is a string representing the URL of the current document.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
var currentURL = document.URL;</CellCode>
<CellCode>
alert(currentURL); </CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
URL is a replacement for the DOM Level 0 <Code>
document.location.href</Code>
property. However <Code>
document.URL</Code>
is not settable, unlike <Code>
document.location.href</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
URL</Code>
<Body>
</Body>
<Head1>
vlinkColor</Head1>
<Body>
Returns the color of links that the user has visited in the document.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
color = document.vlinkColor</Code>
<Code>
document.vlinkColor = color</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
color</Code>
is a string representing the color as a word (e.g., “red’) or as an octal value, as in HTML (e.g., “#eee”)</Indent>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
The default for this property is purple.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
width</Head1>
<Body>
Returns the width of the current document in pixels.</Body>
<Head3>
Syntax</Head3>
<Code>
wdth = document.width</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
wdth</Code>
is the width in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function init() {</CellCode>
<CellCode>
alert(document.width - 100);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
extra information</Body>
<Head3>
Specification</Head3>
<Code>
width</Code>
<Body>
</Body>
<Head1>
clear</Head1>
<Body>
The clear method clears the current document of all its content.</Body>
<Head3>
Syntax</Head3>
<Code>
document.clear()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;button label=”empty” onclick=”document.clear();” /&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
close</Head1>
<Body>
The document.close() method finishes writing to the open document.</Body>
<Head3>
Syntax</Head3>
<Code>
document.close()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// open a document to write to it. </CellCode>
<CellCode>
// finish by closing the document.</CellCode>
<CellCode>
document.open();</CellCode>
<CellCode>
document.write(“&lt;P&gt;The only content&lt;/P&gt;.”); document.close();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
createAttribute</Head1>
<Body>
createAttribute creates a new attribute on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
attribute = element.createAttribute(name)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
attribute</Code>
is an attribute node.</Indent>
<Indent>
<Code>
name</Code>
is a string containing the name of the attribute.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
d = document.getElementById(“div1);</Code>
<Code>
p = d.createAttribute(“proportion”);</Code>
<Code>
p.value = “100”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The return is a node of type <Code>
attribute</Code>
. Once you have this node you can, as in the foregoing example, set its value with the value property. The DOM does not enforce what sort of attributes can be added to a particular element in this manner.</Body>
<Head3>
Specification</Head3>
<Body>
<Code>
createAttribute</Code>
</Body>
<Body>
</Body>
<Head1>
createDocumentFragment</Head1>
<Body>
createDocumentFragment creates an empty document fragment</Body>
<Head3>
Syntax</Head3>
<Code>
documentFragment = element.createDocumentFragment</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
documentFragment</Code>
is an object.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
var frag = document.createDocumentFragment();</Code>
<Code>
frag.appendChild(    document.createTextNode(‘&lt;div&gt;Moveable Div&lt;/div&gt;’) );</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
A <Code>
documentFragment</Code>
is a &quot;lightweight&quot; or &quot;minimal&quot; <Code>
document</Code>
object. It is very common to want to be able to extract a portion of a document's tree or to create a new fragment of a document. Imagine implementing a user command like cut or rearranging a document by moving fragments around. It is desirable to have an object which can hold such fragments and it is quite natural to use a Node for this purpose.</Body>
<Body>
While it is true that a <Code>
document</Code>
object could fulfill this role, a <Code>
document</Code>
object can potentially be a heavyweight object, depending on the underlying implementation. What is really needed for this is a very lightweight object. <Code>
documentFragment</Code>
is such an object.</Body>
<Head3>
Specification</Head3>
<Code>
<Code>
createDocumentFragment</Code>
</Code>
<Body>
</Body>
<Head1>
createElement</Head1>
<Body>
Creates an element of the type specified. Note that the instance returned implements the Element interface, so attributes can be specified directly on the returned object.</Body>
<Head3>
Syntax</Head3>
<Code>
element = element.createElement(type)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
element</Code>
is an object.</Indent>
<Indent>
<Code>
type</Code>
is a string that represents the type of element to be created.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
div = document.createElement(“div”);</Code>
<Code>
preface = document.getElementById(“preface”);</Code>
<Code>
document.insertBefore(div, preface);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
In addition, if there are known attributes with default values, <Code>
attribute</Code>
nodes representing them are automatically created and attached to the element.</Body>
<Body>
To create an element with a qualified name and namespace URI, use the <Code>
createElementNS</Code>
method.</Body>
<Head3>
Specification</Head3>
<Body>
<Code>
createElement</Code>
</Body>
<Body>
</Body>
<Head1>
createTextNode</Head1>
<Body>
Creates a new Text node.</Body>
<Head3>
Syntax</Head3>
<Code>
text = document.createTextNode(data)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
text</Code>
is a <Code>
text</Code>
node.</Indent>
<Indent>
<Code>
data</Code>
is a string containing the data to be put in the <Code>
text</Code>
node.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
t = document.createTextNode(“Plain Old Text.”);</CellCode>
<CellCode>
p = document.getElementById(“firstP”);</CellCode>
<CellCode>
p.appendChild(t);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
createTextNode</Code>
<Body>
</Body>
<Head1>
getElementById</Head1>
<Body>
Returns the element whose ID is specified.</Body>
<Head3>
Syntax</Head3>
<Code>
element = document.getElementById(id);</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
element</Code>
is an object.</Indent>
<Indent>
<Code>
id</Code>
is a string representing the unique id of the element being sought.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// for &lt;p id=”p1” class=”reggy” align=”right”&gt;text&lt;/p&gt;</CellCode>
<CellCode>
first_p = document.getElementById(“p1”);</CellCode>
<CellCode>
a_list = first_p.attributes;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Code>
getElementById</Code>
is an absolute mainstay of the DOM. One of the most important notions in DOM programming is that elements be identified uniquely so that they can be grabbed and manipulated.</Body>
<Body>
If there is no element with the given ID, this function returns <Code>
NULL</Code>
. Note also that the DOM implementation must have information that says which attributes are of type ID. Attributes with the name &quot;ID&quot; are not of type ID unless so defined. Implementations that do not know whether attributes are of type ID or not are expected to return null.</Body>
<Body>
<Code>
getElementById</Code>
was introduced in DOM Level 2.</Body>
<Head3>
Specification</Head3>
<Code>
getElementById</Code>
<Body>
</Body>
<Head1>
getElementsByName</Head1>
<Body>
Returns a list of elements of a given name in the document.</Body>
<Head3>
Syntax</Head3>
<Code>
elements = document.getElementsByName(name)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
elements</Code>
is a <Code>
nodeList</Code>
of elements.</Indent>
<Indent>
<Code>
name</Code>
is a string representing the value of the <Code>
name</Code>
attribute on the element.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// return some of the divs</CellCode>
<CellCode>
&lt;div name=”up”&gt;200&lt;/div&gt;</CellCode>
<CellCode>
&lt;div name=”up”&gt;145&lt;/div&gt;</CellCode>
<CellCode>
&lt;div name=”down”&gt;146&lt;/div&gt;</CellCode>
<CellCode>
&lt;div name=”other”&gt;178&lt;/div&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
up_divs = document.getElementsByName(“up”);</CellCode>
<CellCode>
dump(up_divs.item(0).tagName); // returns “div”</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
getElementsByName() returns a nodeList of all the elements with a given value for the name attribute. Unlike <Code>
<Bold>
getElementsByTagName</Bold>
<Code>
</Code>
</Code>
, which takes the name of the element itself, this method only works for elements for which name attributes have been explicitly given.</Body>
<Head3>
Specification</Head3>
<Code>
getElementsByName</Code>
<Body>
</Body>
<Head1>
getElementsByTagName</Head1>
<Body>
Returns a list of elements of a given name in the document.</Body>
<Head3>
Syntax</Head3>
<Code>
elements = document.getElementsByTagName(Name)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
elements</Code>
is a <Code>
nodeList</Code>
of elements.</Indent>
<Indent>
<Code>
tagName</Code>
is a string representing the name of the elements.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// check the alignment on a number of tables</CellCode>
<CellCode>
tables = document.getElementsByTagName(“table”);</CellCode>
<CellCode>
dump(“no. of tables: “ + tables.length);</CellCode>
<CellCode>
for (var i = 0; i &lt; tables.length; i++) {</CellCode>
<CellCode>
dump(tables[i].alignment);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Another very useful feature of DOM programming is the getElementsByTagName() method, which returns a nodeList of all the elements with the given name.</Body>
<Head3>
Specification</Head3>
<Code>
getElementsByTagName</Code>
<Body>
</Body>
<Head1>
open</Head1>
<Body>
The open() methods opens a document stream for writing. </Body>
<Head3>
Syntax</Head3>
<Code>
document.open()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// In this example, the document contents are</CellCode>
<CellCode>
// overwritten as the document </CellCode>
<CellCode>
// is reinitialized on open().</CellCode>
<CellCode>
document.write(“&lt;html&gt;&lt;p&gt;remove me&lt;/p&gt;&lt;/html&gt;”);</CellCode>
<CellCode>
document.open(); // document is empty.</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If a document exists in the target, this method clears it (see the example above). Also, an automatic <Code>
document.open()</Code>
is executed if <Code>
document.write()</Code>
is called after the page has loaded.</Body>
<Head3>
Specification</Head3>
<Code>
open</Code>
<Body>
</Body>
<Head1>
write</Head1>
<Body>
Writes a string of text to a document stream opened by <Code>
document.<Bold>
open</Bold>
<Code>
</Code>
()</Code>
</Body>
<Head3>
Syntax</Head3>
<Code>
document.write(text)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
text</Code>
is a string containing the text to be written to the current document.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
document.open();</CellCode>
<CellCode>
document.write(“&lt;h1&gt;hello!&lt;/h1&gt;”);</CellCode>
<CellCode>
document.close();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Writing to a document that has already loaded without calling <Code>
document.open()</Code>
will automatically perform a <Code>
document.open()</Code>
call. Once you have finished writing, it is recommended to call <Code>
document.close()</Code>
, to tell the browser to finish loading the page. The text you write is parsed into the document's structure model. In the example above, the H1 element becomes a node in the document.</Body>
<Body>
If the <Code>
document.write()</Code>
call is embedded directly in the HTML code, then it will not call <Code>
document.open()</Code>
. For example:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;div&gt;</Code>
<Code>
&lt;script type=&quot;text/javascript&quot;&gt;</Code>
<Code>
document.write(&quot;&lt;h1&gt;Main title&lt;/h1&gt;&quot;)</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/div&gt;</Code>
<Code>
</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Specification</Head3>
<Code>
write</Code>
<Body>
</Body>
<Head1>
writeln</Head1>
<Body>
Writes a string of text followed by a newline character to a document.</Body>
<Head3>
Syntax</Head3>
<Code>
document.writeln(line)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
line</Code>
is string containing a line of text</Indent>
<Head3>
Example</Head3>
<Code>
document.writeln(“&lt;p&gt;enter password:&lt;/p&gt;”);</Code>
<Head3>
Notes</Head3>
<Body>
writeln is the same as write but adds a newline.</Body>
<Head3>
Specification</Head3>
<Code>
writeln</Code>
<Body>
</Body>
<Head1>
onblur</Head1>
<Body>
The onblur property returns the onBlur event handler code, if any, that exists on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onblur</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
warnFunc = window.onblur;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The blur event is raised when an element loses focus.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
onclick</Head1>
<Body>
The onclick property returns the onClick event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onclick</Code>
<Head3>
Example</Head3>
<Body>
Perhaps the simplest example of using the onclick DOM property is to retrieve the existing onclick event handler code. The following function sets the event handler code, then gets it and displays it.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
function pawnClick()  {</Code>
<Code>
p = document.getElementById(&quot;mutable&quot;);</Code>
<Code>
p.onclick = &quot;alert('moot!');&quot;;</Code>
<Code>
text = p.onclick;</Code>
<Code>
alert(text);</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The click event is raised when the user clicks on an element.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
ondblclick</Head1>
<Body>
The ondblclick property returns the onDblClick event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.ondblclick</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// &lt;img src=”pawn.gif” onDblClick=”movePawn(this);” /&gt;</Code>
<Code>
function pawnClick()  {</Code>
<Code>
i = document.getElementById(&quot;img1&quot;);</Code>
<Code>
alert(i.ondblclick);</Code>
<Code>
}</Code>
<Code>
// alerts: function anonymous(event) { movePawn(this) }</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The dblclick event is raised when the user double clicks an element.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
onfocus</Head1>
<Body>
The onfocus property returns the onFocus event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onFocus</Code>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
The focus event is raised when the user sets focus on the given element.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
onkeydown</Head1>
<Body>
The onkeydown property returns the onKeyDown event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onkeydown</Code>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
The keydown event is raised when the user presses a keyboard key.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
onkeypress</Head1>
<Body>
The onkeypress property returns the onKeyPress event handler code for the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onkeypress</Code>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
The keypress event is raised when the user presses a key on the keyboard.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
onkeyup</Head1>
<Body>
The onkeyup property returns the onKeyUp event handler code for the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onClick</Code>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
The keyup event is raised when the user releases a key that’s been pressed.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
onmousedown</Head1>
<Body>
The onmousedown property returns the onMouseDown event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onMouseDown</Code>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
The mousedown event is raised when the user presses the left button button.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
onmousemove</Head1>
<Body>
The onmousemove propety returns the onMouseDown event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onMouseMove</Code>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
The mousemove event is raised when the user moves the mouse.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
onmouseout</Head1>
<Body>
The onmouseout property returns the onMouseOut event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onMouseOut</Code>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
The mouseout event is raised when the mouse leaves an element (e.g, when the mouse moves off of an image in the web page, the mouseout event is raised for that image element).</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
onmouseover</Head1>
<Body>
The onmouseover property returns the onMouseOver event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onMouseOver</Code>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
The mouseover event is raised when the user moves the mouse over a particular element.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
onmouseup</Head1>
<Body>
The onmouseup property returns the onMouseUp event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onMouseUp</Code>
<Head3>
Example</Head3>
<Code>
None.</Code>
<Head3>
Notes</Head3>
<Body>
The mouseup event is raised when the user releases the left mouse button.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Head1>
onresize</Head1>
<Body>
The onResize property returns the onResize event handler code on the current element.</Body>
<Head3>
Syntax</Head3>
<Code>
event handling code = element.onresize</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// &lt;img src=”pawn.gif” onResize=”growBoard();” /&gt;</Code>
<Code>
function pawnClick()  {</Code>
<Code>
i = document.getElementById(&quot;img1&quot;);</Code>
<Code>
alert(i.onresize);</Code>
<Code>
}</Code>
<Code>
// alerts: function anonymous(event) { growBoard() }</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The resize event is raised when the user resizes a resizable element (such as a window).</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 0. Not part of specification.</Body>
<Body>
</Body>
<Body>
</Body>
</chapter>

<chapter>
<title>DOM Event Reference</title>
<Body>
This chapter describes the DOM Level 2 Event Model as implemented by Gecko. The <Code>
event</Code>
object itself is described, as well as the interfaces for event registration on other nodes in the DOM, event handers and event listeners, and several longer examples that show how the various event interfaces relate to one another.</Body>
<BulletedList>
<Bulleted>
<Bold>
DOM Event Interface</Bold>
</Bulleted>
<Bulleted>
<Bold>
DOM Event Handler List</Bold>
</Bulleted>
</BulletedList>
<Heading1>
DOM Event Interface</Heading1>
<Body>
The DOM <Code>
Event</Code>
interface is exposed in the <Code>
event</Code>
objects that are passed to the event handlers on various elements in the DOM. The following very simple example shows how an <Code>
event</Code>
object can be referenced and manipulated from within one such event handler.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function foo(e) {</CellCode>
<CellCode>
// event handling functions like this one</CellCode>
<CellCode>
// get a reference to the event they handle</CellCode>
<CellCode>
// (in this case as “e”).</CellCode>
<CellCode>
alert(e);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
table_el.onclick = foo;</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Body>
This example is woefully simplistic, but it shows an important feature of events in the Gecko DOM, which is that <Code>
event</Code>
objects in the DOM are typically accessed in the event handler functions. Once you have a reference to the <Code>
event</Code>
object, you can access all of the properties and methods described in this chapter.</Body>
<Body>
Also see <Bold>
Example 5: Event Propagation</Bold>
in the Examples chapter for a more detailed example of how events move through the DOM.</Body>
<Body>
In addition to the <Code>
event</Code>
object described here, the Gecko DOM also provides methods for registering event listeners on nodes in the DOM, removing those event listeners, and dispatching events from the DOM. These and the various <Bold>
Event Handlers</Bold>
on HTML or XML elements are the main entry points for events in the DOM. These three methods are described in the <Bold>
DOM Element Reference</Bold>
chapter of this book.</Body>
<Heading2>
Properties</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
altKey</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the <Code>
&lt;alt&gt;</Code>
key was pressed during the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
bubbles</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the event bubbles up through the DOM or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cancelBubble</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the bubbling up of the event has been canceled or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cancelable</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the event is cancelable.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
charCode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a number representing the character that was pressed as part of the key event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
clientX</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the horizontal position of the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
clientY</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the vertical position of the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
ctrlKey</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the <Code>
&lt;ctrl&gt;</Code>
key was pressed during the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
currentTarget</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the currently registered target for the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
detail</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns detail about the event, depending on the type of event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
eventPhase</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Used to indicate which phase of the event flow is currently being evaluated.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
isChar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the event produced a key character or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
keyCode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a number representing the character that was pressed as part of the key event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
layerX</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the horizontal coordinate of the event relative to the current layer.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
layerY</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the vertical coordinate of the event relative to the current layer.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
metaKey</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the <Code>
meta</Code>
key was pressed during the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
pageX</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the horizontal coordinate of the event relative to the page</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
pageY</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the vertical coorindate of the page relative to the page.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
relatedTarget</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Identifies a secondary target for the event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
screenX</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the horizontal position of the event on the screen.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
screenY</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the vertical position of the event on the screen.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
shiftKey</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the <Code>
&lt;shift&gt;</Code>
key was pressed when the event was fired.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
target</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the target to which the event was originally dispatched.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
timeStamp</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the time that the event was created.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
type</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the name of the event (case-insensitive).</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
view</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The view attribute identifies the</CellBody>
<CellBody>
<Code>
AbstractView</Code>
from which the event was generated.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Heading2>
Methods</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
initEvent</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The initEvent method is used to initialize the value of an Event created through the <Code>
DocumentEvent</Code>
interface.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
initMouseEvent</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
This method intializes the value of a mouse event once it’s been created</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
initUIEvent</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Initializes a UI event once it’s been created.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
preventDefault</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Cancels the event (if it is cancelable).</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
stopPropagation</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Stops the propagation of events further along in the DOM.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Body>
</Body>
<Head1>
altKey</Head1>
<Body>
Indicates whether the <Code>
&lt;alt&gt;</Code>
key was pressed when the event was fired.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.altKey</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean true | false.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goInput(e) { // checks altkey and</CellCode>
<CellCode>
if e.altKey         // passes event along</CellCode>
<CellCode>
superSizeOutput(e);</CellCode>
<CellCode>
else</CellCode>
<CellCode>
doOutput(e)</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
link to spec</Code>
<Body>
</Body>
<Head1>
bubbles</Head1>
<Body>
Indicates whether the given event bubbles up through the DOM or not.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.bubbles</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean true | false.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goInput(e) {  // checks bubbles and</CellCode>
<CellCode>
if not e.bubbles     // passes event along if it’s not</CellCode>
<CellCode>
passItOn(e);       // already bubbling</CellCode>
<CellCode>
doOutput(e)</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None..</Body>
<Head3>
Specification</Head3>
<Code>
link to spec</Code>
<Body>
</Body>
<Head1>
cancelBubble</Head1>
<Body>
Indicates whether the event bubbling was canceled for this event.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.cancelBubble</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean true | false.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
link to spec</Code>
<Body>
</Body>
<Head1>
cancelable</Head1>
<Body>
Indicates whether the event is cancelable.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.cancelable</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean true | false.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Whether an event can be canceled or not is something that’s determined when that event is created. To cancel an event, you must call the preventDefault() method on the event, which keeps it from executing the default action that is its usual result.</Body>
<Head3>
Specification</Head3>
<Code>
cancelable</Code>
<Body>
</Body>
<Head1>
charCode</Head1>
<Body>
Returns a number representing the character that was pressed as part of the key event.</Body>
<Head3>
Syntax</Head3>
<Code>
character = event.charCode</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
character</Code>
is a number representing the key that was pressed for the event.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if e.charCode == 0</CellCode>
<CellCode>
// mouseEvent!</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Mouse events generate a charCode of <Code>
0</Code>
. For a list of the charCode values associated with particular keys, run the example in <Bold>
Example 7: Displaying Event Object Constants</Bold>
and view the resulting HTML table.</Body>
<Head3>
Specification</Head3>
<Code>
Not part of specification.</Code>
<Code>
See nsIDOMKeyEvent.IDL</Code>
<Body>
</Body>
<Head1>
clientX</Head1>
<Body>
Returns the horizontal coordinate of the event within the DOM client area.</Body>
<Head3>
Syntax</Head3>
<Code>
returnType = event.property</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
param</Code>
is a something.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function checkClientClickMap(e) {</CellCode>
<CellCode>
if e.clientX &lt; 50</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
if 50 &lt;= e.clientX &lt; 100</CellCode>
<CellCode>
doYellowButton();</CellCode>
<CellCode>
if e.clientX &gt;= 100</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
clientY</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
clientX</Code>
<Body>
</Body>
<Head1>
clientY</Head1>
<Body>
Returns the vertical coordinate of the event within the DOM client area.</Body>
<Head3>
Syntax</Head3>
<Code>
returnType = event.property</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
param</Code>
is a something.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function checkClientClickMap(e) {</CellCode>
<CellCode>
if e.clientY &lt; 50</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
if 50 &lt;= e.clientY &lt; 100</CellCode>
<CellCode>
doYellowButton();</CellCode>
<CellCode>
if e.clientY &gt;= 100</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
clientX</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
clientY</Code>
<Body>
</Body>
<Head1>
ctrlKey</Head1>
<Body>
Indicates whether the <Code>
&lt;ctrl&gt;</Code>
key was pressed when the event was fired.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.ctrlKey</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean true | false.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goInput(e) { // checks ctrlKey and</CellCode>
<CellCode>
if e.ctrlKey        // passes event along</CellCode>
<CellCode>
superSizeOutput(e);</CellCode>
<CellCode>
else</CellCode>
<CellCode>
doOutput(e)</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
ctrlKey</Code>
<Body>
</Body>
<Head1>
currentTarget</Head1>
<Body>
Identifies the currently registered target for the event.</Body>
<Head3>
Syntax</Head3>
<Code>
targetObj = event.currentTarget</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
targetObj</Code>
is an object reference to a node in the DOM.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if e.currentTarget != t_el</CellCode>
<CellCode>
resetEventEngine();</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
currentTarget</Code>
<Body>
</Body>
<Head1>
detail</Head1>
<Body>
Returns detail about the event, depending on the type of event.</Body>
<Head3>
Syntax</Head3>
<Code>
detailedInfo = event.detail</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
detailedInfo</Code>
is a number.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;event.detail&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function giveDetails(e) {</CellCode>
<CellCode>
// details = e.detail;</CellCode>
<CellCode>
text = document.getElementById(&quot;t&quot;);</CellCode>
<CellCode>
text.setAttribute(&quot;value&quot;, e.detail);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
function init() {</CellCode>
<CellCode>
b1 = document.getElementById(&quot;b&quot;);</CellCode>
<CellCode>
b1.onclick=giveDetails;   </CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;body onload=&quot;init();&quot;&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;form&gt;</CellCode>
<CellCode>
&lt;input id=&quot;b&quot; type=&quot;button&quot; value=&quot;details&quot; /&gt;</CellCode>
<CellCode>
&lt;input id=&quot;t&quot; type=&quot;text&quot; value=&quot;&quot;  /&gt;&lt;br/&gt;</CellCode>
<CellCode>
&lt;input type=&quot;reset&quot; /&gt;</CellCode>
<CellCode>
&lt;/form&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
detail is a number representing how many times the mouse has been clicked in the same location for this event. The value of detail is usually 1.</Body>
<Head3>
Specification</Head3>
<Code>
detail</Code>
<Body>
</Body>
<Head1>
eventPhase</Head1>
<CellBody>
Indicates which phase of the event flow is currently being evaluated.</CellBody>
<Head3>
Syntax</Head3>
<Code>
phase = event.eventPhase</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
phase</Code>
is a number with one of the following possible values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
0</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
CAPTURING_PHASE</Code>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
1</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
AT_TARGET</Code>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
2</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
BUBBLING_PHASE</Code>
</CellBody>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
eventPhase</Code>
<Body>
</Body>
<Head1>
isChar</Head1>
<Body>
Returns a boolean indicating whether the event produced a key character or not.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.isChar</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
boolean </Code>
true | false</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if e.isChar</CellCode>
<CellCode>
echoInput(e.type);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Some key combos may raise events but not produce any character (example: <Code>
ctrl + alt</Code>
?). When this is the case, isChar returns false.</Body>
<Body>
isChar is used when event handlers need to do something like echo the input on the screen.</Body>
<Head3>
Specification</Head3>
<Code>
Not part of specification.</Code>
<Body>
</Body>
<Head1>
keyCode</Head1>
<Body>
Returns a number representing the character that was pressed as part of the key event.</Body>
<Head3>
Syntax</Head3>
<Code>
character = event.keyCode</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
character</Code>
is a number representing the key that was pressed for the event.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if e.keyCode == 0</CellCode>
<CellCode>
// mouseEvent!</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Mouse events generate a keyCode of <Code>
0</Code>
. For a list of the keyCode values associated with particular keys, run the example in <Bold>
Example 7: Displaying Event Object Constants</Bold>
and view the resulting HTML table.</Body>
<Head3>
Specification</Head3>
<Code>
Not part of specification.</Code>
<Code>
See nsIDOMKeyEvent.IDL</Code>
<Body>
</Body>
<Head1>
layerX</Head1>
<Body>
Returns the horizontal coordinate of the event relative to the current layer.</Body>
<Head3>
Syntax</Head3>
<Code>
coordinate = event.layerX</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
coordinate</Code>
is a number.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
link to spec</Code>
<Body>
</Body>
<Head1>
layerY</Head1>
<Body>
Returns the vertical coordinate of the event relative to the current layer.</Body>
<Head3>
Syntax</Head3>
<Code>
coordinate = event.pageY</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
coordinate</Code>
is a number.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
Not part of specification.</Code>
<Body>
</Body>
<Head1>
metaKey</Head1>
<Body>
Returns a boolean indicating whether the <Code>
&lt;meta&gt;</Code>
key was pressed when the event was fired.</Body>
<Head3>
Syntax</Head3>
<Code>
returnType = event.property</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
param</Code>
is a something.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goInput(e) { // checks metaKey and</CellCode>
<CellCode>
if e.metaKey        // passes event along</CellCode>
<CellCode>
superSizeOutput(e);</CellCode>
<CellCode>
else</CellCode>
<CellCode>
doOutput(e)</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
metaKey</Code>
<Body>
</Body>
<Head1>
pageX</Head1>
<Body>
Returns the horizontal coordinate of the event relative to the visible page.</Body>
<Head3>
Syntax</Head3>
<Code>
coordinate = event.pageX</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
coordinate</Code>
is a number.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
link to spec</Code>
<Body>
</Body>
<Head1>
pageY</Head1>
<Body>
Returns the vertical coordinate of the event relative to the visible page.</Body>
<Head3>
Syntax</Head3>
<Code>
coordindate = event.pageY</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
coordinate</Code>
is a number.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
link to spec</Code>
<Body>
</Body>
<Head1>
relatedTarget</Head1>
<Body>
Identifies a secondary target for the event.</Body>
<Head3>
Syntax</Head3>
<Code>
sTargetObj = event.relatedTarget</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sTargetObj</Code>
is a reference to an additional event target.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
var rel = event.relatedTarget;</CellCode>
<CellCode>
// dump(&quot;LEAVING &quot; + (rel ? rel.localName : &quot;null&quot;) + &quot;\n&quot;);</CellCode>
<CellCode>
</CellCode>
<CellCode>
// relatedTarget is null when the titletip is first shown:</CellCode>
<CellCode>
// a mouseout event fires because the mouse is exiting </CellCode>
<CellCode>
// the main window and entering the titletip &quot;window&quot;.</CellCode>
<CellCode>
</CellCode>
<CellCode>
// relatedTarget is also null when the mouse exits the main </CellCode>
<CellCode>
// window completely, so count how many times relatedTarget </CellCode>
<CellCode>
// was null after titletip is first shown and hide popup</CellCode>
<CellCode>
// the 2nd time</CellCode>
<CellCode>
if (!rel) {</CellCode>
<CellCode>
++this._mouseOutCount;</CellCode>
<CellCode>
if (this._mouseOutCount &gt; 1)</CellCode>
<CellCode>
this.hidePopup();</CellCode>
<CellCode>
return;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
// find out if the node we are entering is one of our 
// anonymous children</CellCode>
<CellCode>
while (rel) {</CellCode>
<CellCode>
if (rel == this)</CellCode>
<CellCode>
break;</CellCode>
<CellCode>
rel.parentNode;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
// if the entered node is not a descendant of ours, hide </CellCode>
<CellCode>
// the tooltip</CellCode>
<CellCode>
if (rel != this &amp;&amp; this._isMouseOver) {</CellCode>
<CellCode>
this.hidePopup();</CellCode>
<CellCode>
}        </CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
From the W3 spec: “Currently this attribute is used with the mouseover event to indicate the <Code>
EventTarget</Code>
which the pointing device exited and with the mouseout event to indicate the <Code>
EventTarget</Code>
which the pointing device entered.” </Body>
<Body>
The example above is typical: the <Code>
relatedTarget</Code>
property is used to find the other element, if any, involved in an event. Events like mouseovers are oriented around a certain target, but may also involve a secondary target, such as the target that is exited as the mouseover fires for the primary target.</Body>
<Head3>
Specification</Head3>
<Code>
relatedTarget</Code>
<Body>
</Body>
<Head1>
screenX</Head1>
<Body>
Returns the horizontal coordinate of the event within the screen as a whole..</Body>
<Head3>
Syntax</Head3>
<Code>
xCoord = event.screenX</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
xCoord</Code>
is the offset from the left side of the screen in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function checkClickMap(e) {</CellCode>
<CellCode>
if e.screenX &lt; 50</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
if 50 &lt;= e.screenX &lt; 100</CellCode>
<CellCode>
doYellowButton();</CellCode>
<CellCode>
if e.screenX &gt;= 100</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When you trap events on the window, document, or other roomy elements, you can get the coordinates of that event (e.g., a click) and route it properly, as the “clickMap” example demonstrates.</Body>
<Head3>
Specification</Head3>
<Code>
screenX</Code>
<Body>
</Body>
<Head1>
screenY</Head1>
<Body>
Returns the vertical coordinate of the event within the screen as a whole..</Body>
<Head3>
Syntax</Head3>
<Code>
yCoord = event.screenY</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
yCoord</Code>
is the offset from the top of the screen in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function checkClickMap(e) {</CellCode>
<CellCode>
if e.screenY &lt; 50</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
if 50 &lt;= e.screenY &lt; 100</CellCode>
<CellCode>
doYellowButton();</CellCode>
<CellCode>
if e.screenY &gt;= 100</CellCode>
<CellCode>
doRedButton();</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When you trap events on the window, document, or other roomy elements, you can get the coordinates of that event (e.g., a click) and route it properly, as the “clickMap” example demonstrates.</Body>
<Head3>
Specification</Head3>
<Code>
screenY</Code>
<Body>
</Body>
<Head1>
shiftKey</Head1>
<Body>
Returns a boolean indicating whether the <Code>
&lt;shift&gt;</Code>
key was pressed when the event was fired.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = event.shiftKey</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean true | false.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goInput(e) { // checks shiftKey and</CellCode>
<CellCode>
if e.shiftKey       // passes event along</CellCode>
<CellCode>
superSizeOutput(e);</CellCode>
<CellCode>
else</CellCode>
<CellCode>
doOutput(e)</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
shiftKey</Code>
<Body>
</Body>
<Head1>
target</Head1>
<Body>
Returns a reference to the <Code>
target</Code>
to which the event was originally dispatched.</Body>
<Head3>
Syntax</Head3>
<Code>
targ = event.target</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
targ</Code>
is a reference to an <Code>
EventTarget</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
d = document.getElementById(“d1”); </CellCode>
<CellCode>
if e.target != d</CellCode>
<CellCode>
resetGame(); // not my event!</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Additional notes.</Body>
<Head3>
Specification</Head3>
<Code>
target</Code>
<Body>
</Body>
<Head1>
timeStamp</Head1>
<Body>
Returns the time (in milliseconds since the epoch) that the event was created.</Body>
<Head3>
Syntax</Head3>
<Code>
time = event.timeStamp</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
time</Code>
is a number.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property only works if the event system supports it for the particular event.</Body>
<Head3>
Specification</Head3>
<Code>
timestamp</Code>
<Body>
</Body>
<Head1>
type</Head1>
<Body>
Returns the name of the event (case-insensitive).</Body>
<Head3>
Syntax</Head3>
<Code>
type = event.type</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
type</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The type must be an XML name..</Body>
<Head3>
Specification</Head3>
<Code>
type</Code>
<Body>
</Body>
<Head1>
view</Head1>
<Body>
The view attribute identifies the <Code>
AbstractView</Code>
from which the event was generated.</Body>
<Head3>
Syntax</Head3>
<Code>
aView = event.view</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
aView</Code>
is a reference to an <Code>
AbstractView</Code>
object.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
view</Code>
<Body>
</Body>
<Head1>
initEvent</Head1>
<Body>
The <Code>
initEvent</Code>
method is used to initialize the value of an Event created through the <Code>
DocumentEvent</Code>
interface.</Body>
<Head3>
Syntax</Head3>
<Code>
event.initKeyEvent(type, bubbles, cancelable)</Code>
<Head3>
Parameters</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
type</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The type of event</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
bubbles</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
A boolean indicating whether the event should bubble up through the event chain or not (see <Bold>
bubbles</Bold>
).</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
cancelable</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
A boolean indicating whether the event can be canceled (<Bold>
cancelable</Bold>
).</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// create a click event that bubbles up and </CellCode>
<CellCode>
// cannot be canceled</CellCode>
<CellCode>
event.initEvent(“click”, 1, 0)</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Events initialized in this way must have been created with the <Code>
DocumentEvent</Code>
interface method <Code>
createEvent()</Code>
. This method must be called to set the event before it is dispatched.</Body>
<Head3>
Specification</Head3>
<Code>
initEvent</Code>
<Body>
</Body>
<Head1>
initMouseEvent</Head1>
<Body>
This method intializes the value of a mouse event once it’s been created (by the <Code>
createEvent()</Code>
method on the <Code>
DocumentEvent</Code>
interface).</Body>
<Head3>
Syntax</Head3>
<Code>
event.initMouseEvent(String typeArg, </Code>
<Code>
boolean canBubbleArg,</Code>
<Code>
boolean cancelableArg,</Code>
<Code>
AbstractView viewArg,</Code>
<Code>
int detailArg,</Code>
<Code>
int screenXArg,</Code>
<Code>
int screenYArg,</Code>
<Code>
int clientXArg,</Code>
<Code>
int clientYArg,</Code>
<Code>
boolean ctrlKeyArg,</Code>
<Code>
boolean altKeyArg,</Code>
<Code>
boolean shiftKeyArg,</Code>
<Code>
boolean metaKeyArg,</Code>
<Code>
short buttonArg,</Code>
<Code>
EventTarget relatedTargetArg) </Code>
<Head3>
Parameters</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
typeArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the event type.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
canBubbleArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - whether or not the event can bubble.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
cancelableArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - whether or not the event's default action can be prevented.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
viewArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's AbstractView.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
detailArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's mouse click count.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
screenX</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
ArgSpecifies - the Event's screen x coordinate</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
screenYArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's screen y coordinate</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
clientXArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's client x coordinate</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
clientYArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's client y coordinate</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
ctrlKeyArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - whether or not control key was depressed during the Event.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
altKeyArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - whether or not alt key was depressed during the Event.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
shiftKeyArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - whether or not shift key was depressed during the Event.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
metaKeyArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - whether or not meta key was depressed during the Event.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
buttonArg</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's mouse button.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<Code>
relatedTargetArg</Code>
</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies - the Event's related EventTarget.</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
e.initMouseEvent(“click”, 1, 1, 
window, 1,</CellCode>
<CellCode>
10, 50, 10, 50, </CellCode>
<CellCode>
0, 0, 0, 0, </CellCode>
<CellCode>
1, div1)</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
initMouseEvent</Code>
<Body>
</Body>
<Head1>
initUIEvent</Head1>
<Body>
Initializes a UI event once it’s been created.</Body>
<Head3>
Syntax</Head3>
<Code>
event.initUIEvent(type, canBubble, view, detail)</Code>
<Head3>
Parameters</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
type</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The type of event</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
canBubble</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
A boolean indicating whether the event should bubble up through the event chain or not (see <Bold>
bubbles</Bold>
).</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
view</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The AbstractView associated with the event.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
detail</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Number indicating how many times the mouse has been clicked on a given screen location (usually 1).</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
e = document.createEvent( // fill // );</CellCode>
<CellCode>
e.initUIEvent(</CellCode>
<CellCode>
click”</CellCode>
<CellCode>
0,</CellCode>
<CellCode>
window</CellCode>
<CellCode>
1</CellCode>
<CellCode>
)</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
initUIEvent</Code>
<Body>
</Body>
<Head1>
preventDefault</Head1>
<Body>
Cancels the event (if it is cancelable).</Body>
<Head3>
Syntax</Head3>
<Code>
event.preventDefault()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if e.cancelable // may as well check.</CellCode>
<CellCode>
e.preventDefault();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
In this case, default is the default action performed when the event is handled. Calling preventDefault cancels this action.</Body>
<Head3>
Specification</Head3>
<Code>
preventDefault</Code>
<Body>
</Body>
<Head1>
stopPropagation</Head1>
<Body>
Prevents further propagation of the current event.</Body>
<Head3>
Syntax</Head3>
<Code>
event.stopPropagation()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
e.stopPropagation();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See <Bold>
Example 5: Event Propagation</Bold>
in the Examples chapter for a more detailed example of this method and event propagation in the DOM.</Body>
<Head3>
Specification</Head3>
<Code>
stopPropagation</Code>
<Body>
</Body>
<Body>
</Body>
<Heading1>
DOM Event Handler List</Heading1>
<Body>
The following is a complete list of the event handlers supported in the Gecko DOM. Note that not all elements support the full list. See the <Bold>
DOM Element Reference</Bold>
for the event handlers that are common to all elements.</Body>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellHeadingCtr>
Event Handler</CellHeadingCtr>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellHeadingCtr>
Event</CellHeadingCtr>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onmousedown</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
mouse button is pressed down.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onmouseup</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
mouse button is released.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onclick</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
event raised when mouse is clicked.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ondblclick</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
mouse is double-clicked.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onmouseover</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
mouse cursor moves over the target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onmouseout</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
mouse cursor leaves target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onmousemove</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
mouse cursor moves.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
oncontextmenu</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
context menu is created.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onkeydown</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a key has been pressed.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onkeyup</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a key has been released.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onkeypress</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a key has been pressed.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onfocus</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
focus has been set on the target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onblur</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
focus has moved away from the target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onload</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
the element/window has loaded.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onunload</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
the element/window has been unloaded.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onabort</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
the action has been aborted.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onerror</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
there has been an error.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onsubmit</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a form has been submitted.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onreset</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a form has been reset.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onchange</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a value in a form has been changed.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onselect</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
an element has been selected.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
oninput</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onpaint</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ontext</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onpopupShowing</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onpopupShown</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onpopupHiding</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onpopupHidden</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onclose</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
the window/frame has been closed.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
oncommand</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
the target element has been activated (e.g., clicked, selected, etc.)</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onbroadcast</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
oncommandupdate</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ondragenter</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ondragover</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
an item has been dragged over the event target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ondragexit</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ondragdrop</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
an item has been dropped onto the event target.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
ondraggesture</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onresize</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Element/window has been resized.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onscroll</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Window/frame has been scrolled</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
overflow</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
text in window/frame overflows available space.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onunderflow</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onoverflowchanged</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onsubtreemodified</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a subtree of the current document has been modified in some way.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onnodeinserted</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a node has been inserted into the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onnoderemoved</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a node has been removed from the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onnoderemovedfromdocument</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a node has been removed from the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onnodeinsertedintodocument</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a new node has been inserted into the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
onattrmodified</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
a DOM attribute has been modified.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
oncharacterdatamodified</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Character data has been modified.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Body>
</Body>
</chapter>

<chapter>
<title>DOM Style Reference</title>
<Body>
To ADD: using element.setAttribute(&quot;style&quot;, &quot;background-color: blue;&quot;) will remove any existing style properties on the element, so it's considered dangerous.</Body>
<Body>
</Body>
<Body>
This chapter describes the <Code>
style</Code>
objects and the various interfaces they make available for manipulating style rules for HTML and XML documents. The final section, <Bold>
DOM CSS Properties List</Bold>
, is a list of the style properties that can be set or returned with the <Code>
element.style</Code>
property.</Body>
<ListBulletList>
<ListBullet>
<Bold>
DOM Style Object</Bold>
</ListBullet>
<ListBullet>
<Bold>
DOM styleSheet Object</Bold>
</ListBullet>
<ListBullet>
<Bold>
DOM cssRule Object</Bold>
</ListBullet>
<ListBullet>
<Bold>
DOM CSS Properties List</Bold>
</ListBullet>
</ListBulletList>
<Body>
The basic <Code>
style</Code>
object exposes the <Code>
StyleSheet</Code>
and the <Code>
CSSStyleSheet</Code>
interfaces from the DOM Level 2 Events specification. Those interfaces contain members like <Code>
insertRule</Code>
, <Code>
selectorText</Code>
, and <Code>
parentStyleSheet</Code>
for accessing and manipulating the individual style rules that make up a CSS stylesheet.</Body>
<Body>
To get to the <Code>
style</Code>
objects from the <Code>
document</Code>
, you can use the <Code>
document.styleSheets</Code>
property and access the individual objects by index (e.g., <Code>
document.styleSheets[0]</Code>
is the first stylesheet defined for the document, etc.). Though there are various syntaxes for expressing stylesheets for a document, Netscape supports CSS exclusively, so the <Code>
style</Code>
object retrieved from this array implements both the StyleSheet and CSSStyleSheet interfaces.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
ss = document.styleSheets[1];</Code>
<Code>
ss.cssRules[0].style.backgroundColor=&quot;blue&quot;;</Code>
</CELL>
</ROW>
</TABLE>
<Body>
The list of properties available in the DOM from the style property is given in the <Bold>
DOM CSS Properties List</Bold>
section below.</Body>
<Body>
The element <Bold>
style</Bold>
property can also be used to get the styles on an element. However, this property only returns style attributes that have been set in-line (e.g, <Code>
&lt;td style=”background-color: lightblue”&gt;</Code>
returns the string “background-color:lightblue,” though there may be other styles on the element from a stylesheet). Also, when you set this property on an element, you override and erase any styles that have set elsewhere.</Body>
<Body>
Instead, the <Code>
getComputedStyle()</Code>
method on the <Code>
document.defaultView</Code>
object returns all styles that have actually been computerd for an element. See <Bold>
Example 6: getComputedStyle</Bold>
in the examples chapter for more information on how to use this method.</Body>
<Heading1>
DOM 
Style Object</Heading1>
<Body>
The <Code>
style</Code>
object represents an individual style statement. Unlike the individual rules available from the<Code>
document.styleSheets</Code>
array, the style object is accessed from the <Code>
document</Code>
or from the elements to which that style is applied. It represents the in-line styles on a particular element.</Body>
<Body>
More important than the two properties surfaced here is the use of the <Code>
style</Code>
object in the following sorts of manipulations, where the style object can be used to set individual style properties on an element:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;link rel=&quot;StyleSheet&quot; href=&quot;example.css&quot;/&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function stilo() {</CellCode>
<CellCode>
document.getElementById(&quot;d&quot;).
style.color = &quot;orange&quot;;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;div id=&quot;d&quot; class=&quot;thunder&quot;&gt;Thunder&lt;/div&gt;</CellCode>
<CellCode>
&lt;button onclick=&quot;stilo()&quot;&gt;ss&lt;/button&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Body>
The media and type of the style may or may not be given. Note that you can also change styles on an element by getting a reference to that element and then using the setAttribute() DOM method to specify both the CSS property and its value.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
el = document.getElementById(“some-element”);</Code>
<Code>
el.setAttribute(“style”, “background-color:darkblue;”);</Code>
</CELL>
</ROW>
</TABLE>
<Body>
Be aware, however, that when you set the style attribute in this way, you are overwriting whatever style properties may already have been defined in the style attribute. If the document referenced in the snippet above by the id “some-element” has a <Code>
style</Code>
attribute in which the font size is set to <Code>
18px,</Code>
for example, that information is erased when the style attribute is manipulated in this crude way.</Body>
<Head2>
Properties</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
media</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Specifies the intended destination medium for style information.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
type</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the type of style being applied by this statement.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head1>
media</Head1>
<Body>
media specifies the intended destination medium for style information.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
medium = style.media</Code>
<Code>
style.media = medium</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
medium</Code>
is a string describing a single medium or a comma-separated list.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
example here</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The default value for media is “screen.”</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 Styles - <Code>
STYLE</Code>
</Body>
<Body>
</Body>
<Head1>
type</Head1>
<Body>
Returns the type of the current style.</Body>
<Head3>
Syntax</Head3>
<Code>
type = style.type</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
type</Code>
is a sting containing the type.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
if ( newStyle.type != “text/css” ){</Code>
<Code>
// not supported!</Code>
<Code>
warnCSS();</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
For Gecko, the type is most often given as “text/css.”</Body>
<Body>
From the W3C spec on CSS: “The expectation is that binding-specific casting methods can be used to cast down from an instance of the <Code>
CSSRule</Code>
interface to the specific derived interface implied by the type.”</Body>
<Head3>
Specification</Head3>
<Body>
link to DOM spec here</Body>
<Body>
</Body>
<Heading1>
DOM 
styleSheet Object</Heading1>
<Body>
The stylesheet object represents the stylesheet itself. A stylesheet contains any number of separate rules, which can be manipulated with the <Code>
cssRule</Code>
(see <Code>
<Bold>
DOM cssRule Object</Bold>
<Code>
</Code>
</Code>
below).</Body>
<Body>
Using the <Code>
stylesheet</Code>
object, you can add and delete style rules. You can also travel the hierarchy of stylesheets that can be associated with a particular document using the <Bold>
parentStyleSheet</Bold>
property.</Body>
<Body>
</Body>
<Head2>
Properties</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cssRules</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns all of the CSS rules in the stylesheet as an array.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
disabled</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
This property indicates whether the current stylesheet has been applied or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
href</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the location of the stylesheet.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
media</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Specifies the intended destination medium for style information.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
ownerNode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the node that associates this style sheet with the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
ownerRule</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
If this style sheet comes from an <Code>
@import</Code>
rule, the ownerRule property will contain the CSSImportRule.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
parentStyleSheet</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the stylesheet that is including this one, if any.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
title</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the advisory title of the current style sheet.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
type</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Specifies the style sheet language for this style sheet. </CellBody>
</CELL>
</ROW>
</TABLE>
<Head2>
Methods</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
deleteRule</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Deletes a rule from the stylesheet.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
insertRule</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Inserts a new style rule into the current style sheet.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head1>
cssRules</Head1>
<Body>
Returns all of the CSS rules in the stylesheet as an array.</Body>
<Head3>
Syntax</Head3>
<Code>
rules = stylesheet.cssRules</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
rules</Code>
is an array of individual <Code>
cssRule</Code>
objects.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// get to the first rule</CellCode>
<CellCode>
first_rule = document.styleSheets[0].cssRules[0];</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See <Bold>
DOM cssRule Object</Bold>
.</Body>
<Head3>
Specification</Head3>
<Body>
<Code>
cssRule</Code>
</Body>
<Body>
</Body>
<Head1>
disabled</Head1>
<Body>
This property indicates whether the current stylesheet is applied or not.</Body>
<Head3>
Syntax</Head3>
<Code>
res = stylesheet.disabled</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
res</Code>
is a boolean True or False</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// if the stylesheet is applied...</CellCode>
<CellCode>
if (stylesheet.disabled) {</CellCode>
<CellCode>
// apply style in-line</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
disabled</Code>
<Body>
</Body>
<Head1>
href</Head1>
<Body>
Returns the location of the stylesheet.</Body>
<Head3>
Syntax</Head3>
<Code>
href = stylesheet.href</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
href</Code>
is a string containing the URI of the stylesheet.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// on a local machine:</Code>
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;link rel=&quot;StyleSheet&quot; href=&quot;example.css&quot; type=&quot;text/css&quot; /&gt;</Code>
<Code>
&lt;script&gt;</Code>
<Code>
function sref() {</Code>
<Code>
alert(document.styleSheets[0].href);</Code>
<Code>
}</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
</Code>
<Code>
&lt;body&gt;</Code>
<Code>
&lt;div class=&quot;thunder&quot;&gt;Thunder&lt;/div&gt;</Code>
<Code>
&lt;button onclick=&quot;sref()&quot;&gt;ss&lt;/button&gt;</Code>
<Code>
&lt;/body&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<Code>
</Code>
<Code>
// returns “file:////C:/Windows/Desktop/example.css</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the style sheet is a linked style sheet, the value of its attribute is its location. For inline style sheets, the value of this attribute is <Code>
NULL</Code>
. </Body>
<Head3>
Specification</Head3>
<Code>
href</Code>
<Body>
</Body>
<Head1>
media</Head1>
<Body>
media specifies the intended destination medium for style information.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
medium = stylesheet.media</Code>
<Code>
stylesheet.media = medium</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
medium</Code>
is a string describing a single medium or a comma-separated list.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;link rel=&quot;StyleSheet&quot; </Code>
<Code>
href=&quot;document.css&quot; </Code>
<Code>
type=&quot;text/css&quot; </Code>
<Code>
media=&quot;screen&quot; /&gt;</Code>
<Code>
</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The default value for media is “screen.”</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 Styles - <Code>
STYLESHEET</Code>
</Body>
<Body>
</Body>
<Head1>
ownerNode</Head1>
<Body>
ownerNode returns the node that associates this style sheet with the document.</Body>
<Head3>
Syntax</Head3>
<Code>
node = stylesheet.ownerNode</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
node</Code>
is an object reference to the element that brings in the stylesheet.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;link rel=&quot;StyleSheet&quot; href=&quot;example.css&quot; type=&quot;text/css&quot; /&gt;</Code>
<Code>
&lt;script&gt;</Code>
<Code>
function stilo() {</Code>
<Code>
alert(document.styleSheets[0].ownerNode);</Code>
<Code>
}</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
</Code>
<Code>
&lt;body&gt;</Code>
<Code>
&lt;div class=&quot;thunder&quot;&gt;Thunder&lt;/div&gt;</Code>
<Code>
&lt;button onclick=&quot;stilo()&quot;&gt;ss&lt;/button&gt;</Code>
<Code>
&lt;/body&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<Code>
// displays “object HTMLLinkElement”</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
For HTML, ownerNode may be the corresponding <Code>
LINK</Code>
or <Code>
STYLE</Code>
element. For XML, it may be the linking processing instruction. For style sheets that are included by other style sheets, the value of this attribute is <Code>
null</Code>
.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 Styles - <Code>
STYLESHEET</Code>
</Body>
<Body>
</Body>
<Head1>
ownerRule</Head1>
<Body>
If this style sheet comes from an <Code>
@import</Code>
rule, the ownerRule property will contain the CSSImportRule.</Body>
<Head3>
Syntax</Head3>
<Code>
rule = stylesheet.ownerRule</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
rule</Code>
is a string containing the importing rule in the HTML or XML document</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// example here</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that if the value of the ownerNode property on the current <Code>
STYLE</Code>
element is <Code>
NULL</Code>
, then then ownerRule returns the rule that blah. And vice versa.</Body>
<Head3>
Specification</Head3>
<Code>
ownerRule</Code>
<Body>
</Body>
<Head1>
parentStyleSheet</Head1>
<Body>
Returns the stylesheet that is including this one, if any.</Body>
<Head3>
Syntax</Head3>
<Code>
parent = stylesheet.parentStyleSheet</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
parent</Code>
is an object reference</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// find the top level stylesheet</Code>
<Code>
if (stylesheet.parentStyleSheet) {</Code>
<Code>
sheet = stylesheet.parentStyleSheet;</Code>
<Code>
} else { sheet = stylesheet; }</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property returns <Code>
NULL</Code>
is the current stylesheet is a top-level stylesheet or if stylesheeet inclusion is not supported.</Body>
<Head3>
Specification</Head3>
<Code>
parentStyleSheet</Code>
<Body>
</Body>
<Head1>
title</Head1>
<Body>
title returns the advisory title of the current style sheet.</Body>
<Head3>
Syntax</Head3>
<Code>
line of code</Code>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// example here</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The title is often specified in the ownerNode.</Body>
<Head3>
Specification</Head3>
<Code>
title</Code>
<Body>
</Body>
<Head1>
type</Head1>
<Body>
type specifies the style sheet language for this style sheet. </Body>
<Head3>
Syntax</Head3>
<Code>
type = stylesheet.type</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
type</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
ss.type = “text/css”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
type</Code>
<Body>
</Body>
<Head1>
deleteRule</Head1>
<Body>
The deleteRule method removes a style rule from the current style sheet object.</Body>
<Head3>
Syntax</Head3>
<Code>
stylesheet.deleteRule(index)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
index</Code>
is a long number representing the position of the rule</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
myStyles.deleteRule(0);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
deleteRule</Code>
<Body>
</Body>
<Head1>
insertRule</Head1>
<Body>
The insertRule method inserts a new style rule into the current style sheet.</Body>
<Head3>
Syntax</Head3>
<Code>
stylesheet.insertRule(rule, index)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
rule</Code>
is a string containing the rule to be inserted (selector and declaration)</Indent>
<Indent>
<Code>
index</Code>
is a number representing the position to be inserted</Indent>
<Head3>
Example</Head3>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// push a new rule onto the top of my stylesheet</Code>
<Code>
myStyle.insertRule(“#blanc { color: white }”, 0);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
For rule sets this contains both the selector and the style declaration. For at-rules, this specifies both the at-identifier and the rule content.</Body>
<Head3>
Specification</Head3>
<Code>
insertRule</Code>
<Body>
</Body>
<Body>
</Body>
<Heading1>
DOM 
cssRule Object</Heading1>
<Body>
The <Code>
cssRule</Code>
object represents a single CSS style rule. These rules may be a part of a stylesheet or they may be placed in-line with the individual nodes in the HTML or XML document. Each stylesheet object exposes an array of the cssRules that make it up, and you can also get to the rules on individual elements by using the <Code>
element.style</Code>
property.</Body>
<Head2>
Properties</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cssText</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
cssText returns the actual text of the style rule.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
parentStyleSheet</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
parentStyleSheet returns the stylesheet object in which the current rule is defined.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
selectorText</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
selectorText gets/sets the textual representation of the selector for the rule set. </CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
style</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
style returns the declaration block for the current style.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head1>
cssText</Head1>
<Body>
cssText returns the actual text of the style rule.</Body>
<Head3>
Syntax</Head3>
<Code>
text = cssRule.cssText</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
text</Code>
is a string containing the style rule text.</Indent>
<Head3>
Example</Head3>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
if ( myRule.cssText.indexOf(“background-color”) != -1 ) {</Code>
<Code>
bgRule = myRule;</Code>
<Code>
}</Code>
<Code>
...</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 Style - <Code>
cssRule</Code>
</Body>
<Body>
</Body>
<Head1>
parentStyleSheet</Head1>
<Body>
parentStyleSheet returns the stylesheet object in which the current rule is defined.</Body>
<Head3>
Syntax</Head3>
<Code>
stylesheet = cssRule.parentStyleSheet</Code>
<Head3>
Parameters</Head3>
<Indent>
stylesheet is a <Code>
stylesheet</Code>
object</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
if ( bgRule.parentStyleSheet != mySheet ) {</Code>
<Code>
// alien style rule!</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See <Bold>
DOM styleSheet Object</Bold>
for more information about the <Code>
stylesheet</Code>
object interface.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 Style - <Code>
cssRule</Code>
</Body>
<Body>
</Body>
<Head1>
selectorText</Head1>
<Body>
selectorText gets/sets the textual representation of the selector for the rule set. </Body>
<Head3>
Syntax</Head3>
<Code>
text = cssRule.selectorText</Code>
<Code>
cssRule.selectorText = text</Code>
<Head3>
Parameters</Head3>
<Indent>
text is a string containing the text of the selector.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// for cssrule: body { background-color: darkblue; }</Code>
<Code>
cssrule = document.styleSheets[1] XXX.</Code>
<Code>
selector = cssrule.selectorText;</Code>
<Code>
// selector is now “body”</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The implementation may have stripped out insignificant whitespace while parsing the selector.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 Style - <Code>
cssRule</Code>
</Body>
<Body>
</Body>
<Head1>
style</Head1>
<Body>
style returns the declaration block for the current style.</Body>
<Head3>
Syntax</Head3>
<Code>
styleObj = cssRule.style</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
styleObj</Code>
is an object reference to the style declaration<Code>
</Code>
</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
function stilo() {</Code>
<Code>
alert(document.styleSheets[0].
cssRules[0].style.cssText);</Code>
<Code>
}</Code>
<Code>
// displays “background-color: gray;”</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The declaration block is that part of the style rule that appears within the braces and that actually provides the style definitions (for the selector, the part that comes before the braces).</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 Style - <Code>
cssRule</Code>
</Body>
<Heading1>
DOM CSS Properties List</Heading1>
<Body>
The following is a list of the CSS properties that are supported in the Netscape 6 DOM and accessible by means of the <Code>
style</Code>
property on elements.</Body>
<Body>
The following complete document examples shows the typical use of the <Code>
element.style</Code>
property to get and set the CSS properties listed here:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;script&gt;</Code>
<Code>
function changeStyle()  {</Code>
<Code>
c = document.getElementById(&quot;tid&quot;);</Code>
<Code>
c.style = &quot;padding right: 20px&quot;;</Code>
<Code>
}</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;</Code>
<Code>
&lt;td id=&quot;tid&quot;&gt;Example Cell&lt;/td&gt;&lt;/tr&gt;</Code>
<Code>
&lt;/table&gt;</Code>
<Code>
&lt;form&gt;</Code>
<Code>
&lt;input value=&quot;addpad&quot; 
type=&quot;button&quot; 
onclick=&quot;changeStyle();&quot; /&gt;</Code>
<Code>
&lt;/form&gt;</Code>
<Code>
&lt;/html&gt;</Code>
</CELL>
</ROW>
</TABLE>
<BodyKeepNext>
Styles can be returned or set with the <Code>
style</Code>
property and these attributes but that you cannot set values directly using constructions such as <Code>
style=”background-color: blue”</Code>
from the DOM, where the value is a string that contains both the attribute and the value you wish to set. By itself, the <Code>
style</Code>
property should only be used as a “getter” and not a “setter.” In other words, the first of the following two constructions is bad, and the latter is better practice in the DOM:</BodyKeepNext>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
bad: element.style = “background-color: blue”;</CellCode>
<CellCode>
</CellCode>
<CellCode>
good: element.style.backgroundColor = “blue”;</CellCode>
</CELL>
</ROW>
</TABLE>
<Body>
Note that the bad example above may actually set the background color of the given element, but this assignment overwrites any style information that already existed on that element, and then cannot be added to or updated without other overwrites. The special style attributes available off of the element’s style property allow you to “manage” the style of your elements in a safer and more organized way.</Body>
<Body>
See also: the Element <Bold>
style</Bold>
property.</Body>
<BodyKeepNext>
You can check the syntax for the values of these attributes by consulting the DOM CSS specification.</BodyKeepNext>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
accelerator	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
font	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
pause	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
azimuth</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
fontFamily</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
pauseAfter</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
background</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
fontSize	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
pauseBefore</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
backgroundAttachment</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
fontSizeAdjust	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
pitch	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
backgroundColor</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
fontStretch	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
pitchRange</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
backgroundImage	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
fontStyle	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
playDuring</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
backgroundPosition</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
fontVariant	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
position	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
backgroundRepeat	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
fontWeight	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
quotes	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
border</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
height	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
richness</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderBottom</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
left	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
right	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderBottomColor</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
length	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
size	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderBottomStyle</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
letterSpacing</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
speak	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderBottomWidth</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
lineHeight	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
speakHeader</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderCollapse</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
listStyle	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
speakNumeral</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderColor	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
listStyleImage	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
speakPunctuation</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderLeft	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
listStylePosition</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
speechRate	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderLeftColor	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
listStyleType	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
stress	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderLeftStyle	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
margin	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
tableLayout	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderLeftWidth	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
marginBottom</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
textAlign	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderRight	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
marginLeft	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
textDecoration	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderRightColor</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
marginRight	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
textIndent	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderRightStyle</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
marginTop	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
textShadow	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderRightWidth</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
markerOffset	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
textTransform	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderSpacing	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
marks	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
top</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderStyle	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
maxHeight</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
unicodeBidi</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderTop	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
maxWidth	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
verticalAlign</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderTopColor	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
minHeight	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
visibility	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderTopStyle	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
minWidth	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
voiceFamily	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderTopWidth	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MozBinding	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
volume	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
borderWidth	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MozOpacity	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
whiteSpace</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
bottom	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
orphans	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
widows	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
captionSide</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
outline	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
width	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
clear</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
outlineColor</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
wordSpacing	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
clip	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
outlineStyle</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
zIndex	</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
color	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
outlineWidth</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
content	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
overflow	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
counterIncrement</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
padding	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
counterReset	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
paddingBottom	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
cssFloat	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
paddingLeft	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
cssText	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
paddingRight	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
cue	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
paddingTop	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
cueAfter</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
page	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
cueBefore</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
pageBreakAfter	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
cursor	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
pageBreakBefore	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
direction</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
pageBreakInside	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
display	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
parentRule	</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
elevation</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
emptyCells</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head3>
DOM Frame Reference</Head3>
<Body>
This document contains reference information for the following DOM objects:</Body>
<BulletedList>
<Bulleted>
<Bold>
FRAMESET</Bold>
</Bulleted>
<Bulleted>
<Bold>
FRAME</Bold>
</Bulleted>
<Bulleted>
<Bold>
IFRAME</Bold>
</Bulleted>
</BulletedList>
<Head1>
FRAMESET</Head1>
<Body>
The <Code>
FRAMESET</Code>
element is a structure for containing subframes in HTML. It manages <Code>
FRAME</Code>
elements but not <Code>
IFRAMES</Code>
, which are inserted “in-line” into the document. In HTML, a frameset takes the following basic structure:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
&lt;frameset&gt;</Code>
<Code>
&lt;frame src=”some_doc.html” id=”frame1” /&gt;</Code>
<Code>
&lt;frame src=”other_doc.html” /&gt;</Code>
<Code>
&lt;/frameset&gt;</Code>
</CELL>
</ROW>
</TABLE>
<Body>
The DOM <Code>
frameset</Code>
object provides minimal programmatic access to the FRAMESET HTML element. Its interface--the two optional properties cols and rows--are a way to indicate the dimensions of the frame set, how many subframes it manages. Note that the <Code>
frameset</Code>
object does not provide interfaces for getting to the subframes it manages. </Body>
<Body>
To get the frames in a document, you must ask the document itself, using the <Code>
document.getElementById()</Code>
method and the id of the frame(s) you want, or the <Code>
document.getElementsByTagName(“FRAME”)</Code>
, which returns a <Code>
NamedNodeList</Code>
array:</Body>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
f1 = document.getElementById(“frame1”);</Code>
<Code>
alert(f1.src); // print the src of the first frame</Code>
<Code>
</Code>
<Code>
frames = document.getElementsByTagName(“FRAME”);</Code>
<Code>
for (var i = 0; i &lt; frames.length; i++) {</Code>
<Code>
// do something with each frame as frames[i]</Code>
<Code>
</Code>
<Code>
}</Code>
<Code>
</Code>
</CELL>
</ROW>
</TABLE>
<Head2>
Properties</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cols</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
This property sets or returns the size of the columns of frames in the frameset..</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
rows</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
This property sets or returns the number of rows of frames in the frameset.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head1>
cols
</Head1>
<Body>
This property sets or returns the size of the columns of frames in the frameset.</Body>
<Head3>
Syntax</Head3>
<Code>
cols = frameSetElement.cols</Code>
<Code>
frameSetElement.cols = cols</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
cols</Code>
is the size of columns in the frameset as a comma-separated list.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// element in HTML: &lt;frameset id=”fset” &gt;</Code>
<Code>
fs = document.getElementById(“fset”);</Code>
<Code>
fs.cols = &quot;200, *&quot;; // two columns of frames, first 200px</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The cols and rows properties are often used together to lay out the dimensions of a frameset in HTML. If these are not specified, then the frameset simply counts the number of frames it manages. The number of values in the cols attribute determines how many frames there are; the “*” specifies that the column take up all of the remaining space.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameSetElement</Code>
</Body>
<Body>
</Body>
<Head1>
rows</Head1>
<Body>
This property sets or returns the number of rows of frames in the frameset.</Body>
<Head3>
Syntax</Head3>
<Code>
rows = frameSetElement.rows</Code>
<Code>
frameSetElement.rows = rows</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
rows</Code>
is the number of rows in the frameset.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// element in HTML: &lt;frameset id=”fset” &gt;</Code>
<Code>
fs = document.getElementById(“fset”);</Code>
<Code>
fs.rows = 8; // eight rows of frames</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The cols and rows properties are often used together to lay out the dimensions of a frameset in HTML. If these are not specified, then the frameset simply counts the number of frames it manages. For example, if you have a frameset like the one below, then blah blah...</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameSetElement</Code>
</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
FRAME</Head1>
<Body>
The <Code>
frame</Code>
object provides methods and properties for manipulating the HTML <Code>
FRAME</Code>
element. While many of the properties (e.g., frameBorder, marginWidth) handle the <Code>
FRAME</Code>
itself, the contentDocument property allows you to get the actual document contained in the subframe, which can then be futher manipulated.</Body>
<Head2>
Properties</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
contentDocument</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The contentDocument property returns the document the frame contains, if any.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
contentWindow</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The <Code>
contentWindow</Code>
property returns the window object for the frame.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
frameBorder</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<Code>
frameBorder</Code>
gets/sets the border around the current frame.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
longDesc</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The longDesc property specifies a url for a longer description of the contents of the current frame.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
marginHeight</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the height of the frame’s margin in pixels.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
marginWidth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the width of the frame’s margin in pixels.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
name</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The name of the frame element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
noResize</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets whether the user can resize the current frame.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
scrolling</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The scrolling property specifies whether the current frame should provide scrollbars or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
src</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The src property provides a url to load as content into the current frame.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head1>
contentDocument</Head1>
<Body>
The <Code>
contentDocument</Code>
property returns the document the frame contains, if any.</Body>
<Head3>
Syntax</Head3>
<Code>
document = frameElement.contentDocument</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
document</Code>
is an object reference to the document contained in the given frame.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
f = document.getElementById(“frame”);</Code>
<Code>
if ( f.contentDocument ) {</Code>
<Code>
src_doc = f.contentDocument;</Code>
<Code>
working_title = src_doc.title;</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property returns <Code>
NULL</Code>
if there is no current document</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
contentWindow</Head1>
<Body>
The <Code>
contentWindow</Code>
property returns the window object for the frame.</Body>
<Head3>
Syntax</Head3>
<Code>
frameWindow = frameElement.contentWindow</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
frameWindow</Code>
is an object reference to the <Code>
window</Code>
object for this frame.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
f = document.getElementById(“frame”);</Code>
<Code>
f.contentWindow.location = “http://mozilla.org”;</Code>
<Code>
f.contentWindow.history.back();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
You can also get to the <Code>
window</Code>
object through a named frame. For example, a frame with the <Code>
name=”myFrame”</Code>
can refer back to the <Code>
window</Code>
object as <Code>
window.frames[“myFrame”]</Code>
.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
frameBorder</Head1>
<Body>
frameBorder gets/sets the border around the current frame.</Body>
<Head3>
Syntax</Head3>
<Code>
border = frameElement.frameBorder</Code>
<Code>
frameElement.frameBorder = border</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
border</Code>
gives the border width in number of pixels as string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// create a border around the current frame</Code>
<Code>
f = document.getElementById(“frame-1”);</Code>
<Code>
f.frameBorder = 2; </Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that the data type for the value of the <Code>
frameBorder</Code>
is a string. This is because the value may be specified as either a number of pixels (e.g., “2”) or a percentage, in which case the percent sign is included. A value of “0” means no border at all.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
longDesc</Head1>
<Body>
The longDesc property specifies a url for a longer description of the contents of the current frame.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
url = frameElement.longDesc</Code>
<Code>
frameElement.longDesc = url</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
The <Code>
url</Code>
string provides a url where a longer description of the current frame can be found.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
f = document.getElementById(“main-frame”);</Code>
<Code>
f.longDesc = “http://www.netcape.com/supplements/more.html”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
In the case of <Code>
FRAME</Code>
elements, the longDesc property is a way to point to a longer description than the title of the <Code>
FRAME</Code>
provides</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
marginHeight</Head1>
<Body>
Gets/sets the height of the frame’s margin in pixels.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
sHeight = frameElement.marginHeight</Code>
<Code>
frameElement.marginHeight = sHeight</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
The <Code>
sHeight</Code>
string gives the height of the frame’s margin in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
f = document.getElementById(“frame1”);</Code>
<Code>
f.marginHeight = 3;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
marginWidth</Head1>
<Body>
Gets/sets the width of the frame’s margin in pixels.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
sWidth = frameElement.marginWidth</Code>
<Code>
frameElement.marginWidth = sWidth</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
The <Code>
sWidth</Code>
string gives the width of the frame’s margin in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
f = document.getElementById(“frame1”);</Code>
<Code>
f.marginWidth = 3;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
name</Head1>
<Body>
The name of the current frame.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
framename = frameElement.name</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
frameName</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
f = document.getElementById(“main-frame”);</Code>
<Code>
if (f.name != “main”) {</Code>
<Code>
//</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
In the HTML, you can set the FRAME name attribute directly: 
<Code>
&lt;frame name=”f1”/&gt;</Code>
and then refer to that frame in the DOM with <Code>
window.frames[“f1”]</Code>
.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
noResize</Head1>
<Body>
Gets/sets whether the user can resize the current frame.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
bool = frameElement.noResize</Code>
<Code>
frameElement.noResize = bool</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean value indicating whether the current frame is resizable or not.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
f = document.getElementById(“main-frame”);</Code>
<Code>
if ( user_level == “barney” ) {</Code>
<Code>
f.noResize = true;</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
scrolling</Head1>
<Body>
The scrolling property specifies whether the current frame should provide scrollbars or not.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
sBars = frameElement.scrolling</Code>
<Code>
frameElement.scrolling = sBars</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sBars</Code>
is a string with the value “auto”, “no,” or “yes.”</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
f = document.getElementById(“main-frame”);</Code>
<Code>
f.scrolling = yes;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The default value for this property is “auto,” which specifies that scrollbars be added whenever necessary. “yes” means that they are always present, and “no” means that they are never present. </Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
src</Head1>
<Body>
The src property provides a url to load as content into the current frame.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
frameElement.src = sURL</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sURL</Code>
is a string containing a URL.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
f = document.getElementById(“content-frame”);</Code>
<Code>
f.src = “www.netscape.com”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Head1>
IFRAME</Head1>
<Body>
The <Code>
IFRAME</Code>
element is very much like a <Code>
FRAME</Code>
. The difference is that an <Code>
IFRAME</Code>
can be inserted in-line, hence the name <Code>
IFRAME</Code>
. Regular <Code>
FRAME</Code>
elements take up as much space as they can (given the dimensions of the <Code>
FRAMESET</Code>
, the presence of other frames, and the confines of the document itself). But iframes can be aligned in their containing elements, given a specific height and width, etc.</Body>
<Head2>
Properties</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
align</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Specifies how the <Code>
IFRAME</Code>
is to be aligned in the containing element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
contentDocument</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The <Code>
contentDocument</Code>
property returns the document the frame contains, if any.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
contentWindow</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The <Code>
contentWindow</Code>
property returns the window parent of the iframe.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
frameBorder</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
frameBorder gets/sets the border around the current <Code>
IFRAME</Code>
.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
longDesc</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The <Code>
longDesc</Code>
property points to a long description of the current iframe.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
marginHeight</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the height of the frame’s margin in pixels.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
marginWidth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the width of the frame’s margin in pixels.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
name</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The name of the <Code>
IFRAME</Code>
element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
scrolling</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The scrolling property specifies whether the current frame should provide scrollbars or not.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
src</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The src property provides a url to load as content into the current frame.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head1>
align</Head1>
<Body>
Specifies how the <Code>
IFRAME</Code>
is to be aligned in the containing element.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
sAlign = iFrameElement.align</Code>
<Code>
iFrameElement.align = sAlign</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sAlign</Code>
is a string with one of the values given in the Notes section below.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
i = document.getElementById(“first-frame”);</Code>
<Code>
i.align = “top”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Possible values for align are “top”, “middle”, “bottom”, “left” and “right.” The latter two cause the <Code>
IFRAME</Code>
to float to the current right or left margin. The default value for align is bottom. The align attribute is deprecated in HTML 4.0</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLIFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
contentDocument</Head1>
<Body>
The <Code>
contentDocument</Code>
property returns the document the frame contains, if any.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
document = iFrameElement.contentDocument</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
document</Code>
is an object reference to the document contained in the given frame.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
i= document.getElementById(“my-iframe”);</Code>
<Code>
if (i.contentDocument ) {</Code>
<Code>
src_doc = i.contentDocument;</Code>
<Code>
working_title = src_doc.title;</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property returns <Code>
NULL</Code>
if there is no current document.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
contentWindow</Head1>
<Body>
The <Code>
contentWindow</Code>
property returns the window object for the iframe.</Body>
<Head3>
Syntax</Head3>
<Code>
iframeWindow = iframeElement.contentWindow</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iframeWindow</Code>
is an object reference to the <Code>
window</Code>
object for this iframe.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
i = document.getElementById(“iframe”);</Code>
<Code>
i.contentWindow.location = “http://mozilla.org”;</Code>
<Code>
i.contentWindow.history.back();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
You can also get to the <Code>
window</Code>
object through a named iframe. For example, an iframe with the <Code>
name=”myFrame”</Code>
can refer back to the <Code>
window</Code>
object as <Code>
window.frames[“myFrame”]</Code>
.</Body>
<Head3>
Specification</Head3>
<Body>
None.<Code>
</Code>
</Body>
<Body>
</Body>
<Head1>
frameBorder</Head1>
<Body>
frameBorder gets/sets the border around the current <Code>
IFRAME</Code>
.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
sBorder = iFrameElement.frameBorder</Code>
<Code>
iFrameElement.frameBorder = sBorder</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sBorder</Code>
gives the border width in number of pixels as string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
// create a border around the current iframe</Code>
<Code>
i= document.getElementById(“iframe-1”);</Code>
<Code>
i.frameBorder = 2; </Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that the data type for the value of the <Code>
frameBorder</Code>
is a string. This is because the value may be specified as either a number of pixels (e.g., “2”) or a percentage, in which case the percent sign is included. A value of “0” means no border at all.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
longDesc</Head1>
<Body>
The <Code>
longDesc</Code>
property points to a long description of the current iframe.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
url = IFrameElement.longDesc</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
The <Code>
url</Code>
string provides a url where a longer description of the current frame can be found.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
f = document.getElementById(“main-frame”);</Code>
<Code>
f.longDesc = “http://www.netcape.com/suppl/more.html”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The “long description” is meant to provide more information about the contents of a frame element. In the case of an <Code>
&lt;img&gt;</Code>
element, which also uses the longDesc property, it is meant to accompany <Code>
&lt;img&gt;</Code>
alt descriptions. </Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLIFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
marginHeight</Head1>
<Body>
Gets/sets the height of the frame’s margin in pixels.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
sHeight = iFrameElement.marginHeight</Code>
<Code>
iFrameElement.marginHeight = sHeight</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
The <Code>
sHeight</Code>
string gives the height of the frame’s margin in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
i= document.getElementById(“iframe1”);</Code>
<Code>
i.marginHeight = 3;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that the data type for the value of the <Code>
marginHeight</Code>
is a string. This is because the value may be specified as either a number of pixels (e.g., “2”) or a percentage, in which case the percent sign is included. A value of “0” means no margin at all.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLIFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
marginWidth</Head1>
<Body>
Gets/sets the width of the frame’s margin in pixels.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
sWidth = iFrameElement.marginWidth</Code>
<Code>
iFrameElement.marginWidth = sWidth</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
The <Code>
sWidth</Code>
string gives the width of the frame’s margin in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
i = document.getElementById(“iframe1”);</Code>
<Code>
i.marginWidth = 3;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that the data type for the value of the <Code>
marginWidth</Code>
is a string. This is because the value may be specified as either a number of pixels (e.g., “2”) or a percentage, in which case the percent sign is included. A value of “0” means no margin at all.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLIFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
name</Head1>
<Body>
The name of the current iframe.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
iframename = iframeElement.name</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iframeName</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
i = document.getElementById(“main-frame”);</Code>
<Code>
if (i.name != “main”) {</Code>
<Code>
//</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
In the HTML, you can set the <Code>
IFRAME</Code>
name attribute directly: 
<Code>
&lt;frame name=”f1”/&gt;</Code>
and then refer to that frame in the DOM with <Code>
window.frames[“f1”]</Code>
.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLIFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
scrolling</Head1>
<Body>
The scrolling property specifies whether the current frame should provide scrollbars or not.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
sBars = iFrameElement.scrolling</Code>
<Code>
iFrameElement.scrolling = sBars</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sBars</Code>
is a string with the value “auto”, “no,” or “yes.”</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
i= document.getElementById(“iframe”);</Code>
<Code>
i.scrolling = yes;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The default value for this property is “auto,” which specifies that scrollbars be added whenever necessary. “yes” means that they are always present, and “no” means that htey are never present. </Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLFrameElement</Code>
</Body>
<Body>
</Body>
<Head1>
src</Head1>
<Body>
The src property provides a url to load as content into the current frame.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
iFrameElement.src = sURL</Code>
<Code>
sURL= iFrameElement.src</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sURL</Code>
is a string containing a URL.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
i = document.getElementById(“content-frame”);</Code>
<Code>
i.src = “www.netscape.com”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
DOM Level 2 -- <Code>
HTMLIFrameElement</Code>
</Body>
<Body>
</Body>
<Body>
</Body>
</chapter>

<chapter>
<title>DOM HTML Elements Reference</title>
<Body>
This chapter provides reference information for several specific <Code>
HTMLElement</Code>
interfaces. </Body>
<BulletedList>
<Bulleted>
<Bold>
HTMLFormElement Interface</Bold>
</Bulleted>
<Bulleted>
<Bold>
HTMLTableElement Interface</Bold>
</Bulleted>
<Bulleted>
[under construction...]</Bulleted>
</BulletedList>
<Body>
</Body>
<Body>
</Body>
<Head1>
HTMLFormElement Interface</Head1>
<Body>
As <Code>
HTML</Code>
elements, <Code>
FORM</Code>
elements expose all of the properties and methods described in the DOM Elements Reference chapter. They also expose the specialized interface described here.</Body>
<Body>
The APIs for manipulating FORM elements described here allow you to create and fully configure <Code>
FORM</Code>
elements using the DOM. The following snippet gives you some idea of how you might create a new form element and equip it with some of the attributes that the form submission process requires.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
f = document.createElement(“form”);</CellCode>
<CellCode>
body.appendChild(f);</CellCode>
<CellCode>
f.action = “\cgi-bin\some.cgi”;</CellCode>
<CellCode>
f.method = “POST”</CellCode>
<CellCode>
...</CellCode>
<CellCode>
f.submit(); // submit the newly-created form!</CellCode>
</CELL>
</ROW>
</TABLE>
<Body>
In addition, the following complete HTML document shows how to extract info from an existing form element and how to set some of the read/write properties on that <Code>
FORM</Code>
.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;form tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt; function getFormInfo() {</CellCode>
<CellCode>
var info = &quot;&quot;;</CellCode>
<CellCode>
ta = document.getElementById(&quot;tex&quot;);</CellCode>
<CellCode>
f = document.forms[&quot;myform&quot;];</CellCode>
<CellCode>
info += &quot;f.elements: &quot;+f.elements+&quot;\n&quot;;</CellCode>
<CellCode>
info += &quot;f.length: &quot;+f.length+&quot;\n&quot;;</CellCode>
<CellCode>
info += &quot;f.name: &quot;+f.elements+&quot;\n&quot;;</CellCode>
<CellCode>
info += &quot;f.acceptCharset: &quot;+f.acceptCharset+&quot;\n&quot;;</CellCode>
<CellCode>
info += &quot;f.action: &quot;+f.action+&quot;\n&quot;;</CellCode>
<CellCode>
info += &quot;f.enctype: &quot;+f.enctype+&quot;\n&quot;;</CellCode>
<CellCode>
info += &quot;f.encoding: &quot;+f.encoding+&quot;\n&quot;;</CellCode>
<CellCode>
info += &quot;f.method: &quot;+f.method+&quot;\n&quot;;</CellCode>
<CellCode>
info += &quot;f.target: &quot;+f.target+&quot;\n&quot;;</CellCode>
<CellCode>
</CellCode>
<CellCode>
ta.setAttribute(&quot;value&quot;, info);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
// cont’d...</CellCode>
</CELL>
</ROW>
</TABLE>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
<CellCode>
function setFormInfo() {</CellCode>
<CellCode>
f = document.forms[&quot;myform&quot;];</CellCode>
<CellCode>
f.method = &quot;GET&quot;;</CellCode>
<CellCode>
f.action = &quot;/cgi-bin/evil_executable.cgi&quot;;</CellCode>
<CellCode>
f.name = &quot;totally_new&quot;;</CellCode>
<CellCode>
// click info again to get this new data </CellCode>
<CellCode>
// back from the form</CellCode>
<CellCode>
}&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;h1&gt;form tests&lt;/h1&gt;</CellCode>
<CellCode>
&lt;form name=&quot;myform&quot; id=&quot;myform&quot; action=&quot;/cgi-bin/test&quot; method=&quot;POST&quot;&gt;</CellCode>
<CellCode>
&lt;input type=&quot;button&quot; value=&quot;info&quot; onclick=&quot;getFormInfo();&quot;/&gt;</CellCode>
<CellCode>
&lt;input type=&quot;button&quot; value=&quot;set&quot; onclick=&quot;setFormInfo();&quot;/&gt;</CellCode>
<CellCode>
&lt;input type=&quot;reset&quot; value=&quot;reset&quot;/&gt;</CellCode>
<CellCode>
&lt;br&gt;</CellCode>
<CellCode>
&lt;textarea id=&quot;tex&quot; </CellCode>
<CellCode>
style=&quot;min-height:300;min-width:300&quot; /&gt;</CellCode>
<CellCode>
&lt;/form&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head2>
Properties</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
elements</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
elements returns an array of all the form controls contained in the <Code>
FORM</Code>
element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
length</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
length returns the number of controls in the <Code>
FORM</Code>
element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
name</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
name returns the name of the current <Code>
FORM</Code>
element as a string.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
acceptCharset</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
elements returns a list of the supported character sets for the current <Code>
FORM</Code>
element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
action</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
action gets/sets the action of the <Code>
FORM</Code>
element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
enctype</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
enctype gets/sets the content type of the <Code>
FORM</Code>
element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
encoding</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
encoding gets/sets the content type of the <Code>
FORM</Code>
element.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
method</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
method gets/sets the HTTP method used to submit the form.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
target</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
target gets/sets the target of the action (i.e., the frame to render its output in).</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head2>
Methods</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
submit()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
submit() submits the form.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
reset()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
reset() resets the form to its initial state.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head1>
elements</Head1>
<Body>
elements returns an array of all the form controls contained in the <Code>
FORM</Code>
element.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
controls = form.elements</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
controls</Code>
is a <Code>
nodeList</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
inputs = document.getElementById(“form1”).elements</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
elements</Body>
<Body>
</Body>
<Head1>
length</Head1>
<Body>
length returns the number of controls in the <Code>
FORM</Code>
element.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
num = form.elements</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
num</Code>
is an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
if (document.getElementById(“form1”).length &gt; 1) {</Code>
<Code>
// more than one form control here</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
length</Body>
<Body>
</Body>
<Head1>
name</Head1>
<Body>
name returns the name of the current <Code>
FORM</Code>
element as a string.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
name = form.name</Code>
<Code>
form.name = name</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
name</Code>
is a <Code>
string</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
form1 = document.getElementById(“form1”).name;</Code>
<Code>
if (form1 != document.form.form1) {</Code>
<Code>
// browser doesn’t support this form of reference</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that this property is read/write, which means that you can change the name of a form or set it if it hasn’t been set alreaDY.</Body>
<Head3>
Specification</Head3>
<Body>
name</Body>
<Body>
</Body>
<Head1>
acceptCharset</Head1>
<Body>
elements returns a list of the supported character sets for the current <Code>
FORM</Code>
element.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
charSets = form.acceptCharset;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
charSets</Code>
is a <Code>
string</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
inputs = document.forms[“myform”].acceptCharset</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
acceptCharset</Body>
<Body>
</Body>
<Head1>
action</Head1>
<Body>
action gets/sets the action of the <Code>
FORM</Code>
element.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
action = form.action</Code>
<Code>
form.action = action</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
action</Code>
is a <Code>
string</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
form.action = “/cgi-bin/publish”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The action of a form is the program that is executed on the server when the form is submitted. This property can be retrieved or set.</Body>
<Head3>
Specification</Head3>
<Body>
action</Body>
<Body>
</Body>
<Head1>
enctype</Head1>
<Body>
enctype gets/sets the content type of the <Code>
FORM</Code>
element.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
enctype = form.enctype</Code>
<Code>
form.enctype = enctype</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
enctype</Code>
is a <Code>
string</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
form.enctype = “application/x-www-form-urlencoded”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The encoding type is generally “application/x-www-form-urlencoded”.</Body>
<Head3>
Specification</Head3>
<Body>
enctype</Body>
<Body>
</Body>
<Head1>
encoding</Head1>
<Body>
encoding gets/sets the content type of the <Code>
FORM</Code>
element.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
encoding = form.enctype</Code>
<Code>
form.enctype = encoding</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
encoding</Code>
is a <Code>
string</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
form.encoding = “application/x-www-form-urlencoded”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The encoding type is generally “application/x-www-form-urlencoded”.</Body>
<Head3>
Specification</Head3>
<Body>
encoding</Body>
<Body>
</Body>
<Head1>
method</Head1>
<Body>
method gets/sets the HTTP method used to submit the form.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
meth = form.method</Code>
<Code>
form.method = meth</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
meth</Code>
is a <Code>
string</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
document.forms[“myform”].method = “POST”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
method</Body>
<Body>
</Body>
<Head1>
target</Head1>
<Body>
target gets/sets the target of the action (i.e., the frame to render its output in).</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
targ = form.target</Code>
<Code>
form.target = targ</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
targ</Code>
is a <Code>
string</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
myForm.target = document.frames[1].name;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
target</Body>
<Body>
</Body>
<Head1>
submit()</Head1>
<Body>
submit() submits the form.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
form.submit()</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
None</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
document.forms[“myform”].submit()</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This method does the same as the form submit button.</Body>
<Body>
* can “automatically” submit things this way without having to hit the submit button. ?But do you have to pass in the form parameters?</Body>
<Head3>
Specification</Head3>
<Body>
submit</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
reset()</Head1>
<Body>
reset() resets the form to its initial state.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
form.reset()</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
None</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
document.forms[“myform”].reset();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This method is the same as the form reset button.</Body>
<Head3>
Specification</Head3>
<Body>
reset</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
HTMLTableElement Interface</Head1>
<Body>
<Code>
table</Code>
objects expose the <Code>
HTMLTableElement</Code>
interface, which provides special properties and methods (beyond the regular <Code>
element</Code>
object interface they also have available to them by inheritance) for manipulating the layout and presentation of tables in HTML.</Body>
<Head2>
Properties</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
caption</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
caption returns the table caption.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
tHead</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
tHead returns the table head.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
tFoot</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
tFoot returns the table footer.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
rows</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
rows returns the rows in the table.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
tBodies</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
tBodies returns the table bodies.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
align</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
align gets/sets the alignment of the table.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
bgColor</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
bgColor gets/sets the background color of the table.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
border</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
border gets/sets the table border.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cellPadding</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
cellPadding gets/setst the cell padding.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cellSpacing</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
cellSpacing gets/set the spacing around the table.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
frame</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
frame specifies which sides of the table have borders.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
rules</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
rules specifies which interior borders are visible.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
summary</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
summary gets/sets the table summary.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
width</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
width gets/sets the width of the table.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head2>
Methods</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
createTHead()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
createTHead() creates a table header.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
deleteTHead()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
deleteTHead() removes the table header.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
createTFoot()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
createTFoot() creates a table footer.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
deleteTFoot()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
deleteTFoot() removes a table footer.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
createCaption()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
createCaption() creates a new caption for the table.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
deleteCaption()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
deleteCaption() removes the table caption.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
insertRow()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
insertRow() inserts a new row.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
deleteRow()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
deleteRow() removes a row.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head1>
caption</Head1>
<Body>
caption returns the table caption.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
caption = table.caption</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
caption</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
if (table.caption) {</Code>
<Code>
// do something with the caption</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property returns void if no caption exists on the table.</Body>
<Head3>
Specification</Head3>
<Body>
caption</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
tHead</Head1>
<Body>
tHead returns the table’s <Code>
THEAD</Code>
.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
th_el = table.tHead</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
th_el</Code>
is a <Code>
HTMLTableSectionElement</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
if (table.tHead == my_head_el) {</Code>
<Code>
...</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property returns <Code>
VOID</Code>
if no <Code>
THEAD</Code>
element exists.</Body>
<Head3>
Specification</Head3>
<Body>
tHead</Body>
<Body>
</Body>
<Head1>
tFoot</Head1>
<Body>
tFoot returns the table’s <Code>
TFOOT</Code>
element.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
th_el = table.tFoot</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
tf_el</Code>
is a <Code>
HTMLTableSectionElement</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
if (table.tFoot == my_foot) {</Code>
<Code>
...</Code>
<Code>
}</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property returns <Code>
VOID</Code>
if no <Code>
TFOOT</Code>
element exists.</Body>
<Head3>
Specification</Head3>
<Body>
tFoot</Body>
<Body>
</Body>
<Head1>
rows</Head1>
<Body>
rows returns a collection of the rows in the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
rows = table.rows</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
rows</Code>
is an <Code>
HTMLCollection</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
myrows = mytable.rows;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The collection returned by this property includes the <Code>
THEAD</Code>
and <Code>
TFOOT</Code>
and <Code>
TBODY</Code>
elements, if any, on the current table.</Body>
<Head3>
Specification</Head3>
<Body>
rows</Body>
<Body>
</Body>
<Head1>
tBodies</Head1>
<Body>
tBodies returns a collection of the table bodies.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
bodies = table.tBodies</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bodies</Code>
is an <Code>
HTMLCollection</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
length(mytable.tBodies);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
tBodies</Body>
<Body>
</Body>
<Head1>
align</Head1>
<Body>
align gets/sets the alignment of the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
alignment = table.align</Code>
<Code>
table.align = alignment</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
alignment</Code>
is a string with one of the following values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
left</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
center</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
right</CellBody>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
mytable.align = “center”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The align attribute is deprecated in HTML4.0.</Body>
<Head3>
Specification</Head3>
<Body>
align</Body>
<Body>
</Body>
<Head1>
bgColor</Head1>
<Body>
bgcolor gets/sets the background color of the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
color = table.bgColor</Code>
<Code>
table.bgColor = color</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
color</Code>
is a string representing a color value.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
mytable.bgColor = “lightblue”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The bgColor attribute is deprecated in HTML 4.0.</Body>
<Head3>
Specification</Head3>
<Body>
bgColor</Body>
<Body>
</Body>
<Head1>
border</Head1>
<Body>
border gets/sets the border width.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table.border = width</Code>
<Code>
width = table.border</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
width </Code>
is a string representing the width in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
mytable.border=”2”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This attribute is deprecated in HTML 4.0.</Body>
<Head3>
Specification</Head3>
<Body>
border</Body>
<Body>
</Body>
<Head1>
cellPadding</Head1>
<Body>
cellPadding gets/sets the padding around the individual cells of the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table.cellPadding = padding</Code>
<Code>
padding = table.cellPadding</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
padding</Code>
is a string representing the padding in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
mytable.cellPadding = “10”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
cellPadding</Body>
<Body>
</Body>
<Head1>
cellSpacing</Head1>
<Body>
cellSpacing gets/sets the spacing around the individual cells of the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table.cellSpacing = spacing</Code>
<Code>
spacing = table.cellSpacing</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
spacing</Code>
is a string representing the spacing around the table in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
mytable.cellSpacing = “10”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
cellSpacing</Body>
<Body>
</Body>
<Head1>
frame</Head1>
<Body>
frame specifies which external table borders to render.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table.frame = side</Code>
<Code>
side = table.frame</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
side</Code>
is a string with one of the following values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
void</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
no sides. this is the default.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
above</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
top side</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
below</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
bottom side</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
hsides</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
top and bottom only</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
vsides</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
right and left sides only</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
lhs</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
left-hand side only</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
rhs</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
right-hand side only</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
box</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
all four sides</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
border</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
all four sides</CellBody>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
mytable.frame = “border”;</Code>
<Code>
mytable.border = “2px”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
frame</Body>
<Body>
</Body>
<Head1>
rules</Head1>
<Body>
rules specifies which cell borders to render in the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table.rules = rules</Code>
<Code>
rules = table.rules</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
rules</Code>
is a string with one of the following values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
none</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
no rules</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
groups</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
lines between groups only</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
rows</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
lines between rows</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
cols</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
lines between cols</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
all</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
lines between all cells</CellBody>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
t = document.getElementById(“mytable”);</Code>
<Code>
t.rules = “all”; // turn on all the internal borders</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
rules</Body>
<Body>
</Body>
<Head1>
summary</Head1>
<Body>
summary gets/sets a table description.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table.summary = summary</Code>
<Code>
summary = table.summary</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
summary</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
t.rules = “none”;</Code>
<Code>
t.summary = “removed internal borders”;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
summary</Body>
<Body>
</Body>
<Head1>
width</Head1>
<Body>
width specifies the desired width of the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table.width = width</Code>
<Code>
width = table.width</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
width</Code>
is a string representing the width in number of pixels or as a percentage value.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
mytable.width=”75%”</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
width</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
createTHead()</Head1>
<Body>
createTHead() creates a new <Code>
THEAD</Code>
for the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
th = table.createTHead()</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
th</Code>
is an <Code>
HTMLElement</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
myhead = mytable.createTHead();</Code>
<Code>
//checking:</Code>
<Code>
myhead == mytable.tHead</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the element already exists on the table, then this method returns that element</Body>
<Head3>
Specification</Head3>
<Body>
createTHead()</Body>
<Body>
</Body>
<Head1>
deleteTHead()</Head1>
<Body>
deleteTHead() removes a <Code>
THEAD</Code>
from the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table.deleteTHead()</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
None.</Code>
</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
mytable.deleteTHead();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
deleteTHead()</Body>
<Body>
</Body>
<Head1>
createTFoot()</Head1>
<Body>
createTFoot() creates a new <Code>
TFOOT</Code>
for the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
tf = table.createTFoot()</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
tf </Code>
is an <Code>
HTMLElement</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
myfoot = mytable.createTFoot();</Code>
<Code>
//checking:</Code>
<Code>
myfoot == mytable.tFoot</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the element already exists on the table, then this method returns that element</Body>
<Head3>
Specification</Head3>
<Body>
createTFoot()</Body>
<Body>
</Body>
<Head1>
deleteTFoot()</Head1>
<Body>
deleteTFoot() removes a <Code>
TFOOT</Code>
from the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table.deleteTFoot()</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
None.</Code>
</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
mytable.deleteTFoot();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
deleteTFoot()</Body>
<Body>
</Body>
<Head1>
createCaption()</Head1>
<Body>
createCaption() creates a new caption for the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
tcap = table.createCaption()</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
tcap</Code>
is an <Code>
HTMLElement</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
mycap = mytable.createCaption();</Code>
<Code>
</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the element already exists on the table, then this method returns that element.</Body>
<Head3>
Specification</Head3>
<Body>
createCaption()</Body>
<Body>
</Body>
<Head1>
deleteCaption()</Head1>
<Body>
deleteCaption() removes the caption from the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table.deleteCaption()</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
None</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
mytable.deleteCaption();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
deleteCaption()</Body>
<Body>
</Body>
<Head1>
insertRow()</Head1>
<Body>
insertRow() inserts a new row in the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
row = table.insertRow(index)</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
index</Code>
is a number representing where in the table to insert the new row.</Indent>
<Indent>
row is an <Code>
HTMLElement</Code>
</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
newrow = mytable.insertRow(0); // insert a new first row</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
insertRow()</Body>
<Body>
</Body>
<Head1>
deleteRow()</Head1>
<Body>
deleteRow() removes a row from the table.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
table.deleteRow(index)</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Indent>
<Code>
index</Code>
is a number representing the row that should be deleted.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
mytable.deleteRow(1); // delete the second row</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Body>
deleteRow()</Body>
<Body>
</Body>
<Body>
</Body>
<Body>
</Body>
</chapter>

<chapter>
<title>DOM Range Reference</title>
<Body>
This chapter provides reference information for the DOM <Code>
Range</Code>
interface.</Body>
<BulletedList>
<Bulleted>
<Bold>
DOM 2 Range Interface</Bold>
</Bulleted>
<Bulleted>
<Bold>
Gecko Range Interface Extensions</Bold>
</Bulleted>
</BulletedList>
<Body>
</Body>
<Heading1>
DOM 2 Range Interface</Heading1>
<Heading2>
Properties</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
collapsed</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a boolean indicating whether a range is collapsed.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
commonAncestorContainer</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the deepest <Code>
Node</Code>
that contains the <Code>
startContainer</Code>
and <Code>
endContainer</Code>
Nodes.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
endContainer</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the <Code>
Node</Code>
within which the Range ends.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
endOffset</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a number representing where in the <Code>
endContainer</Code>
the Range ends.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
startContainer</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the <Code>
Node</Code>
within which the Range starts.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
startOffset</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a number representing where in the <Code>
startContainer</Code>
the Range starts.</Body>
</CELL>
</ROW>
</TABLE>
<Heading2>
Creation Methods</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
createRange</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a new <Code>
Range</Code>
object.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
setStart</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Sets the start position of a <Code>
Range</Code>
.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
setEnd</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Sets the end position of a <Code>
Range</Code>
.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
setStartBefore</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Sets the start position of a <Code>
Range</Code>
relative to another <Code>
Node</Code>
.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
setStartAfter</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Sets the start position of a Range relative to another Node.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
setEndBefore</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Sets the end position of a <Code>
Range</Code>
relative to another <Code>
Node</Code>
.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
setEndAfter</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Sets the end position of a Range relative to another Node.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
selectNode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Sets the <Code>
Range</Code>
to contain the node and its contents.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
selectNodeContents</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Sets the <Code>
Range</Code>
to contain the contents of a <Code>
Node</Code>
.</Body>
</CELL>
</ROW>
</TABLE>
<Heading2>
Editing Methods</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
collapse</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Collapses the <Code>
Range</Code>
to one of its boundary points.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cloneContents</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a document fragment copying the nodes of a Range.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
deleteContents</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Removes the contents of a Range from the document.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
extractContents</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Moves contents of a Range from the document tree into a document fragment</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
insertNode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Insert a node at the start of a Range.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
surroundContents</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Moves content of a Range into a new node.</Body>
</CELL>
</ROW>
</TABLE>
<Heading2>
Other Methods</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
compareBoundaryPoints</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Compares the boundary points of two Ranges.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
cloneRange</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a Range object with boundary points identical to the cloned Range. </Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
detach</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Releases Range from use to improve performance.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
toString</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the text of the Range.</Body>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Body>
</Body>
<Head1>
collapsed</Head1>
<Body>
Returns a boolean indicating whether a range is collapsed.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<Italic>
isCollapsed</Italic>
= range.collapsed;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Code>
isCollapsed</Code>
is boolean with values of true or false</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.setStart(startNode,startOffset);</Code>
<Code>
range.setEnd(endNode,endOffset);</Code>
<Code>
isCollapsed = range.collapsed;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Returns a boolean of true if the start and end boundary points of the Range are the same point in the DOM, false if not.</Body>
<Body>
A collapsed Range is empty, containing no content, specifying a single-point in a DOM tree.  The collapsed property is read-only.  To collapse a range, see the <Code>
collapse</Code>
method</Body>
<Head3>
Specification:</Head3>
<Body>
<Italic>
collapsed</Italic>
</Body>
<Body>
</Body>
<Head1>
commonAncestorContainer</Head1>
<Body>
Returns the deepest <Code>
Node</Code>
that contains the <Code>
startContainer</Code>
and <Code>
endContainer</Code>
Nodes.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<Italic>
rangeAncestor</Italic>
= range.commonAncestorContainer;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Italic>
rangeAncestor</Italic>
is a <Code>
Node</Code>
of type <Code>
Document</Code>
, <Code>
DocumentFragment</Code>
, or <Code>
Attr</Code>
</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.setStart(startNode,startOffset);</Code>
<Code>
range.setEnd(endNode,endOffset);</Code>
<Code>
rangeAncestor = range.commonAncestorContainer;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Returns the deepest, or further down the document tree, <Code>
Node</Code>
that contains both the <Code>
startContainer</Code>
and <Code>
endContainer</Code>
nodes.  Since a Range need not be continuous, and may also partially select Nodes, this is a convenient way to find a Node which encloses a Range.</Body>
<Body>
This property is read-only.  To change the ancestor container of a Node, consider using the various methods to set the start and end positions of the Range.</Body>
<Head3>
Specification:</Head3>
<Body>
<Italic>
commonAncestorContainer</Italic>
</Body>
<Body>
</Body>
<Head1>
endContainer</Head1>
<Body>
Returns the Node within which the Range ends.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<Italic>
endRangeNode</Italic>
= range.endContainer;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Italic>
endRangeNode</Italic>
is a reference to a <Code>
Node.</Code>
</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.setStart(startNode,startOffset);</Code>
<Code>
range.setEnd(endNode,endOffset);</Code>
<Code>
endRangeNode = range.endContainer;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Returns a reference to the Node in the document within which the Range ends  This property is read-only.  To change the end position of a node, use one of the <Code>
setEnd</Code>
methods.</Body>
<Head3>
Specification:</Head3>
<Body>
<Italic>
endParent</Italic>
</Body>
<Body>
</Body>
<Head1>
endOffset</Head1>
<Body>
Returns a number representing where in the endContainer the Range ends.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<Italic>
endRangeOffset</Italic>
= range.endOffset;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Italic>
endRangeOffset</Italic>
is the number characters or child Node index where the Range ends in the <Code>
endContainer</Code>
</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.setStart(startNode,startOffset);</Code>
<Code>
range.setEnd(endNode,endOffset);</Code>
<Code>
endRangeOffset = range.endOffset;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
endOffset has two meanings.  If the <Code>
endContainer</Code>
is a Node of type <Code>
Text</Code>
, <Code>
Comment</Code>
, or <Code>
CDATASection</Code>
, then the offset is the number of characters from the start of the <Code>
endContainer</Code>
to the boundary point of the Range.  For other Node types, the endOffset is the number of child nodes between the start of the endContainer and the boundary point of the Range.  This property is read-only.  To change the endOffset of a Range, use one of the <Code>
setEnd</Code>
methods.</Body>
<Head3>
Specification:</Head3>
<Body>
<Italic>
endOffset</Italic>
</Body>
<Body>
</Body>
<Head1>
startContainer</Head1>
<Body>
Returns the Node within which the Range starts.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<Italic>
startRangeNode</Italic>
= range.startContainer;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Code>
startRangeNode</Code>
is a reference to a Node</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.setStart(startNode,startOffset);</Code>
<Code>
range.setEnd(endNode,endOffset);</Code>
<Code>
startRangeNode = range.startContainer;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Returns a reference to the Node in the document within which the Range starts.  This property is read-only.  To change the start position of a node, use one of the <Code>
setStart</Code>
methods.</Body>
<Head3>
Specification:</Head3>
<Body>
<Italic>
startParent</Italic>
</Body>
<Body>
</Body>
<Head1>
startOffset</Head1>
<Body>
Returns a number representing where in the <Code>
startContainer</Code>
the Range starts.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
startRangeOffset = range.startOffset;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Code>
startRangeOffset</Code>
is the number characters or a child Node index where the Range starts in the startContainer</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.setStart(startNode,startOffset);</Code>
<Code>
range.setEnd(endNode,endOffset);</Code>
<Code>
startRangeOffset = range.startOffset;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
startOffset has two meanings.  If the <Code>
startContainer</Code>
is a Node of type <Code>
Text</Code>
, <Code>
Comment</Code>
, or <Code>
CDATASection</Code>
, then the offset is the number of characters from the start of the <Code>
startContainer</Code>
to the boundary point of the Range.  For other Node types, the startOffset is the number of child nodes between the start of the <Code>
startContainer</Code>
and the boundary point of the Range.  This property is read-only.  To change the startOffset of a Range, use one of the <Code>
setStart</Code>
methods.</Body>
<Head3>
Specification</Head3>
<Body>
<Italic>
startOffset</Italic>
</Body>
<Body>
</Body>
<Head1>
createRange</Head1>
<Body>
Returns a new <Code>
Range</Code>
object.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Code>
range</Code>
is a new instance of the <Code>
Range</Code>
object</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.setStart(startNode,startOffset);</Code>
<Code>
range.setEnd(endNode,endOffset);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Once a <Code>
Range</Code>
is created, you need to set its boundary points before you can make use of most of its methods.</Body>
<Head3>
Specification:</Head3>
<Body>
createRange</Body>
<Body>
</Body>
<Head1>
setStart</Head1>
<Body>
Sets the start position of a <Code>
Range</Code>
.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.setStart(startNode,startOffset);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
The setStart method takes the following parameters:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
startNode</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The <Code>
Node</Code>
to start the <Code>
Range</Code>
</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
startOffset</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An integer greater than or equal to zero representing the offset for the start of the <Code>
Range</Code>
from the start of <Code>
startNode</Code>
.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
startNode = document.getElementsByTagName(&quot;p&quot;).item(2);</Code>
<Code>
startOffset = 0;</Code>
<Code>
range.setStart(startNode,startOffset);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the <Code>
startNode</Code>
is a <Code>
Node</Code>
of type <Code>
Text</Code>
, <Code>
Comment</Code>
, or <Code>
CDATASection</Code>
, then <Code>
startOffset</Code>
is the number of characters from the start of <Code>
startNode</Code>
.  For other <Code>
Node</Code>
types, <Code>
startOffset</Code>
is the number of child nodes between the start of the <Code>
startNode</Code>
.</Body>
<Head3>
Specification:</Head3>
<Body>
setStart</Body>
<Body>
</Body>
<Head1>
setEnd</Head1>
<Body>
Sets the end position of a <Code>
Range</Code>
.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.setEnd(endNode,endOffset);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
The setEnd method takes the following parameters:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
endNode</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The <Code>
Node</Code>
to end the <Code>
Range</Code>
</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
endOffset</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
An integer greater than or equal to zero representing the offset for the end of the <Code>
Range</Code>
from the start of <Code>
endNode</Code>
.</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
endNode = document.getElementsByTagName(&quot;p&quot;).item(3);</Code>
<Code>
endOffset = document.getElementsByTagName(&quot;p&quot;).item(3).childNodes.length;</Code>
<Code>
range.setEnd(endNode,endOffset);</Code>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the <Code>
endNode</Code>
is a <Code>
Node</Code>
of type <Code>
Text</Code>
, <Code>
Comment</Code>
, or <Code>
CDATASection</Code>
, then <Code>
endOffset</Code>
is the number of characters from the start of <Code>
endNode</Code>
.  For other <Code>
Node</Code>
types, <Code>
endOffset</Code>
is the number of child nodes between the start of the <Code>
endNode</Code>
.</Body>
<Head3>
Specification:</Head3>
<Body>
setEnd</Body>
<Body>
</Body>
<Head1>
setStartBefore</Head1>
<Body>
Sets the start position of a <Code>
Range</Code>
relative to another <Code>
Node</Code>
.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.setStartBefore(referenceNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
The setStartBefore method takes the following parameters:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
referenceNode</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The <Code>
Node</Code>
to start the <Code>
Range</Code>
before</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
referenceNode =   document.getElementsByTagName(&quot;div&quot;).item(0);</Code>
<Code>
range.setStartBefore(referenceNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The parent Node of the start of the Range will be the same as that for the referenceNode.</Body>
<Head3>
Specification:</Head3>
<Body>
setStartBefore</Body>
<Body>
</Body>
<Head1>
setStartAfter</Head1>
<Body>
Sets the start position of a Range relative to another Node.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.setStartAfter(referenceNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
The setStartBefore() method takes the following parameters:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
referenceNode</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The <Code>
Node</Code>
to start the <Code>
Range</Code>
after</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
referenceNode = document.getElementsByTagName(&quot;div&quot;).item(0);</Code>
<Code>
range.setStartAfter(referenceNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The parent <Code>
Node</Code>
of the start of the <Code>
Range</Code>
will be the same as that for the <Code>
referenceNode</Code>
.</Body>
<Head3>
Specification:</Head3>
<Body>
setStartAfter</Body>
<Body>
</Body>
<Head1>
setEndBefore</Head1>
<Body>
Sets the end position of a <Code>
Range</Code>
relative to another <Code>
Node</Code>
.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.setEndBefore(referenceNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
The setEndBefore() method takes the following parameters:</Body>
<Body>
referenceNode   The Node to end the Range before</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
referenceNode = document.getElementsByTagName(&quot;div&quot;).item(0);</Code>
<Code>
range.setEndBefore(referenceNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The parent Node of end of the Range will be the same as that for the referenceNode.</Body>
<Head3>
Specification</Head3>
<Body>
setEndBefore</Body>
<Body>
</Body>
<Head1>
setEndAfter</Head1>
<Body>
Sets the end position of a Range relative to another Node.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.setEndAfter(referenceNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
The setEndAfter() method takes the following parameters:</Body>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
referenceNode</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The <Code>
Node</Code>
to end the <Code>
Range</Code>
after</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
referenceNode = document.getElementsByTagName(&quot;div&quot;).item(0);</Code>
<Code>
range.setEndAfter(referenceNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The parent <Code>
Node</Code>
of end of the <Code>
Range</Code>
will be the same as that for the <Code>
referenceNode</Code>
.</Body>
<Head3>
Specification</Head3>
<Body>
setEndAfter</Body>
<Body>
</Body>
<Head1>
selectNode</Head1>
<Body>
Sets the <Code>
Range</Code>
to contain the node and its contents.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.selectNode(referenceNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
The selectNode() method takes the following parameters:</Body>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
referenceNode</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The <Code>
Node</Code>
to select within a <Code>
Range</Code>
</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
referenceNode = document.getElementsByTagName(&quot;div&quot;).item(0);</Code>
<Code>
range.selectNode(referenceNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The parent Node of the start and end of the Range will be the same as the parent of the referenceNode.</Body>
<Head3>
Specification</Head3>
<Body>
selectNode</Body>
<Body>
</Body>
<Head1>
selectNodeContents</Head1>
<Body>
Sets the <Code>
Range</Code>
to contain the contents of a <Code>
Node</Code>
.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.selectNodeContents(referenceNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
The selectNodeContents method takes the following parameters:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
referenceNode</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
The <Code>
Node</Code>
whose contents will be selected within a <Code>
Range</Code>
</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
referenceNode = document.getElementsByTagName(&quot;div&quot;).item(0);</Code>
<Code>
range.selectNodeContents(referenceNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The parent <Code>
Node</Code>
of the start and end of the <Code>
Range</Code>
will be the <Code>
referenceNode</Code>
.  The <Code>
startOffset</Code>
is 0, and the <Code>
endOffset</Code>
is the number of child <Code>
Nodes</Code>
or number of characters contained in the reference node.</Body>
<Head3>
Specification</Head3>
<Body>
selectNodeContents</Body>
<Body>
</Body>
<Head1>
collapse</Head1>
<Body>
Collapses the <Code>
Range</Code>
to one of its boundary points.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.collapse(toStart);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
The collapse method takes the following parameters:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
toStart</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
A boolean, <Code>
true</Code>
collapses the <Code>
Range</Code>
to its start, <Code>
false</Code>
to its end.</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
referenceNode = document.getElementsByTagName(&quot;div&quot;).item(0);</Code>
<Code>
range.selectNode(referenceNode);</Code>
<Code>
range.collapse(true);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
A collapsed <Code>
Range</Code>
is empty, containing no content, specifying a single-point in a DOM tree. To determine if a <Code>
Range</Code>
is already collapsed, see the <Bold>
collapsed</Bold>
property.</Body>
<Head3>
Specification</Head3>
<Body>
<Italic>
collapse</Italic>
</Body>
<Body>
</Body>
<Head1>
cloneContents</Head1>
<Body>
Returns a document fragment copying the nodes of a Range. </Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
documentFragment = range.cloneContents();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Code>
documentFragment</Code>
is a document fragment</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.selectNode(document.getElementsByTagName(&quot;div&quot;).
item(0));</Code>
<Code>
documentFragment = range.cloneContents();</Code>
<Code>
document.body.appendChild(documentFragment);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Event Listeners added using DOM Events are not copied during cloning.  HTML attribute events are duplicated as they are for the DOM Core <Code>
cloneNode</Code>
method.  HTML <Code>
id</Code>
attributes are also cloned, which can lead to an invalid document through cloning.</Body>
<Body>
Partially selected nodes include the parent tags necessary to make the document fragment valid.</Body>
<Head3>
Specification</Head3>
<Body>
cloneContents</Body>
<Body>
</Body>
<Head1>
deleteContents</Head1>
<Body>
Removes the contents of a Range from the document.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.deleteContents()</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
None.</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.selectNode(</Code>
<Code>
document.getElementsByTagName(&quot;div&quot;).item(0));</Code>
<Code>
range.deleteContents();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Unlike <CodeSmall>
extractContents</CodeSmall>
, this method does not return a documentFragment containing the deleted content.</Body>
<Head3>
Specification</Head3>
<Body>
deleteContents</Body>
<Body>
</Body>
<Head1>
extractContents</Head1>
<Body>
Moves contents of a Range from the document tree into a document fragment.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
documentFragment = range.extractContents();</Code>
</CELL>
</ROW>
</TABLE>
<Body>
Parameters</Body>
<Body>
<Code>
documentFragment</Code>
is a document fragment</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.selectNode(document.getElementsByTagName(&quot;div&quot;).item(0));</Code>
<Code>
documentFragment = range.extractContents();</Code>
<Code>
document.body.appendChild(documentFragment);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Event Listeners added using DOM Events are not retained during extraction.  HTML attribute events are retained or duplicated as they are for the DOM Core cloneNode method.  HTML id attributes are also cloned, which can lead to an invalid document if a partially-selected node is extracted and appened to the document.</Body>
<Body>
Partially selected nodes are cloned to include the parent tags necessary to make the document fragment valid.</Body>
<Head3>
Specification:</Head3>
<Body>
extractContents</Body>
<Body>
</Body>
<Head1>
insertNode</Head1>
<Body>
Insert a node at the start of a Range.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.insertNode(newNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Code>
newNode</Code>
is a <Code>
Node</Code>
.</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
newNode = document.createElement(&quot;p&quot;):</Code>
<Code>
newNode.appendChild(document.createTextNode(&quot;New Node Inserted Here&quot;));</Code>
<Code>
range.selectNode(document.getElementsByTagName(&quot;div&quot;).item(0));</Code>
<Code>
range.insertNode(newNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Code>
newNode</Code>
is inserted at the start boundary point of the Range.  If the newNodes is to be added to a text Node, that Node is split at the insertion point, and the insertion occurs between the two text Nodes (Blocked by http://bugzilla.mozilla.org/show_bug.cgi?id=135922 )</Body>
<Body>
If newNode is a document fragment, the children of the document fragment are inserted instead.</Body>
<Head3>
Specification</Head3>
<Body>
insertNode</Body>
<Body>
</Body>
<Head1>
surroundContents</Head1>
<Body>
Moves content of a Range into a new node.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.surroundContents(newNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Code>
newNode</Code>
a <Code>
Node</Code>
</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
newNode = document.createElement(&quot;p&quot;):</Code>
<Code>
range.selectNode(document.getElementsByTagName(&quot;div&quot;).item(0));</Code>
<Code>
range.surroundContents(newNode);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Code>
surroundContents</Code>
is equivalent to <Code>
newNode.appendChild(range.extractContents());range.insertNode(newNode)</Code>
.  After surrounding, the boundary points of the Range include newNode.  (Hindered by http://bugzilla.mozilla.org/show_bug.cgi?id=135928 )</Body>
<Head3>
Specification</Head3>
<Body>
surroundContents</Body>
<Body>
</Body>
<Head1>
compareBoundaryPoints</Head1>
<Body>
Compares the boundary points of two Ranges.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
compare = range.compareBoundaryPoints(how,sourceRange);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
The compareBoundaryPoints method takes the following parameters:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
compare</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
A number, 1, 0, -1.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
how</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
A constant describing the comparison method</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
sourceRange</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
A Range to boundary points with <Code>
range</Code>
</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.selectNode(
document.getElementsByTagName(&quot;div&quot;).item(0));</Code>
<Code>
sourceRange = document.createRange();</Code>
<Code>
sourceRange.selectNode(document.getElementsByTagName(
&quot;div&quot;).item(1));</Code>
<Code>
compare = range.compareBoundaryPoints(
START_TO_END,sourceRange);</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Code>
END_TO_END</Code>
compares the end boundary-point of <Code>
sourceRange</Code>
to the end boundary-point of range.</Body>
<Body>
<Code>
END_TO_START</Code>
compares the end boundary-point of <Code>
sourceRange</Code>
to the start boundary-point of range.</Body>
<Body>
<Code>
START_TO_END</Code>
compares the start boundary-point of <Code>
sourceRange</Code>
to the end boundary-point of range.</Body>
<Body>
<Code>
START_TO_START</Code>
compares the start boundary-point of <Code>
sourceRange</Code>
to the start boundary-point of range.</Body>
<Head3>
Specification</Head3>
<Body>
compareBoundaryPoints</Body>
<Body>
</Body>
<Head1>
cloneRange</Head1>
<Body>
Returns a Range object with boundary points identical to the cloned Range. </Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
clone = range.cloneRange();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Code>
clone</Code>
is a Range object.</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.selectNode(
document.getElementsByTagName(&quot;div&quot;).item(0));</Code>
<Code>
clone = range.cloneRange();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Code>
clone</Code>
is copied by value, not reference, so a change in either Range does not effect the other.</Body>
<Head3>
Specification</Head3>
<Body>
cloneRange</Body>
<Body>
</Body>
<Head1>
detach</Head1>
<Body>
Releases Range from use to improve performance.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range.detach();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Code>
None.</Code>
</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.selectNode(
document.getElementsByTagName(&quot;div&quot;).item(0));</Code>
<Code>
range.detach();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Allows mozilla to relinquish resources associated with this Range. Subsequent attempts to use the detached range will result in a <Code>
DOMException</Code>
being thrown with an error code of <Code>
INVALID_STATE_ERR</Code>
.</Body>
<Head3>
Specification</Head3>
<Body>
detach</Body>
<Body>
</Body>
<Head1>
toString</Head1>
<Body>
Returns the text of the Range.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
text = range.toString();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Code>
text</Code>
is the text contained in range.</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.selectNode(
document.getElementsByTagName(&quot;div&quot;).item(0));</Code>
<Code>
text = range.toString();</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Alerting the contents of a Range makes an implicit toString() call, so comparing range and text through an alert dialog is ineffective</Body>
<Head3>
Specification</Head3>
<Body>
toString</Body>
<Body>
</Body>
<Body>
</Body>
<Heading1>
Gecko Range Interface Extensions</Heading1>
<Body>
This section describes Range methods that are particular to Mozilla and not part of the W3 DOM specifications.</Body>
<Heading2>
Methods</Heading2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
compareNode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a constant.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
comparePoint</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns -1, 0, or 1.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
createContextualFragment</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a document fragment.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
intersectsNode</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the given point intersects the range.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
isPointInRange</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether the given point is in the range.</CellBody>
</CELL>
</ROW>
</TABLE>
<Head1>
compareNode</Head1>
<Body>
Returns a constant (see notes)</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
returnValue = range.compareNode( referenceNode );</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Paramaters</Head3>
<Body>
</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.selectNode(document.getElementsByTagName(&quot;div&quot;).item(0));</Code>
<Code>
returnValue = range.compareNode(document.getElementsByTagName(&quot;p&quot;).item(0));</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
NODE_BEFORE = 0</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Node starts before the Range</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
NODE_AFTER = 1 </Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Node starts after the Range</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
NODE_BEFORE_AND_AFTER = 2</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Node starts before and ends after the Range</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
NODE_INSIDE = 3</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Node starts after and ends before the Range, i.e. the Node is completely selected by the Range.</CellBody>
</CELL>
</ROW>
</TABLE>
<Head3>
Specification</Head3>
<Body>
This method is not part of specification.</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
comparePoint</Head1>
<Body>
comparePoint()</Body>
<Body>
Returns -1, 0, or 1</Body>
<Body>
</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
returnValue = range.comparePoint( referenceNode, offset )</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
returnValue</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
-1, 0, or 1 depending on whether the referenceNode is before, the same as, or after the range.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
referenceNode</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
The Node to compare with the Range.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Code>
offset</Code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An integer greater than or equal to zero representing the offset inside the referenceNode.</CellBody>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeCompact>
range = document.createRange();</CodeCompact>
<CodeCompact>
range.selectNode(document.getElementsByTagName(&quot;div&quot;).item(0));</CodeCompact>
<CodeCompact>
returnValue = range.comparePoint(document.getElementsByTagName(&quot;p&quot;).item(0),1);</CodeCompact>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the <Code>
referenceNode</Code>
is a Node of type <Code>
Text</Code>
, <Code>
Comment</Code>
, or <Code>
CDATASection</Code>
, then offset is the number of characters from the start of referenceNode. For other Node types, offset is the number of child nodes between the start of the referenceNode.</Body>
<Head3>
Specification</Head3>
<Body>
This method is not part of a specification.</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
createContextualFragment</Head1>
<Body>
Returns a document fragment</Body>
<Head3>
Syntax</Head3>
<Body>
documentFragment = range.createContextualFragment( tagString )</Body>
<Head3>
Parameters</Head3>
<Body>
tagString is text that contains text and tags to be converted to a document fragment</Body>
<Head3>
Example</Head3>
<Body>
tagString = &quot;&lt;div&gt;I am a div node&lt;/div&gt;&quot;;</Body>
<Body>
range = document.createRange();</Body>
<Body>
range.selectNode(document.getElementsByTagName(&quot;div&quot;).item(0));</Body>
<Body>
documentFragment = range.createContextualFragment(tagString);</Body>
<Body>
document.body.appendChild(documentFragment);</Body>
<Head3>
Notes</Head3>
<Body>
This method takes a string and uses mozilla's parser to convert it to a DOM tree.</Body>
<Head3>
Specification</Head3>
<Body>
This method is not part of a specification.</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
intersectsNode</Head1>
<Body>
Returns a boolean indicating whether the given point intersects the range.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
bool = range.intersectsNode( referenceNode )</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Code>
bool</Code>
is true if the <Code>
referenceNode</Code>
intersects the Range, false if not.</Body>
<Body>
<Code>
referenceNode</Code>
is the Node to compare with the Range.</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
range = document.createRange();</Code>
<Code>
range.selectNode(document.
getElementsByTagName(&quot;div&quot;).item(0));</Code>
<Code>
bool = range.intersectsNode(document.
getElementsByTagName(&quot;p&quot;).item(0),1);</Code>
<Code>
</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None</Body>
<Head3>
Specification</Head3>
<Body>
This method is not part of a specification.</Body>
<Body>
</Body>
<Body>
</Body>
<Head1>
isPointInRange</Head1>
<Body>
Returns a boolean indicating whether the given point is in the range.</Body>
<Head3>
Syntax</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
bool = range.intersectsNode( referenceNode )</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Parameters</Head3>
<Body>
<Code>
bool</Code>
is true if the <Code>
referenceNode</Code>
intersects the Range, false if not.</Body>
<Body>
<Code>
referenceNode</Code>
is the Node to compare with the Range.</Body>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeCompact>
range = document.createRange();</CodeCompact>
<CodeCompact>
range.selectNode(document.getElementsByTagName(&quot;div&quot;).item(0));</CodeCompact>
<CodeCompact>
bool = range.intersectsNode(document.
getElementsByTagName(&quot;p&quot;).item(0),1);</CodeCompact>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None</Body>
<Head3>
Specification</Head3>
<Body>
This method is not part of a specification.</Body>
<Body>
</Body>
</chapter>

<chapter>
<title>DOM Examples</title>
<Body>
This chapter provides some longer examples of web and XML development using the DOM. Wherever possible, the examples use common APIs, tricks, and patterns in JavaScript for manipulating the document object.</Body>
<Body>
</Body>
<Body>
</Body>
<Body>
</Body>
<BulletedList>
<Bulleted>
<Italic>
Example 1: height and width</Italic>
</Bulleted>
<Bulleted>
<Italic>
Example 2: Image Attributes</Italic>
</Bulleted>
<Bulleted>
<Italic>
Example 3: Manipulating Styles</Italic>
</Bulleted>
<Bulleted>
<Italic>
Example 4: Using Stylesheets</Italic>
</Bulleted>
<Bulleted>
<Italic>
Example 5: Event Propagation</Italic>
</Bulleted>
<Bulleted>
<Italic>
Example 6: getComputedStyle</Italic>
</Bulleted>
<Bulleted>
<Italic>
Example 7: Displaying Event Object Constants</Italic>
</Bulleted>
</BulletedList>
<Head1>
Example 1: height and width</Head1>
<Body>
The following example shows the use of the height and width properties alongside images of varying dimensions:</Body>
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;title&gt;image example&lt;/title&gt;</Code>
<Code>
&lt;script language=&quot;javascript&quot;&gt;</Code>
<Code>
function init()</Code>
<Code>
{</Code>
<Code>
var image = new Array();</Code>
<Code>
image[0] = document.getElementById('image1');</Code>
<Code>
image[1] = document.getElementById('image2');</Code>
<Code>
image[2] = document.getElementById('image3');</Code>
<Code>
var output = document.getElementById('output');</Code>
<Code>
var html   = '';</Code>
<Code>
var i;</Code>
<Code>
html = '&lt;ul&gt;';</Code>
<Code>
for (i = 0; i &lt; image.length; i++)</Code>
<Code>
html += '&lt;li&gt;image' + (i+1) + ': height=' +
image[i].height + ', width=' + image[i].width + ',
style.height=' + image[i].style.height + ', style.width=' +
image[i].style.width + '&lt;/li&gt;';</Code>
<Code>
</Code>
<Code>
html += '&lt;/ul&gt;';</Code>
<Code>
</Code>
<Code>
output.innerHTML = html;</Code>
<Code>
}</Code>
<Code>
</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
&lt;body onload=&quot;init()&quot;&gt;</Code>
<Code>
</Code>
<Code>
&lt;p&gt;Image 1: no height, width, or style &lt;img id=&quot;image1&quot;
src=&quot;http://www.mozilla.org/images/mozilla-banner.gif&quot;&gt;&lt;/p&gt;
</Code>
<Code>
&lt;p&gt;Image 2: height=50, width=500, but no style &lt;img
id=&quot;image2&quot; src=&quot;http://www.mozilla.org/images/mozilla-
banner.gif&quot; height=&quot;50&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
</Code>
<Code>
&lt;p&gt;Image 3: no height, width, but style=&quot;height: 50px; width:
500px;&quot; &lt;img id=&quot;image3&quot; src=&quot;http://www.mozilla.org/images/
mozilla-banner.gif&quot; style=&quot;height: 50px; width:500px;&quot;&gt;&lt;/p&gt;</Code>
<Code>
</Code>
<Code>
&lt;div id=&quot;output&quot;&gt;</Code>
<Code>
&lt;/div&gt;</Code>
<Body>
height and width are also properties of the <Code>
EMBED</Code>
, <Code>
OBJECT</Code>
, and <Code>
APPLET</Code>
objects.</Body>
<Body>
</Body>
<Head1>
Example 2: Image Attributes</Head1>
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;title&gt;border&lt;/title&gt;</Code>
<Code>
&lt;script TYPE=&quot;text/javascript&quot;&gt;</Code>
<Code>
&lt;!--</Code>
<Code>
function border1(){document.IMG.setAttribute('border',20)}</Code>
<Code>
function border2(){document.IMG.setAttribute('border',5)}</Code>
<Code>
//--&gt;</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;style TYPE=&quot;text/css&quot;&gt;</Code>
<Code>
&lt;!--</Code>
<Code>
BODY { background-color: #ffffff }</Code>
<Code>
//--&gt;</Code>
<Code>
&lt;/style&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
&lt;body&gt;</Code>
<Code>
*border</Code>
<Code>
&lt;hr&gt;</Code>
<Code>
&lt;p&gt;</Code>
<Code>
&lt;img SRC=&quot;image1.gif&quot; ID=&quot;IMG&quot; border=&quot;5&quot; WIDTH=&quot;100&quot;
HEIGHT=&quot;100&quot; ALT=&quot;border&quot;&gt;</Code>
<Code>
&lt;/p&gt;</Code>
<Code>
&lt;form NAME=&quot;FORM&quot;&gt;</Code>
<Code>
&lt;input TYPE=&quot;button&quot; VALUE=&quot;Change&quot; onClick=&quot;border1()&quot;&gt;</Code>
<Code>
&lt;input TYPE=&quot;button&quot; VALUE=&quot;Return&quot; onClick=&quot;border2()&quot;&gt;</Code>
<Code>
&lt;/form&gt;</Code>
<Code>
&lt;hr&gt;</Code>
<Code>
&lt;p&gt;</Code>
<Code>
&lt;font SIZE=-1&gt;</Code>
<Code>
Made by &lt;a HREF=&quot;http://www.bekkoame.ne.jp/~hamba/webimage/
java/java.html&quot;&gt;MasahitoHamba&lt;/a&gt;(&lt;a HREF=&quot;mailto:hamba@bekkoame.ne.jp&quot;&gt;
hamba@bekkoame.ne.jp&lt;/a&gt;).
&lt;br&gt;</Code>
<Code>
It's free to copy and arrange this sample.But please keep to
regulation of &lt;a HREF=&quot;http://cgi.din.or.jp/~hagi3/
JavaScript/JSTips/Mozilla/MDSProject.htm&quot;
TARGET=msg&gt;MDSProject&lt;/a&gt;. &lt;br&gt;Last update 2001.01.14&lt;/font&gt;</Code>
<Code>
&lt;/body&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<Body>
</Body>
<Head1>
Example 3: Manipulating Styles</Head1>
<Body>
In this simple example, some basic style properties of an HTML paragraph element are accessed using the <Code>
style</Code>
object on the element and that object’s CSS style properties, which can be retrieved and set from the DOM. In this case, you are manipulating the individual styles directly. In the next example (see Example 4), you can use stylesheets and their rules to change styles for whole documents.</Body>
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;script&gt;</Code>
<Code>
function changeText() {</Code>
<Code>
p = document.getElementById(&quot;pid&quot;);</Code>
<Code>
p.style.color = &quot;blue&quot;</Code>
<Code>
p.style.fontSize = &quot;18pt&quot;</Code>
<Code>
}</Code>
<Code>
</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
&lt;body&gt;</Code>
<Code>
&lt;p id=&quot;pid&quot; 
onclick=&quot;window.location='http://www.cnn.com';&quot; &gt;linker&lt;/p&gt;</Code>
<Code>
&lt;form&gt;</Code>
<Code>
&lt;input value=&quot;rec&quot; type=&quot;button&quot; onclick=&quot;changeText();&quot; /&gt;</Code>
<Code>
&lt;/form&gt;</Code>
<Code>
&lt;/body&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<Body>
</Body>
<Head1>
Example 4: Using Stylesheets</Head1>
<Body>
The styleSheets property on the <Code>
document</Code>
object returns a list of the stylesheets that have been loaded on that document. You can access these stylesheets and their rules individually using the <Code>
stylesheet</Code>
, <Code>
style</Code>
, and <Code>
CSSRule</Code>
objects, as demonstrated in this example, which prints out all of the style rule selectors to the console.</Body>
<Body>
</Body>
<Code>
ss = document.styleSheets;</Code>
<Code>
for(ii=0;ii&lt;ss.length;ii++) {</Code>
<Code>
for(i=0;i&lt;ss[0].cssRules.length;i++) {</Code>
<Code>
dump( ss[ii].cssRules[i].style.selectorText + “\n” );</Code>
<Code>
}</Code>
<Body>
For a document with a single stylesheet in which the following three rules are defined: </Body>
<Code>
BODY { background-color: darkblue; }</Code>
<Code>
P { font-face: Arial; font-size: 10pt; margin-left: .125in; }</Code>
<Code>
#lumpy { display: none; }</Code>
<BodyKeepNext>
This script outputs the following:</BodyKeepNext>
<Code>
BODY</Code>
<Code>
P</Code>
<Code>
#LUMPY</Code>
<Head1>
Example 5: Event Propagation</Head1>
<Body>
This example demonstrates how events fire and are handled in the DOM in a very simple way. When the <Code>
BODY</Code>
of this <Code>
HTML</Code>
document loads, an event listener is registered with the top row of the <Code>
TABLE</Code>
. The event listener handles the event by executing the function <Code>
l_func</Code>
, which changes the value in the bottom cell of the table.</Body>
<Body>
However,<Code>
l_func</Code>
also calls an event object method, <Italic>
stopPropagation</Italic>
, which keeps the event from bubbling any further up into the DOM. Note that the table itself has an <Code>
onclick</Code>
event handler that ought to display a message when the table is clicked. But the<Code>
l_func</Code>
method has stopped propagation, and so after the data in the table is updated, the event phase is effectively ended.</Body>
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;style&gt;</Code>
<Code>
#t-daddy { border: 1px solid red }</Code>
<Code>
#t1 { background-color: pink; }</Code>
<Code>
&lt;/style&gt;</Code>
<Code>
&lt;script&gt;</Code>
<Code>
function l_func(e) {</Code>
<Code>
t2 = document.getElementById(&quot;t2&quot;);</Code>
<Code>
t2.innerHTML = &quot;three&quot;;</Code>
<Code>
e.stopPropagation(); </Code>
<Code>
// this ought to keep t-daddy from getting the click. </Code>
<Code>
}</Code>
<Code>
</Code>
<Code>
function load() {</Code>
<Code>
el = document.getElementById(&quot;t&quot;);</Code>
<Code>
el.addEventListener(&quot;click&quot;, l_func, false);</Code>
<Code>
}</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
&lt;body onload=&quot;load();&quot;&gt;</Code>
<Code>
&lt;table id=&quot;t-daddy&quot; onclick=&quot;alert('hi');&quot;&gt;</Code>
<Code>
&lt;tr id=&quot;t&quot;&gt;</Code>
<Code>
&lt;td id=&quot;t1&quot;&gt;one&lt;/td&gt;</Code>
<Code>
&lt;/tr&gt;</Code>
<Code>
&lt;tr&gt;&lt;td id=&quot;t2&quot;&gt;two&lt;/td&gt;&lt;/tr&gt;</Code>
<Code>
&lt;/table&gt;</Code>
<Code>
&lt;/body&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<Head1>
Example 6: getComputedStyle</Head1>
<Body>
This example demonstrates how the DOM <Code>
document.defaultView.getComputedStyle()</Code>
method can be used to get the styles on an element that <Emphasis>
aren’t</Emphasis>
set in-line or with JavaScript (e.g., <Code>
element.style.backgroundColor=”lightblue”</Code>
). These latter types of styles can be retrieved with the more direct <Code>
style = element.style</Code>
property, a list of which properties is listed in the DOM Style Reference of this book (see <Italic>
DOM CSS Properties List</Italic>
). See also the <Italic>
style</Italic>
property in the DOM Elements Reference.</Body>
<Body>
getComputedStyle() returns a <Code>
ComputedCSSStyleDeclaration</Code>
object, whose individual style properties can be referenced with this object’s <Code>
getPropertyValue()</Code>
method, as the following example document shows.</Body>
<CodeWide>
&lt;html&gt;</CodeWide>
<CodeWide>
&lt;head&gt;</CodeWide>
<CodeWide>
&lt;title&gt;getComputedStyle&lt;/title&gt;</CodeWide>
<CodeWide>
&lt;script&gt;</CodeWide>
<CodeWide>
function cStyles() {</CodeWide>
<CodeWide>
div = document.getElementById(&quot;d1&quot;);</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
t1 = document.getElementById(&quot;t1&quot;);</CodeWide>
<CodeWide>
h_style = document.defaultView.getComputedStyle(div, '').
getPropertyValue(&quot;height&quot;);</CodeWide>
<CodeWide>
t1.setAttribute(&quot;value&quot;, h_style);</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
t2 = document.getElementById(&quot;t2&quot;);</CodeWide>
<CodeWide>
w_style = document.defaultView.getComputedStyle(div, '').
getPropertyValue(&quot;width&quot;);</CodeWide>
<CodeWide>
t2.setAttribute(&quot;value&quot;, w_style);</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
t3 = document.getElementById(&quot;t3&quot;);</CodeWide>
<CodeWide>
b_style = document.defaultView.getComputedStyle(div, '').
getPropertyValue(&quot;background-color&quot;);</CodeWide>
<CodeWide>
t3.setAttribute(&quot;value&quot;, b_style);</CodeWide>
<CodeWide>
}</CodeWide>
<CodeWide>
&lt;/script&gt;</CodeWide>
<CodeWide>
&lt;style&gt;</CodeWide>
<CodeWide>
.d { margin-left: 10px; background-color: lightblue; 
height: 20px; max-width: 20px; }</CodeWide>
<CodeWide>
&lt;/style&gt;</CodeWide>
<CodeWide>
&lt;/head&gt;</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
&lt;body&gt;</CodeWide>
<CodeWide>
&lt;div id=&quot;d1&quot; class=&quot;d&quot;&gt;&amp;nbsp;&lt;/div&gt;</CodeWide>
<CodeWide>
&lt;p&gt;&amp;nbsp;</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
&lt;blockquote&gt;</CodeWide>
<CodeWide>
&lt;button onclick=&quot;cStyles();&quot;&gt;getComputedStyle&lt;/button&gt;</CodeWide>
<CodeWide>
height&lt;input id=&quot;t1&quot; type=&quot;text&quot; value=&quot;1&quot;  /&gt;</CodeWide>
<CodeWide>
max-width&lt;input id=&quot;t2&quot; type=&quot;text&quot; value=&quot;2&quot;  /&gt;
bg-color&lt;input id=&quot;t3&quot; type=&quot;text&quot; value=&quot;3&quot;  /&gt;&lt;/pre&gt;</CodeWide>
<CodeWide>
&lt;/blockquote&gt;</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
&lt;/body&gt;</CodeWide>
<CodeWide>
&lt;/html&gt;</CodeWide>
<Head1>
Example 7: Displaying Event Object Constants</Head1>
<Body>
This example shows how to use the DOM to create a table in which all of the constants in the <Code>
event</Code>
object and their values are displayed. It shows off several useful aspects of the DOM, including the <Code>
Event.prototype</Code>
property, which allows you to get to the properties of a particular object, a good pattern for iterating over the properties in that prototype, and the values of the constants themselves displayed in the table. Note that the middle range of these constants are the character codes that represent the actual keys pressed during the event (and fetchable with the <Italic>
charCode</Italic>
property).</Body>
<Body>
Load the following code as a web page to see the <Code>
event</Code>
object constants.</Body>
<Body>
</Body>
<CodeWide>
&lt;?xml version=&quot;1.0&quot; ?&gt;</CodeWide>
<CodeWide>
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;DTD/xhtml1-transitional.dtd&quot;&gt;</CodeWide>
<CodeWide>
&lt;!--</CodeWide>
<CodeWide>
* ***** BEGIN LICENSE BLOCK *****</CodeWide>
<CodeWide>
* Version: NPL 1.1/GPL 2.0/LGPL 2.1</CodeWide>
<CodeWide>
*</CodeWide>
<CodeWide>
* The contents of this file are subject to the Netscape Public License</CodeWide>
<CodeWide>
* Version 1.1 (the &quot;License&quot;); you may not use this file except in</CodeWide>
<CodeWide>
* compliance with the License. You may obtain a copy of the License at</CodeWide>
<CodeWide>
* http://www.mozilla.org/NPL/</CodeWide>
<CodeWide>
*</CodeWide>
<CodeWide>
* Software distributed under the License is distributed on an &quot;AS IS&quot; basis,</CodeWide>
<CodeWide>
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License</CodeWide>
<CodeWide>
* for the specific language governing rights and limitations under the</CodeWide>
<CodeWide>
* License.</CodeWide>
<CodeWide>
*</CodeWide>
<CodeWide>
* Contributor(s):</CodeWide>
<CodeWide>
*   Alexander J. Vincent &lt;jscript@pacbell.net&gt;</CodeWide>
<CodeWide>
*</CodeWide>
<CodeWide>
* Alternatively, the contents of this file may be used under the terms of</CodeWide>
<CodeWide>
* either the GNU General Public License Version 2 or later (the &quot;GPL&quot;), or </CodeWide>
<CodeWide>
* the GNU Lesser General Public License Version 2.1 or later (the &quot;LGPL&quot;),</CodeWide>
<CodeWide>
* in which case the provisions of the GPL or the LGPL are applicable instead</CodeWide>
<CodeWide>
* of those above. If you wish to allow use of your version of this file only</CodeWide>
<CodeWide>
* under the terms of either the GPL or the LGPL, and not to allow others to</CodeWide>
<CodeWide>
* use your version of this file under the terms of the NPL, indicate your</CodeWide>
<CodeWide>
* decision by deleting the provisions above and replace them with the notice</CodeWide>
<CodeWide>
* and other provisions required by the GPL or the LGPL. If you do not delete</CodeWide>
<CodeWide>
* the provisions above, a recipient may use your version of this file under</CodeWide>
<CodeWide>
* the terms of any one of the NPL, the GPL or the LGPL.</CodeWide>
<CodeWide>
*</CodeWide>
<CodeWide>
* ***** END LICENSE BLOCK ***** * --&gt;</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;</CodeWide>
<CodeWide>
&lt;head&gt;&lt;title&gt;&lt;/title&gt;</CodeWide>
<CodeWide>
&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;</CodeWide>
<CodeWide>
&lt;!--</CodeWide>
<CodeWide>
function respond() {</CodeWide>
<CodeWide>
// creating a table </CodeWide>
<CodeWide>
var table = document.createElement(&quot;table&quot;)</CodeWide>
<CodeWide>
table.setAttribute(&quot;border&quot;, &quot;1&quot;)</CodeWide>
<CodeWide>
var tbody = document.createElement(&quot;tbody&quot;)</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
var y = 0</CodeWide>
<CodeWide>
var tr = document.createElement(&quot;tr&quot;)</CodeWide>
<CodeWide>
var td = document.createElement(&quot;th&quot;)</CodeWide>
<CodeWide>
// reusing the same variable name in the loop</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
// begin table heading information</CodeWide>
<CodeWide>
td.appendChild(document.createTextNode(&quot;Index&quot;))</CodeWide>
<CodeWide>
tr.appendChild(td)</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
td = document.createElement(&quot;th&quot;)</CodeWide>
<CodeWide>
td.appendChild(document.createTextNode(&quot;Property Name&quot;))</CodeWide>
<CodeWide>
tr.appendChild(td)</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
td = document.createElement(&quot;th&quot;)</CodeWide>
<CodeWide>
td.appendChild(document.createTextNode(&quot;Property Value&quot;))</CodeWide>
<CodeWide>
tr.appendChild(td)</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
tbody.appendChild(tr)</CodeWide>
<CodeWide>
// end table heading information</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
for (property in Event.prototype) {</CodeWide>
<CodeWide>
if (property == property.toUpperCase()) {</CodeWide>
<CodeWide>
// adding a new row for each property of the event object</CodeWide>
<CodeWide>
tr = document.createElement(&quot;tr&quot;)</CodeWide>
<CodeWide>
td = document.createElement(&quot;td&quot;)</CodeWide>
<CodeWide>
td.appendChild(document.createTextNode(y))</CodeWide>
<CodeWide>
// which property number it happens to be</CodeWide>
<CodeWide>
tr.appendChild(td)</CodeWide>
<CodeWide>
y++</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
td = document.createElement(&quot;td&quot;)</CodeWide>
<CodeWide>
var td_text = document.createTextNode(property)</CodeWide>
<CodeWide>
// the property name</CodeWide>
<CodeWide>
td.appendChild(td_text)</CodeWide>
<CodeWide>
tr.appendChild(td)</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
td = document.createElement(&quot;td&quot;)</CodeWide>
<CodeWide>
var td_text = document.createTextNode(Event.prototype[property])</CodeWide>
<CodeWide>
// the property value</CodeWide>
<CodeWide>
td.appendChild(td_text)</CodeWide>
<CodeWide>
tr.appendChild(td)</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
tbody.appendChild(tr)</CodeWide>
<CodeWide>
}</CodeWide>
<CodeWide>
}</CodeWide>
<CodeWide>
table.appendChild(tbody)</CodeWide>
<CodeWide>
document.body.appendChild(table)</CodeWide>
<CodeWide>
}</CodeWide>
<CodeWide>
//--&gt;</CodeWide>
<CodeWide>
&lt;/script&gt;</CodeWide>
<CodeWide>
&lt;/head&gt;</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
&lt;body onload=&quot;respond()&quot;&gt;</CodeWide>
<CodeWide>
&lt;!-Results after clicking on the button:</CodeWide>
<CodeWide>
The this object is myInput.</CodeWide>
<CodeWide>
Index    Property Name Property Value</CodeWide>
<CodeWide>
0        type          click</CodeWide>
<CodeWide>
1        target        [object HTMLInputElement]</CodeWide>
<CodeWide>
...</CodeWide>
<CodeWide>
--&gt;</CodeWide>
<CodeWide>
&lt;/body&gt;</CodeWide>
<CodeWide>
&lt;/html&gt;</CodeWide>
</chapter>

<FOOTNOTES>
<FOOTNOTE>
<Footnote>
In Gecko, XHTML documents are supported as XML documents, and do not currently support the <Code>
HTMLDocument</Code>
interface listed here.</Footnote>
</FOOTNOTE>
<FOOTNOTE>
<Footnote>
The <Code>
Document</Code>
interface that document implements is more general than <Code>
HTMLDocument</Code>
, which derives from it. <Code>
Document</Code>
is the interface that provides such basic hierarchy-manipulating methods and properties as <Code>
childNodes</Code>
, <Code>
firstChild</Code>
, <Code>
nodeType</Code>
, and others. </Footnote>
</FOOTNOTE>
</FOOTNOTES>
</XML>
