<chapter>
<title>DOM Examples</title>
<Body>
This chapter provides some longer examples of web and XML development using the DOM. Wherever possible, the examples use common APIs, tricks, and patterns in JavaScript for manipulating the document object.</Body>
<Body>
</Body>
<Body>
</Body>
<Body>
</Body>
<BulletedList>
<Bulleted>
<Italic>
Example 1: height and width</Italic>
</Bulleted>
<Bulleted>
<Italic>
Example 2: Image Attributes</Italic>
</Bulleted>
<Bulleted>
<Italic>
Example 3: Manipulating Styles</Italic>
</Bulleted>
<Bulleted>
<Italic>
Example 4: Using Stylesheets</Italic>
</Bulleted>
<Bulleted>
<Italic>
Example 5: Event Propagation</Italic>
</Bulleted>
<Bulleted>
<Italic>
Example 6: getComputedStyle</Italic>
</Bulleted>
<Bulleted>
<Italic>
Example 7: Displaying Event Object Constants</Italic>
</Bulleted>
</BulletedList>
<Head1>
Example 1: height and width</Head1>
<Body>
The following example shows the use of the height and width properties alongside images of varying dimensions:</Body>
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;title&gt;image example&lt;/title&gt;</Code>
<Code>
&lt;script language=&quot;javascript&quot;&gt;</Code>
<Code>
function init()</Code>
<Code>
{</Code>
<Code>
var image = new Array();</Code>
<Code>
image[0] = document.getElementById('image1');</Code>
<Code>
image[1] = document.getElementById('image2');</Code>
<Code>
image[2] = document.getElementById('image3');</Code>
<Code>
var output = document.getElementById('output');</Code>
<Code>
var html   = '';</Code>
<Code>
var i;</Code>
<Code>
html = '&lt;ul&gt;';</Code>
<Code>
for (i = 0; i &lt; image.length; i++)</Code>
<Code>
html += '&lt;li&gt;image' + (i+1) + ': height=' +
image[i].height + ', width=' + image[i].width + ',
style.height=' + image[i].style.height + ', style.width=' +
image[i].style.width + '&lt;/li&gt;';</Code>
<Code>
</Code>
<Code>
html += '&lt;/ul&gt;';</Code>
<Code>
</Code>
<Code>
output.innerHTML = html;</Code>
<Code>
}</Code>
<Code>
</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
&lt;body onload=&quot;init()&quot;&gt;</Code>
<Code>
</Code>
<Code>
&lt;p&gt;Image 1: no height, width, or style &lt;img id=&quot;image1&quot;
src=&quot;http://www.mozilla.org/images/mozilla-banner.gif&quot;&gt;&lt;/p&gt;
</Code>
<Code>
&lt;p&gt;Image 2: height=50, width=500, but no style &lt;img
id=&quot;image2&quot; src=&quot;http://www.mozilla.org/images/mozilla-
banner.gif&quot; height=&quot;50&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
</Code>
<Code>
&lt;p&gt;Image 3: no height, width, but style=&quot;height: 50px; width:
500px;&quot; &lt;img id=&quot;image3&quot; src=&quot;http://www.mozilla.org/images/
mozilla-banner.gif&quot; style=&quot;height: 50px; width:500px;&quot;&gt;&lt;/p&gt;</Code>
<Code>
</Code>
<Code>
&lt;div id=&quot;output&quot;&gt;</Code>
<Code>
&lt;/div&gt;</Code>
<Body>
height and width are also properties of the <Code>
EMBED</Code>
, <Code>
OBJECT</Code>
, and <Code>
APPLET</Code>
objects.</Body>
<Body>
</Body>
<Head1>
Example 2: Image Attributes</Head1>
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;title&gt;border&lt;/title&gt;</Code>
<Code>
&lt;script TYPE=&quot;text/javascript&quot;&gt;</Code>
<Code>
&lt;!--</Code>
<Code>
function border1(){document.IMG.setAttribute('border',20)}</Code>
<Code>
function border2(){document.IMG.setAttribute('border',5)}</Code>
<Code>
//--&gt;</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;style TYPE=&quot;text/css&quot;&gt;</Code>
<Code>
&lt;!--</Code>
<Code>
BODY { background-color: #ffffff }</Code>
<Code>
//--&gt;</Code>
<Code>
&lt;/style&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
&lt;body&gt;</Code>
<Code>
*border</Code>
<Code>
&lt;hr&gt;</Code>
<Code>
&lt;p&gt;</Code>
<Code>
&lt;img SRC=&quot;image1.gif&quot; ID=&quot;IMG&quot; border=&quot;5&quot; WIDTH=&quot;100&quot;
HEIGHT=&quot;100&quot; ALT=&quot;border&quot;&gt;</Code>
<Code>
&lt;/p&gt;</Code>
<Code>
&lt;form NAME=&quot;FORM&quot;&gt;</Code>
<Code>
&lt;input TYPE=&quot;button&quot; VALUE=&quot;Change&quot; onClick=&quot;border1()&quot;&gt;</Code>
<Code>
&lt;input TYPE=&quot;button&quot; VALUE=&quot;Return&quot; onClick=&quot;border2()&quot;&gt;</Code>
<Code>
&lt;/form&gt;</Code>
<Code>
&lt;hr&gt;</Code>
<Code>
&lt;p&gt;</Code>
<Code>
&lt;font SIZE=-1&gt;</Code>
<Code>
Made by &lt;a HREF=&quot;http://www.bekkoame.ne.jp/~hamba/webimage/
java/java.html&quot;&gt;MasahitoHamba&lt;/a&gt;(&lt;a HREF=&quot;mailto:hamba@bekkoame.ne.jp&quot;&gt;
hamba@bekkoame.ne.jp&lt;/a&gt;).
&lt;br&gt;</Code>
<Code>
It's free to copy and arrange this sample.But please keep to
regulation of &lt;a HREF=&quot;http://cgi.din.or.jp/~hagi3/
JavaScript/JSTips/Mozilla/MDSProject.htm&quot;
TARGET=msg&gt;MDSProject&lt;/a&gt;. &lt;br&gt;Last update 2001.01.14&lt;/font&gt;</Code>
<Code>
&lt;/body&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<Body>
</Body>
<Head1>
Example 3: Manipulating Styles</Head1>
<Body>
In this simple example, some basic style properties of an HTML paragraph element are accessed using the <Code>
style</Code>
object on the element and that objectÅ‚Äôs CSS style properties, which can be retrieved and set from the DOM. In this case, you are manipulating the individual styles directly. In the next example (see Example 4), you can use stylesheets and their rules to change styles for whole documents.</Body>
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;script&gt;</Code>
<Code>
function changeText() {</Code>
<Code>
p = document.getElementById(&quot;pid&quot;);</Code>
<Code>
p.style.color = &quot;blue&quot;</Code>
<Code>
p.style.fontSize = &quot;18pt&quot;</Code>
<Code>
}</Code>
<Code>
</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
&lt;body&gt;</Code>
<Code>
&lt;p id=&quot;pid&quot; 
onclick=&quot;window.location='http://www.cnn.com';&quot; &gt;linker&lt;/p&gt;</Code>
<Code>
&lt;form&gt;</Code>
<Code>
&lt;input value=&quot;rec&quot; type=&quot;button&quot; onclick=&quot;changeText();&quot; /&gt;</Code>
<Code>
&lt;/form&gt;</Code>
<Code>
&lt;/body&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<Body>
</Body>
<Head1>
Example 4: Using Stylesheets</Head1>
<Body>
The styleSheets property on the <Code>
document</Code>
object returns a list of the stylesheets that have been loaded on that document. You can access these stylesheets and their rules individually using the <Code>
stylesheet</Code>
, <Code>
style</Code>
, and <Code>
CSSRule</Code>
objects, as demonstrated in this example, which prints out all of the style rule selectors to the console.</Body>
<Body>
</Body>
<Code>
ss = document.styleSheets;</Code>
<Code>
for(ii=0;ii&lt;ss.length;ii++) {</Code>
<Code>
for(i=0;i&lt;ss[0].cssRules.length;i++) {</Code>
<Code>
dump( ss[ii].cssRules[i].style.selectorText + Å‚Äú\nÅ‚Äù );</Code>
<Code>
}</Code>
<Body>
For a document with a single stylesheet in which the following three rules are defined: </Body>
<Code>
BODY { background-color: darkblue; }</Code>
<Code>
P { font-face: Arial; font-size: 10pt; margin-left: .125in; }</Code>
<Code>
#lumpy { display: none; }</Code>
<BodyKeepNext>
This script outputs the following:</BodyKeepNext>
<Code>
BODY</Code>
<Code>
P</Code>
<Code>
#LUMPY</Code>
<Head1>
Example 5: Event Propagation</Head1>
<Body>
This example demonstrates how events fire and are handled in the DOM in a very simple way. When the <Code>
BODY</Code>
of this <Code>
HTML</Code>
document loads, an event listener is registered with the top row of the <Code>
TABLE</Code>
. The event listener handles the event by executing the function <Code>
l_func</Code>
, which changes the value in the bottom cell of the table.</Body>
<Body>
However,<Code>
l_func</Code>
also calls an event object method, <Italic>
stopPropagation</Italic>
, which keeps the event from bubbling any further up into the DOM. Note that the table itself has an <Code>
onclick</Code>
event handler that ought to display a message when the table is clicked. But the<Code>
l_func</Code>
method has stopped propagation, and so after the data in the table is updated, the event phase is effectively ended.</Body>
<Code>
&lt;html&gt;</Code>
<Code>
&lt;head&gt;</Code>
<Code>
&lt;style&gt;</Code>
<Code>
#t-daddy { border: 1px solid red }</Code>
<Code>
#t1 { background-color: pink; }</Code>
<Code>
&lt;/style&gt;</Code>
<Code>
&lt;script&gt;</Code>
<Code>
function l_func(e) {</Code>
<Code>
t2 = document.getElementById(&quot;t2&quot;);</Code>
<Code>
t2.innerHTML = &quot;three&quot;;</Code>
<Code>
e.stopPropagation(); </Code>
<Code>
// this ought to keep t-daddy from getting the click. </Code>
<Code>
}</Code>
<Code>
</Code>
<Code>
function load() {</Code>
<Code>
el = document.getElementById(&quot;t&quot;);</Code>
<Code>
el.addEventListener(&quot;click&quot;, l_func, false);</Code>
<Code>
}</Code>
<Code>
&lt;/script&gt;</Code>
<Code>
&lt;/head&gt;</Code>
<Code>
&lt;body onload=&quot;load();&quot;&gt;</Code>
<Code>
&lt;table id=&quot;t-daddy&quot; onclick=&quot;alert('hi');&quot;&gt;</Code>
<Code>
&lt;tr id=&quot;t&quot;&gt;</Code>
<Code>
&lt;td id=&quot;t1&quot;&gt;one&lt;/td&gt;</Code>
<Code>
&lt;/tr&gt;</Code>
<Code>
&lt;tr&gt;&lt;td id=&quot;t2&quot;&gt;two&lt;/td&gt;&lt;/tr&gt;</Code>
<Code>
&lt;/table&gt;</Code>
<Code>
&lt;/body&gt;</Code>
<Code>
&lt;/html&gt;</Code>
<Head1>
Example 6: getComputedStyle</Head1>
<Body>
This example demonstrates how the DOM <Code>
document.defaultView.getComputedStyle()</Code>
method can be used to get the styles on an element that <Emphasis>
arenÅ‚Äôt</Emphasis>
set in-line or with JavaScript (e.g., <Code>
element.style.backgroundColor=Å‚ÄùlightblueÅ‚Äù</Code>
). These latter types of styles can be retrieved with the more direct <Code>
style = element.style</Code>
property, a list of which properties is listed in the DOM Style Reference of this book (see <Italic>
DOM CSS Properties List</Italic>
). See also the <Italic>
style</Italic>
property in the DOM Elements Reference.</Body>
<Body>
getComputedStyle() returns a <Code>
ComputedCSSStyleDeclaration</Code>
object, whose individual style properties can be referenced with this objectÅ‚Äôs <Code>
getPropertyValue()</Code>
method, as the following example document shows.</Body>
<CodeWide>
&lt;html&gt;</CodeWide>
<CodeWide>
&lt;head&gt;</CodeWide>
<CodeWide>
&lt;title&gt;getComputedStyle&lt;/title&gt;</CodeWide>
<CodeWide>
&lt;script&gt;</CodeWide>
<CodeWide>
function cStyles() {</CodeWide>
<CodeWide>
div = document.getElementById(&quot;d1&quot;);</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
t1 = document.getElementById(&quot;t1&quot;);</CodeWide>
<CodeWide>
h_style = document.defaultView.getComputedStyle(div, '').
getPropertyValue(&quot;height&quot;);</CodeWide>
<CodeWide>
t1.setAttribute(&quot;value&quot;, h_style);</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
t2 = document.getElementById(&quot;t2&quot;);</CodeWide>
<CodeWide>
w_style = document.defaultView.getComputedStyle(div, '').
getPropertyValue(&quot;width&quot;);</CodeWide>
<CodeWide>
t2.setAttribute(&quot;value&quot;, w_style);</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
t3 = document.getElementById(&quot;t3&quot;);</CodeWide>
<CodeWide>
b_style = document.defaultView.getComputedStyle(div, '').
getPropertyValue(&quot;background-color&quot;);</CodeWide>
<CodeWide>
t3.setAttribute(&quot;value&quot;, b_style);</CodeWide>
<CodeWide>
}</CodeWide>
<CodeWide>
&lt;/script&gt;</CodeWide>
<CodeWide>
&lt;style&gt;</CodeWide>
<CodeWide>
.d { margin-left: 10px; background-color: lightblue; 
height: 20px; max-width: 20px; }</CodeWide>
<CodeWide>
&lt;/style&gt;</CodeWide>
<CodeWide>
&lt;/head&gt;</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
&lt;body&gt;</CodeWide>
<CodeWide>
&lt;div id=&quot;d1&quot; class=&quot;d&quot;&gt;&amp;nbsp;&lt;/div&gt;</CodeWide>
<CodeWide>
&lt;p&gt;&amp;nbsp;</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
&lt;blockquote&gt;</CodeWide>
<CodeWide>
&lt;button onclick=&quot;cStyles();&quot;&gt;getComputedStyle&lt;/button&gt;</CodeWide>
<CodeWide>
height&lt;input id=&quot;t1&quot; type=&quot;text&quot; value=&quot;1&quot;  /&gt;</CodeWide>
<CodeWide>
max-width&lt;input id=&quot;t2&quot; type=&quot;text&quot; value=&quot;2&quot;  /&gt;
bg-color&lt;input id=&quot;t3&quot; type=&quot;text&quot; value=&quot;3&quot;  /&gt;&lt;/pre&gt;</CodeWide>
<CodeWide>
&lt;/blockquote&gt;</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
&lt;/body&gt;</CodeWide>
<CodeWide>
&lt;/html&gt;</CodeWide>
<Head1>
Example 7: Displaying Event Object Constants</Head1>
<Body>
This example shows how to use the DOM to create a table in which all of the constants in the <Code>
event</Code>
object and their values are displayed. It shows off several useful aspects of the DOM, including the <Code>
Event.prototype</Code>
property, which allows you to get to the properties of a particular object, a good pattern for iterating over the properties in that prototype, and the values of the constants themselves displayed in the table. Note that the middle range of these constants are the character codes that represent the actual keys pressed during the event (and fetchable with the <Italic>
charCode</Italic>
property).</Body>
<Body>
Load the following code as a web page to see the <Code>
event</Code>
object constants.</Body>
<Body>
</Body>
<CodeWide>
&lt;?xml version=&quot;1.0&quot; ?&gt;</CodeWide>
<CodeWide>
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;DTD/xhtml1-transitional.dtd&quot;&gt;</CodeWide>
<CodeWide>
&lt;!--</CodeWide>
<CodeWide>
* ***** BEGIN LICENSE BLOCK *****</CodeWide>
<CodeWide>
* Version: NPL 1.1/GPL 2.0/LGPL 2.1</CodeWide>
<CodeWide>
*</CodeWide>
<CodeWide>
* The contents of this file are subject to the Netscape Public License</CodeWide>
<CodeWide>
* Version 1.1 (the &quot;License&quot;); you may not use this file except in</CodeWide>
<CodeWide>
* compliance with the License. You may obtain a copy of the License at</CodeWide>
<CodeWide>
* http://www.mozilla.org/NPL/</CodeWide>
<CodeWide>
*</CodeWide>
<CodeWide>
* Software distributed under the License is distributed on an &quot;AS IS&quot; basis,</CodeWide>
<CodeWide>
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License</CodeWide>
<CodeWide>
* for the specific language governing rights and limitations under the</CodeWide>
<CodeWide>
* License.</CodeWide>
<CodeWide>
*</CodeWide>
<CodeWide>
* Contributor(s):</CodeWide>
<CodeWide>
*   Alexander J. Vincent &lt;jscript@pacbell.net&gt;</CodeWide>
<CodeWide>
*</CodeWide>
<CodeWide>
* Alternatively, the contents of this file may be used under the terms of</CodeWide>
<CodeWide>
* either the GNU General Public License Version 2 or later (the &quot;GPL&quot;), or </CodeWide>
<CodeWide>
* the GNU Lesser General Public License Version 2.1 or later (the &quot;LGPL&quot;),</CodeWide>
<CodeWide>
* in which case the provisions of the GPL or the LGPL are applicable instead</CodeWide>
<CodeWide>
* of those above. If you wish to allow use of your version of this file only</CodeWide>
<CodeWide>
* under the terms of either the GPL or the LGPL, and not to allow others to</CodeWide>
<CodeWide>
* use your version of this file under the terms of the NPL, indicate your</CodeWide>
<CodeWide>
* decision by deleting the provisions above and replace them with the notice</CodeWide>
<CodeWide>
* and other provisions required by the GPL or the LGPL. If you do not delete</CodeWide>
<CodeWide>
* the provisions above, a recipient may use your version of this file under</CodeWide>
<CodeWide>
* the terms of any one of the NPL, the GPL or the LGPL.</CodeWide>
<CodeWide>
*</CodeWide>
<CodeWide>
* ***** END LICENSE BLOCK ***** * --&gt;</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;</CodeWide>
<CodeWide>
&lt;head&gt;&lt;title&gt;&lt;/title&gt;</CodeWide>
<CodeWide>
&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt;</CodeWide>
<CodeWide>
&lt;!--</CodeWide>
<CodeWide>
function respond() {</CodeWide>
<CodeWide>
// creating a table </CodeWide>
<CodeWide>
var table = document.createElement(&quot;table&quot;)</CodeWide>
<CodeWide>
table.setAttribute(&quot;border&quot;, &quot;1&quot;)</CodeWide>
<CodeWide>
var tbody = document.createElement(&quot;tbody&quot;)</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
var y = 0</CodeWide>
<CodeWide>
var tr = document.createElement(&quot;tr&quot;)</CodeWide>
<CodeWide>
var td = document.createElement(&quot;th&quot;)</CodeWide>
<CodeWide>
// reusing the same variable name in the loop</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
// begin table heading information</CodeWide>
<CodeWide>
td.appendChild(document.createTextNode(&quot;Index&quot;))</CodeWide>
<CodeWide>
tr.appendChild(td)</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
td = document.createElement(&quot;th&quot;)</CodeWide>
<CodeWide>
td.appendChild(document.createTextNode(&quot;Property Name&quot;))</CodeWide>
<CodeWide>
tr.appendChild(td)</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
td = document.createElement(&quot;th&quot;)</CodeWide>
<CodeWide>
td.appendChild(document.createTextNode(&quot;Property Value&quot;))</CodeWide>
<CodeWide>
tr.appendChild(td)</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
tbody.appendChild(tr)</CodeWide>
<CodeWide>
// end table heading information</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
for (property in Event.prototype) {</CodeWide>
<CodeWide>
if (property == property.toUpperCase()) {</CodeWide>
<CodeWide>
// adding a new row for each property of the event object</CodeWide>
<CodeWide>
tr = document.createElement(&quot;tr&quot;)</CodeWide>
<CodeWide>
td = document.createElement(&quot;td&quot;)</CodeWide>
<CodeWide>
td.appendChild(document.createTextNode(y))</CodeWide>
<CodeWide>
// which property number it happens to be</CodeWide>
<CodeWide>
tr.appendChild(td)</CodeWide>
<CodeWide>
y++</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
td = document.createElement(&quot;td&quot;)</CodeWide>
<CodeWide>
var td_text = document.createTextNode(property)</CodeWide>
<CodeWide>
// the property name</CodeWide>
<CodeWide>
td.appendChild(td_text)</CodeWide>
<CodeWide>
tr.appendChild(td)</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
td = document.createElement(&quot;td&quot;)</CodeWide>
<CodeWide>
var td_text = document.createTextNode(Event.prototype[property])</CodeWide>
<CodeWide>
// the property value</CodeWide>
<CodeWide>
td.appendChild(td_text)</CodeWide>
<CodeWide>
tr.appendChild(td)</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
tbody.appendChild(tr)</CodeWide>
<CodeWide>
}</CodeWide>
<CodeWide>
}</CodeWide>
<CodeWide>
table.appendChild(tbody)</CodeWide>
<CodeWide>
document.body.appendChild(table)</CodeWide>
<CodeWide>
}</CodeWide>
<CodeWide>
//--&gt;</CodeWide>
<CodeWide>
&lt;/script&gt;</CodeWide>
<CodeWide>
&lt;/head&gt;</CodeWide>
<CodeWide>
</CodeWide>
<CodeWide>
&lt;body onload=&quot;respond()&quot;&gt;</CodeWide>
<CodeWide>
&lt;!-Results after clicking on the button:</CodeWide>
<CodeWide>
The this object is myInput.</CodeWide>
<CodeWide>
Index    Property Name Property Value</CodeWide>
<CodeWide>
0        type          click</CodeWide>
<CodeWide>
1        target        [object HTMLInputElement]</CodeWide>
<CodeWide>
...</CodeWide>
<CodeWide>
--&gt;</CodeWide>
<CodeWide>
&lt;/body&gt;</CodeWide>
<CodeWide>
&lt;/html&gt;</CodeWide>
</chapter>
