<chapter>
<title>DOM window Reference</title>
<Body>
This chapter provides a brief reference for all of the methods, properties, and events available through the DOM <Code>
window</Code>
object. </Body>
<Body>
The <Code>
window</Code>
object represents the window itself. Typically, <Code>
window</Code>
contains the <Code>
document</Code>
as a child (see <Bold>
DOM Document Reference</Bold>
), provides access to the <Bold>
window.navigator</Bold>
and <Bold>
window.screen</Bold>
objects for manipulating the browsing environment itself, and provides a number of special properties for accessing the object model below it. </Body>
<Heading1>
DOM window Interface</Heading1>
<Body>
The properties, methods, and event handlers of the <Code>
window</Code>
object are given here.</Body>
<Head2>
Properties</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window._content</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the content element in the current window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.closed</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
This property indicates whether the current window is closed or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.Components</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an array of the 
components installed in the browser.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.controllers</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the XUL controller objects for the current chrome window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.crypto</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the browser <Code>
crypto</Code>
object</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.defaultStatus</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the status bar text for the given window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.directories</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the directories toolbar in the current chrome.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.document</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the document that the window contains.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.frames</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns an array of the subframes in the current window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.history</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the <Code>
history</Code>
object.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.innerHeight</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the height of the content area of the browser window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.innerWidth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the height of the content area of the browser window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.length</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the number of frames in the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.location</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the location, or current URL, of the window object.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.locationbar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the <Code>
locationbar </Code>
object, whose visibility can be toggled in the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.menubar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the <Code>
menubar</Code>
object, whose visibility can be toggled in the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.name</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Gets/sets the name of the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a reference to the <Code>
navigator</Code>
object.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.appCodeName</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the internal Å‚ÄúcodeÅ‚Äù name of the current browser.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.appName</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the official name of the browser.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.appVersion</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the version of the browser as a string.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.cookieEnabled</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a boolean indicating whether cookies are enabled in the browser or not.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.language</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a string representing the language version of the browser.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.mimeTypes</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns a list of the MIME types supported by the browser.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.oscpu</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a string that represents the current operating system.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.platform</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a string representing the platform of the browser.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.plugins</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns an array of the plugins installed in the browser.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.product</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the product name of the browser (e.g., Å‚ÄúGeckoÅ‚Äù)</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.productSub</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the product version number (e.g., Å‚Äú5.0Å‚Äù)</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.userAgent</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the user agent string for the current browser.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.vendor</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the vendor name of the current browser (e.g., Å‚ÄúNetscape6Å‚Äù)</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.navigator.vendorSub</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the vendor version number (e.g., Å‚Äú6.1Å‚Äù)</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.opener</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the window that opened this current window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.outerHeight</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets/sets the height of the outside of the browser window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.outerWidth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets/sets the width of the outside of the browser window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.pageXOffset</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets the amount of content that has been hidden by scrolling to the right</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.pageYOffset</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets the amount of content that has been hidden by scrolling down.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.parent</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the parent of the current window or subframe.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.personalbar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the personalbar object, whose visibility can be toggled in the window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.pkcs11</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the <Code>
pkcs11</Code>
object , which can be used to install drivers other software associated with the pkcs11 protocol.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.prompter</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the prompt window, if any, currently displayed.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the screen object associated with the window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.availHeight</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.availLeft</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the first available pixel available from the left side of the screen. </Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.availTop</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.availWidth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the amount of horizontal space in pixels available to the window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.colorDepth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the color depth of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.height</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the height of the screen in pixels.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.left</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets/sets the current distance in pixels from the left side of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.pixelDepth</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Getst the bit depth of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.top</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets/sets the distance from the top of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screen.width</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the width of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screenX</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the horizontal distance of the left border of the user's browser from the left side of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.screenY</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the vertical distance of the top border of the user's browser from the top side of the screen.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollbars</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the scrollbars object, whose visibility can be toggled in the window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollX</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the number of pixels that the document has already been scrolled horizontally.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollY</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the number of pixels that the document has already been scrolled vertically.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.self</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns an object reference to the window object itself.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.sidebar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the window object of the sidebar.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.status</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Gets/sets the text in the statusbar at the bottom of the browser.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.statusbar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the statusbar object, whose visibility can be toggled in the window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.toolbar</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns the toolbar object, whose visibility can be toggled in the window.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.top</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the topmost window in the window hierarchy.</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.window</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
Returns a reference to the current window.</Body>
</CELL>
</ROW>
</TABLE>
<Head2>
Methods</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.alert()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Displays an alert dialog.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.back()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Moves back one in the window history.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.blur()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Sets focus away from the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.captureEvents()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Registers the window to capture all events of the specified type.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.clearInterval()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Clears a delay thatÅ‚Äôs been set for a specific function.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.clearTimeout()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Clears the delay set by <Bold>
window.setTimeout()</Bold>
.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.close()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Closes the current window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.confirm()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Displays a dialog with a message that the user needs to respond to.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.dump()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Writes a message to the console.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.escape()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Encodes a string.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.focus()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Sets focus on the current window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.forward()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Moves the window one document forward in the history.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.GetAttention()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Flashes the application icon.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.getSelection()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the selection object representing the selected item(s).</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.home()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the browser to the home page.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.moveBy()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Moves the current window by a specified amount.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.moveTo()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Moves the window to the specified coordinates.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.open()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Opens a new window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.print()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Prints the current document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.prompt()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Returns the text entered by the user in a prompt dialog.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.releaseEvents()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Releases the window from trapping events of a specific type.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.resizeBy()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Resizes the current window by a certain amount.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.resizeTo()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Dynamically resizes window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scroll()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Scrolls the window to a particular place in the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollBy()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Scrolls the document in the window by the given amount.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollByLines()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Scrolls the document by the given number of lines.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollByPages()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Scrolls the current document by the specified number of pages.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.scrollTo()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Scrolls to a particular set of coordinates in the document.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.setCursor()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Changes the cursor.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.setInterval()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Set a delay for a specific function.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.setTimeout()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Sets a delay for executing a function.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.sizeToContent()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Sizes the window according to its content.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.stop()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
This method stops window loading.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.unescape()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Unencodes a value that has been encoded in hexadecimal (e.g., a cookie).</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.updateCommands()</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
</TABLE>
<Head2>
Event Handlers</Head2>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onabort</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for abort events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onblur</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for blur events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onchange</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for change events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onclick</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for click events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onclose</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for handling the window close event.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.ondragdrop</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for drag and drop events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onerror</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for errors raised on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onfocus</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for focus events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onkeydown</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for keydown events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onkeypress</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for keypress events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onkeyup</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for keyup events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onload</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for window loading.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onmousedown</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for mousedown events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onmousemove</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for mousemove events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onmouseout</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for mouseout events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onmouseover</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for mouseover events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onmouseup</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for mouseup events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onpaint</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for paint events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onreset</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for reset events on the window.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onresize</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for window resizing</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onscroll</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for window scrolling.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onselect</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for window selection.</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onsubmit</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for submits on window forms</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<Bold>
window.onunload</Bold>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
An event handler property for unload events on the window.</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
</Body>
<Head1>
window.
alert()</Head1>
<Body>
Display an alert dialog with the specified text.</Body>
<Head3>
Syntax</Head3>
<Code>
window.alert(text)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
text</Code>
is a string of the text you want displayed in the alert dialog.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.alert(Å‚ÄúIÅ‚Äôm a Scorpio!Å‚Äù);</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
<DIV>
<IMAGE xml:link="simple" href="alert.gif" show="embed" actuate="auto"/>
</DIV>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The alert dialog should be used for messages which do not require any response of the part of the user. See also <Bold>
window.confirm()</Bold>
, <Bold>
window.prompt()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
_content</Head1>
<Body>
Returns a reference to the content element in the current window.</Body>
<Head3>
Syntax</Head3>
<Code>
cHolder = window._content</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
cHolder</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// for HTML &lt;iframe</CellCode>
<CellCode>
//    type=Å‚Äùcontent-primaryÅ‚Äù </CellCode>
<CellCode>
//    src=Å‚Äùblur.htmlÅ‚Äù /&gt;</CellCode>
<CellCode>
function cont() {</CellCode>
<CellCode>
loc = window._content.location.href;</CellCode>
<CellCode>
alert(loc);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If there is no particular element or subframe given as the content element, this method returns a reference to the window itself. Also note that this does not give you a very good way to refer to a number of different content elements. In this case, you may want to use the <Code>
getElementById</Code>
method to get references to the subframes you want.</Body>
<Body>
This property is effectively the same as window.content. ItÅ‚Äôs generally used to get the content from a browser window.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
back()</Head1>
<Body>
Returns the window to the previous item in the history.</Body>
<Head3>
Syntax</Head3>
<Code>
window.back()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goBack() {</CellCode>
<CellCode>
if ( canGoBack )</CellCode>
<CellCode>
window.back();</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
blur()</Head1>
<Body>
Shifts focus away from the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.blur()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.blur();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The window.blur() method is the programmatic equivalent of the user shifting focus away from the current window.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
captureEvents()</Head1>
<Body>
Registers the window to capture all events of the specified type.</Body>
<Head3>
Syntax</Head3>
<Code>
window.captureEvents(Event.eventType)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
eventType</Code>
is a string with one of the following values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Abort</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Load</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Blur</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseDown</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Click</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseMove</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Change</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseOut</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
DblClick</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseOver</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
DragDrop</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseUp</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Error</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Move</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Focus</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Reset</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
KeyDown</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Resize</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
KeyPress</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Select</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
KeyUp</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Submit</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Unload</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function reg() {</CellCode>
<CellCode>
window.captureEvents(Event.CLICK);</CellCode>
<CellCode>
window.onclick = hit;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
function hit() {</CellCode>
<CellCode>
alert('hit');</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;body onload=&quot;reg();&quot;&gt;</CellCode>
<CellCode>
&lt;button&gt;test&lt;/button&gt;</CellCode>
<CellCode>
&lt;div id=&quot;d&quot;&gt;&amp;nbsp;&lt;/div&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Events raised in the DOM by user activity (such as clicking buttons or shifting focus away from the current document) generally pass through the high-level <Code>
window</Code>
and <Code>
document</Code>
objects first before arriving at the object that initiated the event. </Body>
<Body>
When you call the captureEvents() method on the <Code>
window</Code>
, events of the type you specify (for example, <Code>
Event.CLICK</Code>
) no longer pass through to Å‚ÄúlowerÅ‚Äù objects in the hierarchy. In order for events to Å‚Äúbubble upÅ‚Äù in the way that they normally do, you must call releaseEvents() on the window to keep it from trapping events.</Body>
<Body>
Also note that the eventType parameter is case-insensitive, so you can also say, for example, <Code>
window.releaseEvents(Event.KeyPress)</Code>
.</Body>
<Body>
See also <Bold>
window.releaseEvents()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
clearInterval()</Head1>
<Body>
Clears a delay thatÅ‚Äôs been set for a specific function.</Body>
<Head3>
Syntax</Head3>
<Code>
window.clearInterval(intervalID)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
intervalID</Code>
is the ID of the specific interval you want to clear.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.clearInterval(animID);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.setInterval()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
clearTimeout()</Head1>
<Body>
Clears the delay set by <Bold>
window.setTimeout()</Bold>
.</Body>
<Head3>
Syntax</Head3>
<Code>
window.clearTimeout(timeoutID)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
timeoutID</Code>
is the ID of the timeout you wish you clear.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.clearTimeout(inactive_ID);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The ID for the timeout is returned by the <Bold>
window.setTimeout()</Bold>
function.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
close()</Head1>
<Body>
Closes this window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.close()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.close();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
closed</Head1>
<Body>
This property indicates whether the current window is closed or not.</Body>
<Head3>
Syntax</Head3>
<Code>
bRes = window.closed</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bRes</Code>
is a boolean value.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( window.opener.closed ) {</CellCode>
<CellCode>
// the window that opened me has been closed!</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Addtional notes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
Components</Head1>
<Body>
Returns a reference to the XPCOM components that are installed in Mozilla/Netscape.</Body>
<Head3>
Syntax</Head3>
<Code>
componentList = window.Components</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
componentList</Code>
is a read-only array of XPCOM components accessible via XPConnect.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// use the Components property to get a particular class</CellCode>
<CellCode>
// and a related interface</CellCode>
<CellCode>
var cp = Components.classes['@mozilla.org/preferences;1']</CellCode>
<CellCode>
var icp = Components.interfaces.nsIPref;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
Components</Code>
property does not work from HTML and XML pages loaded as content in the browser (i.e., it returns Å‚Äú<Code>
[object nsXPCComponents]Å‚Äù</Code>
, which canÅ‚Äôt be further interrogated), since those pages are not typically considered part of the trusted application chrome and content that can use XPConnect. From trusted scripts, however, <Code>
Components</Code>
can be used to get and use the XPCOM objects which the browser itself uses for its internal functionality, as in the example above.</Body>
<Body>
See the following document for more information about the <Code>
Components</Code>
object:</Body>
<ListBulletList>
<ListBullet>
http://www.mozilla.org/scriptable/components_object.html</ListBullet>
</ListBulletList>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
confirm()</Head1>
<Body>
Displays a dialog with a message that the user needs to respond to.</Body>
<Head3>
Syntax</Head3>
<Code>
result = window.confirm(text)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
text</Code>
is a string.</Indent>
<Indent>
<Code>
result</Code>
is a boolean value indicating whether OK or Cancel was selected.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( window.confirm(Å‚ÄúWant to see my mood ring?Å‚Äù)) {</CellCode>
<CellCode>
window.open(Å‚Äúmood.htmlÅ‚Äù, Å‚Äúmood ringÅ‚Äù, Å‚ÄúÅ‚Äú);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
<DIV>
<IMAGE xml:link="simple" href="confirm.gif" show="embed" actuate="auto"/>
</DIV>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Unlike the alert dialog, a confirm dialog has OK and Cancel buttons, and returns true only when the user confirms the choice being presented by clicking OK. The return value of window.confirm() is often tested as part of a conditional block, as in the example above. See also <Bold>
window.alert()</Bold>
, <Bold>
window.prompt()</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
controllers</Head1>
<Body>
Returns the XUL controllers of the chrome window.</Body>
<Head3>
Syntax</Head3>
<Code>
controllers = window.controllers</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
controllers</Code>
is an array of objects of the type <Code>
XUL Controllers</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function con() {</CellCode>
<CellCode>
alert(window.controllers);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
// displays: [object XULControllers]</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
crypto</Head1>
<Body>
Returns the browser <Code>
crypto</Code>
object, which can then be used to manipulate various browser security features.</Body>
<Head3>
Syntax</Head3>
<Code>
syntax code</Code>
<Head3>
Parameters</Head3>
<Indent>
blah is a blah.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example code here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Addtional notes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
defaultStatus</Head1>
<Body>
Gets/sets the status bar text for the given window.</Body>
<Head3>
Syntax</Head3>
<Code>
sMsg = window.defaultStatus</Code>
<Code>
window.defaultStatus = sMsg</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sMsg</Code>
is a string containing the text to be displayed by default in the statusbar.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;body onload=&quot;window.defaultStatus='hello!';&quot;/&gt;</CellCode>
<CellCode>
&lt;button onclick=&quot;window.confirm('Are you sure you want to quit?');&quot;&gt;confirm&lt;/button&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/htm&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
To set the status once the window has been opened, use <Bold>
window.status</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
directories</Head1>
<Body>
Returns the <Code>
window</Code>
directories toolbar object.</Body>
<Head3>
Syntax</Head3>
<Code>
dirBar = window.directories</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
dirBar</Code>
is an object of the type <Code>
barProp</Code>
.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function dirs() {</CellCode>
<CellCode>
alert(window.directories);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
document</Head1>
<Body>
Returns a reference to the document that the window contains.</Body>
<Head3>
Syntax</Head3>
<Code>
doc = window.document</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
doc</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
doc= window.document;</CellCode>
<CellCode>
window.dump(doc.title);</CellCode>
<CellCode>
// prints the current documentÅ‚Äôs title to the console.</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
dump()</Head1>
<Body>
Prints messages to the console.</Body>
<Head3>
Syntax</Head3>
<Code>
window.dump(text)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
text</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
doc= window.document;</CellCode>
<CellCode>
window.dump(doc.title);</CellCode>
<CellCode>
// prints the current documentÅ‚Äôs title to the console.</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If you have no console available, this method prints nothing but doesnÅ‚Äôt raise an error. window.dump is commonly used to print statements to the console can be used to debug JavaScript used to access the DOM.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
escape()</Head1>
<Body>
Encodes a string.</Body>
<Head3>
Syntax</Head3>
<Code>
sEscaped = window.escape(sRegular)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sEscaped</Code>
is the endoded string.</Indent>
<Indent>
<Code>
sRegular</Code>
is a regular string</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
alert(escape(Å‚Äúhttp://www.cnn.comÅ‚Äù));</CellCode>
<CellCode>
// displays: http%3Awww.cnn.com</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The escape() method converts special characters (any characters that are not regular text or numbers) into hexadecimal characters, which is especially necessary for setting the values of cookies.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
focus()</Head1>
<Body>
Sets focus on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.focus()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if (clicked) { window.focus(); }</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
forward()</Head1>
<Body>
Moves the window one document forward in the history.</Body>
<Head3>
Syntax</Head3>
<Code>
window.forward()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goForward() {</CellCode>
<CellCode>
if ( canGoForward)</CellCode>
<CellCode>
window.forward();</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.frames</Head1>
<Body>
Returns an array of the subframes in the current window.</Body>
<Head3>
Syntax</Head3>
<Code>
frameList = window.frames</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
frameList</Code>
is an array of <Code>
frame</Code>
objects.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
frames = window.frames;</CellCode>
<CellCode>
for (var i = 0; i &lt; frames.length; i++) {</CellCode>
<CellCode>
// do something with each subframe as frames[i]</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellHeading>
window.
GetAttention()</CellHeading>
</CELL>
</ROW>
</TABLE>
<Body>
Flashes the application icon to get the userÅ‚Äôs attention.</Body>
<Head3>
Syntax</Head3>
<Code>
window.GetAttention()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// from Chatzilla</CellCode>
<CellCode>
function notifyAttention (source)</CellCode>
<CellCode>
{</CellCode>
<CellCode>
if (typeof source != &quot;object&quot;)</CellCode>
<CellCode>
source = client.viewsArray[source].source;</CellCode>
<CellCode>
</CellCode>
<CellCode>
if (client.currentObject != source)</CellCode>
<CellCode>
{</CellCode>
<CellCode>
var tb = getTabForObject (source, true);</CellCode>
<CellCode>
var vk = Number(tb.getAttribute(&quot;viewKey&quot;));</CellCode>
<CellCode>
</CellCode>
<CellCode>
tb.setAttribute (&quot;state&quot;, &quot;attention&quot;);</CellCode>
<CellCode>
client.activityList[vk] = &quot;!&quot;;</CellCode>
<CellCode>
updateTitle();</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
if (client.FLASH_WINDOW)</CellCode>
<CellCode>
window.GetAttention();</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
On windows and linux, the icon flashes in the system tray. On macintosh, the icon in the upper right corner of the desktop flashes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellHeading>
window.
getSelection()</CellHeading>
</CELL>
</ROW>
</TABLE>
<Body>
Returns a <Code>
selection</Code>
object representing the selected item(s).</Body>
<Head3>
Syntax</Head3>
<Code>
selection = window.getSelection()</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
selection</Code>
is a <Code>
selection</Code>
object.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function cutThis() {</CellCode>
<CellCode>
selObj = window.getSelection();</CellCode>
<CellCode>
selText = selObj.toSting();</CellCode>
<CellCode>
if len(selText) ...</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
selection</Code>
object returned by this method is automatically converted to a string as needed. If you asked for the <Code>
len</Code>
of <Code>
selObj</Code>
in the listing above, for example, the method would return the length of the object converted into a string (using the selection objectÅ‚Äôs own <Code>
toString()</Code>
method. But you can also get the ranges in the selection and you can navigate through the selected nodes using these range objects.</Body>
<Body>
See the <Code>
nsISelection</Code>
interface in mozilla for more information about selection objects and the services they provide for manipulating selections:</Body>
<Body>
http://lxr.mozilla.org/seamonkey/source/content/base/public/nsISelection.idl</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
history</Head1>
<Body>
Returns a reference to the <Code>
history</Code>
object, which provides an interface for manipulating the browser history.</Body>
<Head3>
Syntax</Head3>
<Code>
historyObj = window.history</Code>
<Head3>
Parameters</Head3>
<Indent>
historyObject is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
h = window.history;</CellCode>
<CellCode>
if ( h.length ) { // if there is a history</CellCode>
<CellCode>
h.back();     // equivalent to clicking back button</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
history</Code>
object provides the following interface:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
current</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
back()</Code>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
length</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
forward()</Code>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
next</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
go()</Code>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
previous</Code>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
</Code>
</CELL>
</ROW>
</TABLE>
<Body>
You can call access this interface from the <Code>
window</Code>
object by calling, for example, <Code>
window.history.back()</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
home()</Head1>
<Body>
Returns the window to the home page.</Body>
<Head3>
Syntax</Head3>
<Code>
window.home()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function goHome() {</CellCode>
<CellCode>
window.home();</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
innerHeight</Head1>
<Body>
Gets/sets the height of the content area of the browser window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.innerHeight = iPx</Code>
<Code>
iPx = window.innerHeight</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iPx</Code>
is the number of pixels as an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.innerHeight = 400;</CellCode>
<CellCode>
window.innerWidth = 400;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.innerWidth</Bold>
, <Bold>
window.outerHeight</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
innerWidth</Head1>
<Body>
Gets/sets the height of the content area of the browser window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.innerWidth = iPx</Code>
<Code>
iPx = window.innerWidth</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iPx</Code>
is the number of pixels as an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.innerHeight = 400;</CellCode>
<CellCode>
window.innerWidth = 400;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.innerHeight</Bold>
, <Bold>
window.outerHeight</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
length</Head1>
<Body>
Returns the number of frames in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
ifrms = window.length</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
ifrms</Code>
is the number of frames as an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( window.length )</CellCode>
<CellCode>
// this is a document with subframes</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
location</Head1>
<Body>
Gets/sets the location, or current URL, of the window object.</Body>
<Head3>
Syntax</Head3>
<Code>
url = window.location</Code>
<Code>
window.location = url</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
url</Code>
is a string containing the URL for the specified location.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function getNews() {</CellCode>
<CellCode>
window.location= Å‚Äúhttp://www.cnn.comÅ‚Äù;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
// in html: &lt;button onclick=Å‚ÄùgetNews();Å‚Äù&gt;News&lt;/button&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
locationbar</Head1>
<Body>
Returns the <Code>
locationbar </Code>
object, whose visibility can be toggled in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
lBarObj = window.locationbar</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
lBarObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<Body>
The following complete HTML example shows way that the visible property of the various Å‚ÄúbarÅ‚Äù objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;Various DOM Tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
// changing bar states on the existing window</CellCode>
<CellCode>
netscape.security.PrivilegeManager.</CellCode>
<CellCode>
enablePrivilege(&quot;UniversalBrowserWrite&quot;);</CellCode>
<CellCode>
window.locationbar.visible=</CellCode>
<CellCode>
!window.locationbar.visible;</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;p&gt;Various DOM Tests&lt;/p&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When you load the example page above, the browser displays the following dialog:</Body>
<DIV>
<IMAGE xml:link="simple" href="dom_book-6.gif" show="embed" actuate="auto"/>
</DIV>
<Body>
To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page.</Body>
<Body>
See also: <Bold>
window.locationbar</Bold>
, <Bold>
window.menubar</Bold>
, <Bold>
window.personalbar</Bold>
, <Bold>
window.scrollbars</Bold>
, <Bold>
window.statusbar</Bold>
, <Bold>
window.toolbar</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
menubar</Head1>
<Body>
Returns the <Code>
menubar</Code>
object, whose visibility can be toggled in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
mBarObj = window.menubar</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
mBarObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<Body>
The following complete HTML example shows way that the visible property of the various Å‚ÄúbarÅ‚Äù objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;Various DOM Tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
// changing bar states on the existing window</CellCode>
<CellCode>
netscape.security.PrivilegeManager.</CellCode>
<CellCode>
enablePrivilege(&quot;UniversalBrowserWrite&quot;);</CellCode>
<CellCode>
window.menubar.visible=!window.menubar.visible;</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;p&gt;Various DOM Tests&lt;/p&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When you load the example page above, the browser displays the following dialog:</Body>
<DIV>
<IMAGE xml:link="simple" href="dom_book-7.gif" show="embed" actuate="auto"/>
</DIV>
<Body>
To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page.</Body>
<Body>
See also: <Bold>
window.locationbar</Bold>
, <Bold>
window.menubar</Bold>
, <Bold>
window.personalbar</Bold>
, <Bold>
window.scrollbars</Bold>
, <Bold>
window.statusbar</Bold>
, <Bold>
window.toolbar</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
moveBy()</Head1>
<Body>
Moves the current window by a specified amount.</Body>
<Head3>
Syntax</Head3>
<Code>
window.moveBy(deltaX, deltaY)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
deltaX</Code>
is the amount of pixels to move the window horizontally.</Indent>
<Indent>
<Code>
deltaY</Code>
is the amount of pixels to move the window vertically.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function budge() {</CellCode>
<CellCode>
moveBy(10, -10);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
You can use negative numbers as parameters for this function. This function makes a relative move while <Bold>
window.moveTo()</Bold>
makes an absolute move.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
moveTo()</Head1>
<Body>
Moves the window to the specified coordinates.</Body>
<Head3>
Syntax</Head3>
<Code>
window.moveTo(x, y)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
x</Code>
is the horizontal coordinate to be moved to.</Indent>
<Indent>
<Code>
y </Code>
is the vertical coordinate to be moved to.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function origin() {</CellCode>
<CellCode>
// moves to top left corner of screen</CellCode>
<CellCode>
window.moveTo(0, 0) </CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This function moves the window absolutely while <Bold>
window.moveBy()</Bold>
moves the window relative to its current location.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
name</Head1>
<Body>
Gets/sets the name of the window.</Body>
<Head3>
Syntax</Head3>
<Code>
sName = window.name</Code>
<Code>
window.name = sName</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
name</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.name = Å‚Äúlab_viewÅ‚Äù;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The name of the window is used primarily for setting targets for hyperlinks and forms. Windows do not need to have names.</Body>
<Body>
See also <Bold>
window.name</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator</Head1>
<Body>
Returns a reference to the <Code>
navigator</Code>
object.</Body>
<Head3>
Syntax</Head3>
<Code>
nav = window.navigator</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
nav</Code>
is a <Code>
navigator</Code>
object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
nav = window.navigator;</CellCode>
<CellCode>
if ( nav.language != en ) {</CellCode>
<CellCode>
res = window.confirm(lang_warn);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
navigator</Code>
object is used to examine the actual browser being used. It includes properties like <Code>
appName</Code>
, <Code>
appCore</Code>
, <Code>
plugins</Code>
(described below) for getting information about the browser itself.</Body>
<Body>
All of the properties and methods available from <Code>
window.navigator</Code>
can also be referenced simple with <Code>
navigator</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
appCodeName</Head1>
<Body>
Returns the internal Å‚ÄúcodeÅ‚Äù name of the current browser.</Body>
<Head3>
Syntax</Head3>
<Code>
codeName = window.navigator.appCodeName</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
codeName</Code>
is the internal name of the browser as a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
dump(window.navigator.appCodeName);</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Mozilla, Netscape 6, and IE5 all use the internal name Å‚ÄúMozilla.Å‚Äù</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
appName</Head1>
<Body>
Returns the official name of the browser.</Body>
<Head3>
Syntax</Head3>
<Code>
appName = window.navigator.appName</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
appName</Code>
is the name of the browser as a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
dump(window.navigator.appName);</CellCode>
<CellCode>
// prints Å‚ÄúNavigatorÅ‚Äù to the console for NS6</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
appVersion</Head1>
<Body>
Returns the version of the browser as a string.</Body>
<Head3>
Syntax</Head3>
<Code>
ver = window.navigator.appVersion</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
ver</Code>
is the version number of the browser as a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( navigator.appVersion.charAt(0) == Å‚Äú5Å‚Äù ) {</CellCode>
<CellCode>
// browser is putatively a v5 browser</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Bold>
window.navigator.userAgent</Bold>
property also contains the version number (example: Å‚ÄúMozilla/5.0 (Windows; U; Win98; en-US; rv:0.9.2) Gecko/20010725 Netscape 6/6.1Å‚Äù), but you should be aware of how easy it is to change the user agent string and Å‚ÄúspoofÅ‚Äù other browsers, platforms, or user agents, and also how cavalier the browser vendor themselves are with these properties.</Body>
<Body>
The window.navigator.appVersion and window.navigator.userAgent properties are quite often used in Å‚Äúbrowser sniffingÅ‚Äù code: scripts that attempt to find out what kind of browser you are using and adjust pages accordingly.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
cookieEnabled</Head1>
<Body>
Returns a boolean value indicating whether cookies are enabled or not.</Body>
<Head3>
Syntax</Head3>
<Code>
res = window.navigator.cookieEnabled</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
res</Code>
is a boolean True or False.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if (window.navigator.cookieEnabled) {</CellCode>
<CellCode>
// set a cookie</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
javaEnabled()</Head1>
<Body>
This method indicates whether the current browser is Java-enabled or not.</Body>
<Head3>
Syntax</Head3>
<Code>
bool = window.navigator.javaEnabled</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
bool</Code>
is a boolean value.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( window.navigator.javaEnabled() ) {</CellCode>
<CellCode>
// browser has java</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The return value for this method indicates whether the preference that controls Java is on or off--not whether the browser offers Java support in general. </Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
language</Head1>
<Body>
Returns a string representing the language version of the browser.</Body>
<Head3>
Syntax</Head3>
<Code>
lang = window.navigator.language</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
lang</Code>
is a two character string (e.g., Å‚ÄúenÅ‚Äù or Å‚ÄújaÅ‚Äù) representing the language version.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( window.navigator.language != Å‚ÄúenÅ‚Äù ) {</CellCode>
<CellCode>
doLangSelect(window.navigator.language);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property also shows up as part of the <Bold>
window.navigator.userAgent</Bold>
string.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
mimeTypes</Head1>
<Body>
Returns a list of the MIME types supported by the browser.</Body>
<Head3>
Syntax</Head3>
<Code>
syntax code</Code>
<Head3>
Parameters</Head3>
<Indent>
blah is a blah.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example code here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Addtional notes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
oscpu</Head1>
<Body>
Returns a string that identifies the current operating system.</Body>
<Head3>
Syntax</Head3>
<Code>
oscpuInfo = window.navigator.oscpu</Code>
<Head3>
Parameters</Head3>
<Indent>
oscpu is a string that takes the following form.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function osInfo() {</CellCode>
<CellCode>
alert(window.navigator.oscpu);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
// returns: Win98</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
platform</Head1>
<Body>
Returns a string representing the platform of the browser.</Body>
<Head3>
Syntax</Head3>
<Code>
plat = window.navigator.platform</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
plat</Code>
is a string with one of the following values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Win95</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Windows 95</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
WinNT</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Windows NT</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
MacPPC</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Macintosh PowerPC</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
SunOS</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
Solaris</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
....</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function osInfo() {</CellCode>
<CellCode>
alert(window.navigator.platform);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
// returns: win32</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
plugins</Head1>
<Body>
Returns an array of the plugins installed in the browser.</Body>
<Head3>
Syntax</Head3>
<Code>
plugins = window.navigator.plugins</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
plugins</Code>
is an array of <Code>
plugin</Code>
objects.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function pluginInfo() {</CellCode>
<CellCode>
alert(window.navigator.plugins.item(0).name);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
// returns Å‚ÄúShockwave for DirectorÅ‚Äù</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The plugin objecct exposes a small interface for getting information about the various plugins installed in your browser.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
product</Head1>
<Body>
This property returns the product name of the current browser.</Body>
<Head3>
Syntax</Head3>
<Code>
productName = window.navigator.product</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
productName</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function prod() {</CellCode>
<CellCode>
dt = document.getElementById(&quot;d&quot;).childNodes[0]; </CellCode>
<CellCode>
dt.data = window.navigator.userAgent;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;button onclick=&quot;prod();&quot;&gt;product&lt;/button&gt;</CellCode>
<CellCode>
&lt;div id=&quot;d&quot;&gt;&amp;nbsp;&lt;/div&gt;</CellCode>
<CellCode>
// returns Å‚ÄúGeckoÅ‚Äù</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
product is that portion of the full user agent string that comes directly after the platform. In the user agent for Netscape 6.1, for example, the product is Å‚ÄúGeckoÅ‚Äù and the full agent string is the following:</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Mozilla/5.0 (Windows; U; Win98; en-US; rv:0.9.2) Gecko/20010725 Netscape6/6.1</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
productSub</Head1>
<Body>
productSub returns the build number of the current browser.</Body>
<Head3>
Syntax</Head3>
<Code>
prodSub = window.navigator.productSub</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
prodSub</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function prodsub() {</CellCode>
<CellCode>
dt = document.getElementById(&quot;d&quot;).childNodes[0]; </CellCode>
<CellCode>
dt.data = window.navigator.productSub;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;button onclick=&quot;prodsub();&quot;&gt;productSub&lt;/button&gt;</CellCode>
<CellCode>
// returns: 20010725</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
On IE, this property returns <Code>
undefined</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
userAgent</Head1>
<Body>
Returns the user agent string for the current browser.</Body>
<Head3>
Syntax</Head3>
<Code>
uaString = window.navigator.userAgent</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
uaString</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.navigator.userAgent</CellCode>
<CellCode>
// returns Mozilla/5.0 (Windows; U; Win98; en-US;    rv:0.9.2) Gecko/20010725 Netscape6/6.1</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
vendor</Head1>
<Body>
Returns the name of the browser vendor for the current browser.</Body>
<Head3>
Syntax</Head3>
<Code>
venString = window.navigator.vendor</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
venString</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.navigator.vendor</CellCode>
<CellCode>
// returns Å‚ÄúNetscape6Å‚Äù</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
vendor is another portion of the userAgent string. The product and the vendor can be different--as when Netscape 6.1 uses the Gecko product to do its rendering. </Body>
<Body>
See also <Bold>
window.navigator.product</Bold>
, <Bold>
window.navigator.userAgent</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
navigator.
vendorSub</Head1>
<Body>
vendorSub is the substring of the vendor having to do with the vendor version number.</Body>
<Head3>
Syntax</Head3>
<Code>
venSub = window.navigator.vendorSub</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
venSub</Code>
is a string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.navigator.vendorSub</CellCode>
<CellCode>
// returns Å‚Äú6.1Å‚Äù where the vendor part of userAgent is</CellCode>
<CellCode>
// Netscape6/6.1</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
vendorSub is yet another component of the full user agent string. It refers to the version number that the vendor themselves have given the current browser (as opposed to the version of the product, which may be different). In Netscape 6.1, the productSub is given as Å‚Äú5.0Å‚Äù and the vendorSub is Å‚Äú6.1.Å‚Äù</Body>
<Body>
See also <Bold>
window.navigator.productSub</Bold>
, <Bold>
window.navigator.userAgent</Bold>
, <Bold>
window.navigator.vendor</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onabort</Head1>
<Body>
An event handler for abort events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onabort = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onabort = resetThatServerThing</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onblur</Head1>
<Body>
The onblur property returns the onBlur event handler code, if any, that exists on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onblur = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to the function to be executed.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
warnFunc = window.onblur;</Code>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The blur event is raised when a window loses focus.</Body>
<Head3>
Specification</Head3>
<Body>
Not part of specification.</Body>
<Body>
</Body>
<Head1>
window.
onchange</Head1>
<Body>
An event handler for change events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onchange = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onchange = resetThatServerThing</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onclick</Head1>
<Body>
An event handler for click events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onclick = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onclick = doPopup;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The click event is raised when the user clicks on the window.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onclose</Head1>
<Body>
An event handler for close events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onclose = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onclose = resetThatServerThing</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
ondragdrop</Head1>
<Body>
An event handler for drag &amp; drop events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.ondragdrop = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.ondragdrop = examineItem;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onerror</Head1>
<Body>
An event handler for error events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onerror = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onerror = null;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The error event is raised when an error occurs in the script. The example above prevents error dialogs from displaying--which is the windowÅ‚Äôs normal behavior--by overriding the default event handler for error events that go to the window.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onfocus</Head1>
<Body>
An event handler for focus events sent to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onfocus = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onfocus = startTimer;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The focus event is raised when the user sets focus on the current window.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onkeydown</Head1>
<Body>
An event handler for the keydown event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onkeydown = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onkeydown = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The keydown event is raised when the user presses any key.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onkeypress</Head1>
<Body>
An event handler for the keypress event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onkeypress = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onkeypress = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The keypress event is raised when the user presses and releases any key on the keyboard.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onkeyup</Head1>
<Body>
An event handler for the keyup event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onkeyup = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onkeyup = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The keyup event is raised when a key that has been pressed is released.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onload</Head1>
<Body>
An event handler for the load event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onload = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onload = init;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The load event is fired at the end of the document loading process. At this point, all of the objects in the document are in the DOM.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onmousedown</Head1>
<Body>
An event handler for the mousedown event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onmousedown = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onmousedown = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mousedown event is raised when the user clicks the left mouse button anywhere in the document.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onmousemove</Head1>
<Body>
An event handler for the mousemove event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onmousemove = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onmousemove = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mousemove event is raised when the user moves the mouse at all.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onmouseout</Head1>
<Body>
An event handler for the mousedown event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onmouseout = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onmouseout = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mouseout event is raised when the mouse leaves the area of the specified element (in this case the window itself).</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onmouseover</Head1>
<Body>
An event handler for the mouseover event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onmouseover = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onmouseover = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mouseover event is raised when the moves over the current element (in this case the window itself).</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onmouseup</Head1>
<Body>
An event handler for the mousedown event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onmousedown = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onmousedown = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The mousedown event is raised when the user clicks the left mouse button anywhere in the document.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onpaint</Head1>
<Body>
An event handler for the paint event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onpaint = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onpaint = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The paint event is raised when the window is rendered. This event occurs after the load event for a window, and reoccurs each time the window needs to be rerendered, as when another window obscures it and is then cleared away.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onreset</Head1>
<Body>
An event handler for the reset event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onreset = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function reg() {</CellCode>
<CellCode>
window.captureEvents(Event.RESET);</CellCode>
<CellCode>
window.onreset = hit;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
function hit() {</CellCode>
<CellCode>
alert('hit');</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;body onload=&quot;reg();&quot;&gt;</CellCode>
<CellCode>
&lt;form&gt;</CellCode>
<CellCode>
&lt;input type=&quot;reset&quot; value=&quot;reset&quot; /&gt;</CellCode>
<CellCode>
&lt;/form&gt;</CellCode>
<CellCode>
&lt;div id=&quot;d&quot;&gt;&amp;nbsp;&lt;/div&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The reset event is raised when the user clicks a reset button in a form
(<Code>
&lt;input type=Å‚ÄùresetÅ‚Äù/&gt;</Code>
).</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onresize</Head1>
<Body>
An event handler for the resize event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onresize = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onresize = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The resize event is fired when the window is resized.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onscroll</Head1>
<Body>
An event handler for the scroll event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onscroll = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onscroll = doFunc;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The scroll event is raised when the window is scrolled.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onselect</Head1>
<Body>
An event handler for the select event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onselect = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onselect = textToCell;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The select event is raised when text in the window is selected.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onsubmit</Head1>
<Body>
An event handler for the submit event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onsubmit = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
function reg() {</CellCode>
<CellCode>
window.captureEvents(Event.SUBMIT);</CellCode>
<CellCode>
window.onsubmit = hit;</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
<CellCode>
function hit() {</CellCode>
<CellCode>
alert('hit');</CellCode>
<CellCode>
}</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
</CellCode>
<CellCode>
&lt;body onload=&quot;reg();&quot;&gt;</CellCode>
<CellCode>
&lt;form&gt;</CellCode>
<CellCode>
&lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;</CellCode>
<CellCode>
&lt;/form&gt;</CellCode>
<CellCode>
&lt;div id=&quot;d&quot;&gt;&amp;nbsp;&lt;/div&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The submit event is raised when the user clicks a submit button in a form
(<Code>
&lt;input type=Å‚ÄùsubmitÅ‚Äù/&gt;</Code>
). </Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
onunload</Head1>
<Body>
An event handler for the unload event on the window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.onunload = funcRef</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
funcRef</Code>
is a reference to a function.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.onunload = saveStuff;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The unload event is raised as one document is unloaded and another is about to be loaded into the browser.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
open()</Head1>
<Body>
Opens a new window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.open(Å‚ÄúURLÅ‚Äù, Å‚ÄúnameÅ‚Äù [, Å‚ÄúwindowfeaturesÅ‚Äù])</Code>
<Head3>
Parameters</Head3>
<Indent>
URL is a string that points to the window you want to open.</Indent>
<Indent>
name is a string that names the new window.</Indent>
<Indent>
windowfeatures is one or more of the following in a comma-separated list:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
toolbar</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Toolbar is present</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
location</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Locationbar is present</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
directories</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
status</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
menubar</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
XXX have to update this whole list XXX</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
scrollbars</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
resizable</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
copyhistory</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
width</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
height</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.open(Å‚Äúbtest2.htmlÅ‚Äù, Å‚ÄúbwinÅ‚Äù, Å‚Äútoolbar,statusÅ‚Äù);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The name attribute is not a reference or the title of the window. It is used as a target to links and forms.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
opener</Head1>
<Body>
Returns a reference to the window that opened this current window.</Body>
<Head3>
Syntax</Head3>
<Code>
wObj = window.opener</Code>
<Head3>
Parameters</Head3>
<Indent>
wObj is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if window.opener != indexWin {</CellCode>
<CellCode>
referToTop(window.opener);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When a window is opened from another window, it maintains a reference to that first window as <Code>
window.opener</Code>
. If the current window has no opener, this method returns <Code>
NULL</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
outerHeight</Head1>
<Body>
Gets/sets the height of the outside of the browser window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.outerHeight = iPx</Code>
<Code>
iPx = window.outerHeight</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iPx</Code>
is an integer representing the number of pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.outerHeight = ( window.screen.availHeight );</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
As the snippet above demonstrates, the outerHeight property is very often used to size the browser to the available screen area. Contrast this with the innerHeight property, which controls the size of the content area of the browser.</Body>
<Body>
See also <Bold>
window.screen</Bold>
, <Bold>
window.innerHeight</Bold>
, <Bold>
window.outerWidth</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
outerWidth</Head1>
<Body>
Gets/sets the width of the outside of the browser window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.outerWidth = iPx</Code>
<Code>
iPx = window.outerWidth</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iPx</Code>
is an integer representing the number of pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.outerWidth = ( window.screen.availWidth );</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
As the snippet above demonstrates, the outerWidth property is very often used to size the browser to the available screen area. Contrast this with the innerWidth property, which controls the size of the content area of the browser.</Body>
<Body>
See also <Bold>
window.screen</Bold>
, <Bold>
window.innerHeight</Bold>
, <Bold>
window.outerHeight</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
pageXOffset
</Head1>
<Body>
Gets the amount of content that has been hidden by scrolling to the right.</Body>
<Head3>
Syntax</Head3>
<Code>
hScroll = window.pageXOffset</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
hScroll</Code>
is the number of pixels scrolled as an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
var hScroll = pageXOffset;</CellCode>
<CellCode>
var vScroll = pageYOffset;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the user has scrolled to the right and 200 pixels of the content is hidden by this, then the pageXOffset property returns 200.</Body>
<Body>
<Bold>
window.pageYOffset</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
pageYOffset</Head1>
<Body>
Gets the amount of content that has been hidden by scrolling down.</Body>
<Head3>
Syntax</Head3>
<Code>
vScroll = window.pageYOffset</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
vScroll</Code>
is the number of pixels as an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
var hScroll = pageXOffset;</CellCode>
<CellCode>
var vScroll = pageYOffset;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
If the user has scrolled down and 400 pixels of the content is hidden by this, then the pageYOffset property returns 400.</Body>
<Body>
See also <Bold>
window.pageXOffset</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
parent</Head1>
<Body>
Returns a reference to the parent of the current window or subframe.</Body>
<Head3>
Syntax</Head3>
<Code>
pWin = window.parent</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
pWin</Code>
is an object reference to the parent window.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if window.parent != window.top</CellCode>
<CellCode>
// weÅ‚Äôre deeper than one down</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When a window is loaded in a frameset, its parent is .</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
personalbar</Head1>
<Body>
Returns the <Code>
personalbar</Code>
object, whose visibility can be toggled in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
pBarObj = window.menubar</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
pBarObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<Body>
The following complete HTML example shows way that the visible property of the various Å‚ÄúbarÅ‚Äù objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;Various DOM Tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
// changing bar states on the existing window</CellCode>
<CellCode>
netscape.security.PrivilegeManager.</CellCode>
<CellCode>
enablePrivilege(&quot;UniversalBrowserWrite&quot;);</CellCode>
<CellCode>
window.personalbar.visible=</CellCode>
<CellCode>
!window.personalbar.visible;</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;p&gt;Various DOM Tests&lt;/p&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page.</Body>
<Body>
See also: <Bold>
window.locationbar</Bold>
, <Bold>
window.menubar</Bold>
, <Bold>
window.personalbar</Bold>
, <Bold>
window.scrollbars</Bold>
, <Bold>
window.statusbar</Bold>
, <Bold>
window.toolbar</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
pkcs11</Head1>
<Body>
Returns the <Code>
pkcs11</Code>
object , which can be used to install drivers other software associated with the pkcs11 protocol.</Body>
<Head3>
Syntax</Head3>
<Code>
pkcsObj = window.pkcs11</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
pkcsObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.pkcs11.addModule(sMod, secPath, 0, 0);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See the nsIDOMPkcs11.idl in the mozilla source for more information about how to manipulate <Code>
pkcs11</Code>
objects.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
print()</Head1>
<Body>
Prints the current document.</Body>
<Head3>
Syntax</Head3>
<Code>
window.print()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.print();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None. </Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
prompt()</Head1>
<Body>
Returns the text entered by the user in a prompt dialog.</Body>
<Head3>
Syntax</Head3>
<Code>
syntax code</Code>
<Head3>
Parameters</Head3>
<Indent>
blah is a blah.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function pr() {</CellCode>
<CellCode>
sign = prompt(Å‚ÄúWhatÅ‚Äôs your sign?Å‚Äù);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
</CellCode>
<DIV>
<IMAGE xml:link="simple" href="prompt.gif" show="embed" actuate="auto"/>
</DIV>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.alert()</Bold>
, <Bold>
window.confirm()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
prompter</Head1>
<Body>
Returns a reference to the prompt window, if any, currently displayed.</Body>
<Head3>
Syntax</Head3>
<Code>
prompt = window.prompter</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
prompt</Code>
is an object reference to the prompt window.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
prompt_window = window.prompter</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
releaseEvents()</Head1>
<Body>
Releases the window from trapping events of a specific type.</Body>
<Head3>
Syntax</Head3>
<Code>
window.releaseEvents(Event.eventType)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
eventType</Code>
is a string with one of the following values:</Indent>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Abort</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Load</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Blur</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseDown</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Click</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseMove</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Change</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseOut</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
DblClick</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseOver</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
DragDrop</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
MouseUp</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Error</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Move</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Focus</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Reset</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
KeyDown</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Resize</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
KeyPress</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Select</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
KeyUp</CellCode>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Submit</CellCode>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
Unload</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.releaseEvents(Event.KEYPRESS)</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that you can pass a list of events to this method using the following syntax: <Code>
window.releaseEvents(Event.KEYPRESS | Event.KEYDOWN | Event.KEYUP)</Code>
. Also note that the eventType parameter is case-insensitive, so you can also say, for example, <Code>
window.releaseEvents(Event.KeyPress)</Code>
.</Body>
<Body>
See also <Bold>
window.captureEvents()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
resizeBy()</Head1>
<Body>
Resizes the current window by a certain amount.</Body>
<Head3>
Syntax</Head3>
<Code>
window.resizeBy(xDelta, yDelta)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
xDelta</Code>
is the number of pixels to grow the window horizontally.</Indent>
<Indent>
<Code>
yDelta</Code>
is the number of pixels to grow the window vertically.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// shrink the window</CellCode>
<CellCode>
window.resizeBy(-200, -200);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This method resizes the window relative to its current size. To resize the window in absolute terms, use <Bold>
window.resizeTo()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
resizeTo()</Head1>
<Body>
Dynamically resizes window.</Body>
<Head3>
Syntax</Head3>
<Code>
window.resizeTo(iWidth, iHeight)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iWidth</Code>
is an integer representing the new width in pixels.</Indent>
<Indent>
<Code>
iHeight</Code>
is an integer value representing the new height in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// function resizes the window to take up half</CellCode>
<CellCode>
// of the available screen.</CellCode>
<CellCode>
function halve() {</CellCode>
<CellCode>
window.resizeTo(window.screen.availWidth/2,      window.screen.availHeight/2);</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.resizeBy()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen</Head1>
<Body>
Returns a reference to the <Code>
screen</Code>
object associated with the window.</Body>
<Head3>
Syntax</Head3>
<Code>
screenObj = window.screen</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
screenObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
s = window.screen;</CellCode>
<CellCode>
if ( s.colorDepth &lt; 8) {</CellCode>
<CellCode>
// use low-color version of page</CellCode>
<CellCode>
} else { </CellCode>
<CellCode>
// use regular, colorful page</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The <Code>
screen</Code>
object is a special JavaScript object for controlling aspects of the screen on which the current window is being rendered. <Code>
screen</Code>
object properties such as <Code>
colorDepth</Code>
, <Code>
height</Code>
, and <Code>
availHeight</Code>
can be accessed from the <Code>
window</Code>
object by using properties like <Code>
window.screen.colorDepth</Code>
and others described below.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
availHeight</Head1>
<Body>
Returns the amount of vertical space available to the window on the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
iAvail = window.screen.availHeight</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iAvail</Code>
is an integer number representing the amount of space in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if window.screen.availHeight != window.screen.height {</CellCode>
<CellCode>
// somethingÅ‚Äôs in the way!</CellCode>
<CellCode>
// use available to size window</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Addtional notes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
availLeft</Head1>
<Body>
Returns the first available pixel available from the left side of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
iAvail = window.screen.availLeft</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iAvail</Code>
is an integer representing the amount of space in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
setY = window.screen.height - window.screen.availTop;</CellCode>
<CellCode>
setX = window.screen.width - window.screen.availLeft;</CellCode>
<CellCode>
window.moveTo(setX, setY);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
In most cases, this property returns 0.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
availTop</Head1>
<Body>
Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.</Body>
<Head3>
Syntax</Head3>
<Code>
iAvail = window.screen.availTop</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iAvail</Code>
is an integer representing the amount of space in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
setY = window.screen.height - window.screen.availTop;</CellCode>
<CellCode>
setX = window.screen.width - window.screen.availLeft;</CellCode>
<CellCode>
window.moveTo(setX, setY);</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
In most cases, this property returns 0.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
availWidth</Head1>
<Body>
Returns the amount of horizontal space in pixels available to the window.</Body>
<Head3>
Syntax</Head3>
<Code>
iAvail = window.screen.availWidth</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iAvail</Code>
is an integer representing the amount of space in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example code here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Addtional notes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
colorDepth</Head1>
<Body>
Returns the color depth of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
bitDepth = window.screen.colorDepth</Code>
<Head3>
Parameters</Head3>
<Indent>
bitDepth is an integer representing the color depth in bits.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// check the color depth of the screen</CellCode>
<CellCode>
if ( window.screen.colorDepth &lt; 8) {</CellCode>
<CellCode>
// use low-color version of page</CellCode>
<CellCode>
} else { </CellCode>
<CellCode>
// use regular, colorful page</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.screen.pixelDepth</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
height</Head1>
<Body>
Returns the height of the screen in pixels.</Body>
<Head3>
Syntax</Head3>
<Code>
iHeight = window.screen.height</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
iHeight</Code>
is an integer representing the height in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if (window.screen.availHeight != window.screen.height) {</CellCode>
<CellCode>
// something is occupying some screen real estate!</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that not all of the height given by this property may be available to the window itself. Widgets such as taskbars or other special application windows that integrate with the OS (e.g., the Spinner player minimized to act like an additional toolbar on windows) may reduce the amount of space available to browser windows and other applications.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
left</Head1>
<Body>
Gets/sets the current distance in pixels from the left side of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
lLeft = window.screen.left</Code>
<Code>
window.screen.left = lLeft</Code>
<Head3>
Parameters</Head3>
<Indent>
lLeft is the number of pixels from the left side of the screen.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// move and resize the current window</CellCode>
<CellCode>
window.resizeTo(window.screen.availWidth/2);</CellCode>
<CellCode>
window.screen.left = 1;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Code>
window.screen.top</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
pixelDepth</Head1>
<Body>
Returns the bit depth of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
depth = window.screen.pixelDepth</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
depth</Code>
is the number of bits per pixel as an integer.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// if there is not adequate bit depth</CellCode>
<CellCode>
// choose a simpler color</CellCode>
<CellCode>
if ( window.screen.pixelDepth &gt; 8 ) {</CellCode>
<CellCode>
document.style.color = Å‚Äú#FAEBD7Å‚Äù;</CellCode>
<CellCode>
} else {</CellCode>
<CellCode>
document.style.color = Å‚Äú#FFFFFFÅ‚Äù;</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.screen.colorDepth</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
top</Head1>
<Body>
Gets/sets the distance from the top of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
lTop = window.screen.top</Code>
<Code>
window.screen.top = lTop</Code>
<Head3>
Parameters</Head3>
<Indent>
lTop is the number of pixels from the top of the screen.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// move and resize the current window, </CellCode>
<CellCode>
// making it like a bar across the top</CellCode>
<CellCode>
window.resizeTo( window.screen.availHeight/4 );</CellCode>
<CellCode>
window.screen.top = 0;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Code>
window.screen.left</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screen.
width</Head1>
<Body>
Returns the width of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
lWidth = window.screen.width</Code>
<Head3>
Parameters</Head3>
<Indent>
lWidth is the width of the screen in pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// crude way to check that the screen is at 1024x768</CellCode>
<CellCode>
if (window.screen.width &gt; 1000) {</CellCode>
<CellCode>
// resolution is below 10 x 7</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that not all of the width given by this property may be available to the window itself. When other widgets occupy space that cannot be used by the window object, there is a difference in <Code>
window.screen.width</Code>
and <Code>
window.screen.availWidth</Code>
. See also <Code>
window.screen.height</Code>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screenX</Head1>
<Body>
Returns the horizontal distance of the left border of the user's browser from the left side of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
lLoc = window.screenX</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
lLoc</Code>
is the number of pixels from the left side the screen.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
None.</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.screenY</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
screenY</Head1>
<Body>
Returns the vertical distance of the top border of the user's browser from the top side of the screen.</Body>
<Head3>
Syntax</Head3>
<Code>
lLoc = window.screenY</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
lLoc</Code>
is the number of pixels from the top of the screen.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
None.</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.screenX</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollbars</Head1>
<Body>
Returns the <Code>
scrollbars</Code>
object, whose visibility can be toggled in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
sBarObj = window.scrollbars</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sBarObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<Body>
The following complete HTML example shows way that the visible property of the various Å‚ÄúbarÅ‚Äù objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;Various DOM Tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
// changing bar states on the existing window</CellCode>
<CellCode>
netscape.security.PrivilegeManager.</CellCode>
<CellCode>
enablePrivilege(&quot;UniversalBrowserWrite&quot;);</CellCode>
<CellCode>
window.menubar.visible=!window.menubar.visible;</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;p&gt;Various DOM Tests&lt;/p&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Note that <Code>
scrollbars</Code>
is not an array of the scrollbars. The visibility of these objects can only be controlled as a group.</Body>
<Body>
To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page.</Body>
<Body>
See also: <Bold>
window.locationbar</Bold>
, <Bold>
window.menubar</Bold>
, <Bold>
window.personalbar</Bold>
, <Bold>
window.scrollbars</Bold>
, <Bold>
window.statusbar</Bold>
, <Bold>
window.toolbar</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scroll()</Head1>
<Body>
Scrolls the window to a particular place in the document.</Body>
<Head3>
Syntax</Head3>
<Code>
window.scroll(x-coord, y-coord)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
x-coord</Code>
is the pixel along the horizontal axis of the document that you want displayed in the upper left.</Indent>
<Indent>
<Code>
y-coord</Code>
is the pixel along the vertical axis of the document that you want displayed in the upper left.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// put the 1000th vertical pixel at</CellCode>
<CellCode>
// the top of the window</CellCode>
<CellCode>
&lt;INPUT TYPE=Å‚ÄùbuttonÅ‚Äù VALUE=Å‚Äù1000Å‚Äù</CellCode>
<CellCode>
onClick=Å‚Äùscroll(0, 1000);Å‚Äù/&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Bold>
window.scrollTo()</Bold>
is effectively the same as this method.</Body>
<Body>
For scrolling a particular distance repeatedly, use the <Bold>
window.scrollBy()</Bold>
. Also see <Bold>
window.scrollByLines()</Bold>
, <Bold>
window.scrollByPages()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollBy()</Head1>
<Body>
Scrolls the document in the window by the given amount.</Body>
<Head3>
Syntax</Head3>
<Code>
window.scrollBy(xDelta, yDelta)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
xDelta</Code>
is the amount of pixels to scroll horizontally.</Indent>
<Indent>
<Code>
yDelta</Code>
is the amount of pixels to scroll vertically.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// scroll one page</CellCode>
<CellCode>
window.scrollBy(0, window.innerHeight);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
window.scrollBy() scrolls by a particular amount where <Bold>
window.scroll()</Bold>
scrolls to an absolute position in the document.</Body>
<Body>
See also <Bold>
window.scrollByLines()</Bold>
, <Bold>
window.scrollByPages()</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollByLines()</Head1>
<Body>
Scrolls the document by the given number of lines.</Body>
<Head3>
Syntax</Head3>
<Code>
window.scrollByLines(lines)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
lines</Code>
is the number of lines.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;button onclick=Å‚ÄùscrollByLines(10);Å‚Äù&gt;jump&lt;/button&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.scrollBy()</Bold>
, <Bold>
window.scrollByPages()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollByPages()</Head1>
<Body>
Scrolls the current document by the specified number of pages.</Body>
<Head3>
Syntax</Head3>
<Code>
window.scrollByPages(pages)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
pages</Code>
is the number of pages to scroll.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// scroll one page</CellCode>
<CellCode>
window.scrollByPages(1);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.scrollBy()</Bold>
, <Bold>
window.scrollByLines()</Bold>
, <Bold>
window.scroll()</Bold>
, <Bold>
window.scrollTo()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollTo()</Head1>
<Body>
Scrolls to a particular set of coordinates in the document.</Body>
<Head3>
Syntax</Head3>
<Code>
window.scrollTo(x-coord, y-coord)</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
x-coord</Code>
is the pixel along the horizontal axis of the document that you want displayed in the upper left.</Indent>
<Indent>
<Code>
y-coord</Code>
is the pixel along the vertical axis of the document that you want displayed in the upper left.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.scrollTo(0, 1000);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This function is effectively the same as <Bold>
window.scroll()</Bold>
. For relative scrolling, <Bold>
window.scrollBy()</Bold>
, <Bold>
window.scrollByLines()</Bold>
, and <Bold>
window.scrollByPages()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollX</Head1>
<Body>
Returns the number of pixels that the document has already been scrolled horizontally.</Body>
<Head3>
Syntax</Head3>
<Code>
xpix = window.scrollX</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
xpix</Code>
is the number of pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// make sure and go over to the second horizontal page</CellCode>
<CellCode>
if (window.scrollX) {</CellCode>
<CellCode>
scroll(0,0);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
scrollBy(400, 0);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Use this property to check that the document hasnÅ‚Äôt already been scrolled some if you are using relative scroll functions such as <Bold>
window.scrollBy()</Bold>
, <Bold>
window.scrollByLines()</Bold>
, or <Bold>
window.scrollByPages()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
scrollY</Head1>
<Body>
Returns the number of pixels that the document has already been scrolled vertically.</Body>
<Head3>
Syntax</Head3>
<Code>
ypix = window.scrollY</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
ypix</Code>
is the number of pixels.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// make sure and go down to the second page</CellCode>
<CellCode>
if (window.scrollY) {</CellCode>
<CellCode>
scroll(0,0);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
scrollByPages(1);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Head3>
Use this property to check that the document hasnÅ‚Äôt already been scrolled some if you are using relative scroll functions such as <Bold>
window.scrollBy()</Bold>
, <Bold>
window.scrollByLines()</Bold>
, or <Bold>
window.scrollByPages()</Bold>
</Head3>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
self</Head1>
<Body>
Returns an object reference to the <Code>
window</Code>
object.</Body>
<Head3>
Syntax</Head3>
<Code>
selfObj = window.self</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
selfObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if (window.parent.frames[0] != window.self) {</CellCode>
<CellCode>
// this window is not the first frame in the list</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
<Code>
window.self</Code>
is almost always used in comparisons like in the example above, which finds out if the current window is the first subframe in the parent frameset.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
setCursor()</Head1>
<Body>
Changes the cursor for the current window.</Body>
<Head3>
Syntax</Head3>
<Code>
syntax code</Code>
<Head3>
Parameters</Head3>
<Indent>
blah is a blah.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
function SetBusyCursor(window, enable)</CellCode>
<CellCode>
{</CellCode>
<CellCode>
if(enable)</CellCode>
<CellCode>
window.setCursor(&quot;wait&quot;);</CellCode>
<CellCode>
else</CellCode>
<CellCode>
window.setCursor(&quot;auto&quot;);</CellCode>
<CellCode>
</CellCode>
<CellCode>
var numFrames = window.frames.length;</CellCode>
<CellCode>
for(var i = 0; i &lt; numFrames; i++)</CellCode>
<CellCode>
SetBusyCursor(window.frames[i], enable);</CellCode>
<CellCode>
}</CellCode>
<CellCode>
</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The cursor is locked until it's set back to auto.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
setInterval()</Head1>
<Body>
Set a delay for a specific function.</Body>
<Head3>
Syntax</Head3>
<Code>
ID = window.setInterval(Å‚ÄúfuncNameÅ‚Äù, delay)</Code>
<Head3>
Parameters</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
funcName is the name of the function for which you want to set a delay.</Body>
<Body>
delay is the number of milliseconds (thousandths of a second) that the function should be delayed.</Body>
<Body>
ID is the interval ID.</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
intervalID = window.setInterval(Å‚Äúanimalate()Å‚Äù, 500);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The interval ID is used to refer to the specific interval when it needs to be cleared. The setInterval() function is commonly used to set a delay for functions that are executed again and again, such as animations. </Body>
<Body>
See also <Bold>
window.clearInterval()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
setTimeout()</Head1>
<Body>
Sets a delay for executing a function.</Body>
<Head3>
Syntax</Head3>
<Code>
ID = window.setTimeout(Å‚ÄúfuncNameÅ‚Äù, delay)</Code>
<Head3>
Parameters</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
funcName is the name of the function for which you want to set a delay.</Body>
<Body>
delay is the number of milliseconds (thousandths of a second) that the function should be delayed.</Body>
<Body>
ID is the interval ID.</Body>
</CELL>
</ROW>
</TABLE>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
setTimeout('parent.generateOutput(&quot;Cancel&quot;)',0);</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The setTimeout() method is often used to establish a time limit on certain applications, as when a user is logged out or certain information is reset if there has not been any interaction within the given time.</Body>
<Body>
See also <Bold>
window.clearTimeout()</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
sidebar</Head1>
<Body>
Returns a reference to the window object of the sidebar.</Body>
<Head3>
Syntax</Head3>
<Code>
sidebar = window.sidebar</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
sidebar</Code>
is a window object.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
sbar = window.sidebar;</CellCode>
<CellCode>
if (sbar) {</CellCode>
<CellCode>
sbar_content = sbar._content;</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The sidebar is a subframe in the DOM of the application window. Its content can be accessed with <Code>
sidebar._content</Code>
, as in the foregoing example, and it is a sibling of the windowÅ‚Äôs main content frame.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
sizeToContent()</Head1>
<Body>
Sizes the window according to its content.</Body>
<Head3>
Syntax</Head3>
<Code>
window.sizeToContent()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.sizeToContent();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
status</Head1>
<Body>
Gets/sets the text in the statusbar at the bottom of the browser.</Body>
<Head3>
Syntax</Head3>
<Code>
msg = window.status</Code>
<Code>
window.status = msg</Code>
<Head3>
Parameters</Head3>
<Indent>
msg is a string containing the text to appear in the statusbar.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
while ( bigLoad ) {</CellCode>
<CellCode>
window.status = Å‚ÄúLoading...Å‚Äù;</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
None.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
statusbar</Head1>
<Body>
Returns the <Code>
statusbar</Code>
object, whose visibility can be toggled in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
sBarObj = window.menubar</Code>
<Head3>
Parameters</Head3>
<Indent>
sBarObj is an object reference.</Indent>
<Head3>
Example</Head3>
<Body>
The following complete HTML example shows way that the visible property of the various Å‚ÄúbarÅ‚Äù objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;Various DOM Tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
// changing bar states on the existing window</CellCode>
<CellCode>
netscape.security.PrivilegeManager.</CellCode>
<CellCode>
enablePrivilege(&quot;UniversalBrowserWrite&quot;);</CellCode>
<CellCode>
window.statusbar.visible=!window.statusbar.visible;</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;p&gt;Various DOM Tests&lt;/p&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
When you load the example page above, the browser displays the following dialog:</Body>
<DIV>
<IMAGE xml:link="simple" href="dom_book-9.gif" show="embed" actuate="auto"/>
</DIV>
<Body>
To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page.</Body>
<Body>
See also: <Bold>
window.locationbar</Bold>
, <Bold>
window.menubar</Bold>
, <Bold>
window.personalbar</Bold>
, <Bold>
window.scrollbars</Bold>
, <Bold>
window.statusbar</Bold>
, <Bold>
window.toolbar</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
stop()</Head1>
<Body>
This method stops window loading.</Body>
<Head3>
Syntax</Head3>
<Code>
window.stop()</Code>
<Head3>
Parameters</Head3>
<Indent>
None.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
window.stop();</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
The stop() method is exactly equivalent to clicking the stop button in the browser. Because of the order in which scripts are loaded, the stop() method cannot stop the document in which it is contained from loading, but it will stop the loading of large images, new windows, and other objects whose loading is deferred.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
toolbar</Head1>
<Body>
Returns the <Code>
toolbar</Code>
object, whose visibility can be toggled in the window.</Body>
<Head3>
Syntax</Head3>
<Code>
tBarObj = window.menubar</Code>
<Head3>
Parameters</Head3>
<Indent>
tBarObj is an object reference.</Indent>
<Head3>
Example</Head3>
<Body>
The following complete HTML example shows way that the visible property of the various Å‚ÄúbarÅ‚Äù objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.</Body>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
&lt;html&gt;</CellCode>
<CellCode>
&lt;head&gt;</CellCode>
<CellCode>
&lt;title&gt;Various DOM Tests&lt;/title&gt;</CellCode>
<CellCode>
&lt;script&gt;</CellCode>
<CellCode>
// changing bar states on the existing window</CellCode>
<CellCode>
netscape.security.PrivilegeManager.</CellCode>
<CellCode>
enablePrivilege(&quot;UniversalBrowserWrite&quot;);</CellCode>
<CellCode>
window.toolbar.visible=!window.toolbar.visible;</CellCode>
<CellCode>
&lt;/script&gt;</CellCode>
<CellCode>
&lt;/head&gt;</CellCode>
<CellCode>
&lt;body&gt;</CellCode>
<CellCode>
&lt;p&gt;Various DOM Tests&lt;/p&gt;</CellCode>
<CellCode>
&lt;/body&gt;</CellCode>
<CellCode>
&lt;/html&gt;</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page.</Body>
<Body>
See also: <Bold>
window.locationbar</Bold>
, <Bold>
window.menubar</Bold>
, <Bold>
window.personalbar</Bold>
, <Bold>
window.scrollbars</Bold>
, <Bold>
window.statusbar</Bold>
, <Bold>
window.toolbar</Bold>
</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
top</Head1>
<Body>
Returns a reference to the topmost window in the window hierarchy.</Body>
<Head3>
Syntax</Head3>
<Code>
windowObj = window.top</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
windowObj</Code>
is an object reference.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
None.</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Where the <Code>
window.parent</Code>
property returns the immediate parent of the current window, <Code>
window.top</Code>
returns the topmost window in the hierarchy of window objects. This property is especially useful when you are dealing with a window that is in a subframe of a parent or parents, and you want to get to the top-level frameset.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
unescape()</Head1>
<Body>
Unencodes a value that has been encoded in hexadecimal (e.g., a cookie).</Body>
<Head3>
Syntax</Head3>
<Code>
window.escape(sValue)</Code>
<Head3>
Parameters</Head3>
<Indent>
sValue is an encoded string.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
cookieValuePlain = unescape( cookieValue );</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
See also <Bold>
window.escape()</Bold>
.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
updateCommands()</Head1>
<Body>
Brief description.</Body>
<Head3>
Syntax</Head3>
<Code>
syntax code</Code>
<Head3>
Parameters</Head3>
<Indent>
blah is a blah.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
// example code here</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
Addtional notes.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Head1>
window.
window</Head1>
<Body>
Returns a reference to this window.</Body>
<Head3>
Syntax</Head3>
<Code>
windowObj = window.window</Code>
<Head3>
Parameters</Head3>
<Indent>
<Code>
windowObj</Code>
is an object reference to the current window.</Indent>
<Head3>
Example</Head3>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellCode>
if ( window.top ) != ( window.window ) {</CellCode>
<CellCode>
...</CellCode>
<CellCode>
}</CellCode>
</CELL>
</ROW>
</TABLE>
<Head3>
Notes</Head3>
<Body>
This property is redundant. window is itself an object reference that can be used in all cases where window.window can. If for no other reason, it may exist so that comparisons like the example above are more readable.</Body>
<Head3>
Specification</Head3>
<Code>
DOM Level 0. Not part of specification.</Code>
<Body>
</Body>
<Body>
</Body>
<Body>
</Body>
</chapter>
