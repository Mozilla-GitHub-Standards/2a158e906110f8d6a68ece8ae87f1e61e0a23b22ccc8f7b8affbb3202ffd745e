<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<link rel="top" title="Home" href="http://www.mozilla.org/">
<link rel="stylesheet" type="text/css" href="../../css/print.css"  media="print">
<link rel="stylesheet" type="text/css" href="../../css/base/content.css"  media="all">
<link rel="stylesheet" type="text/css" href="../../css/cavendish/content.css" title="Cavendish" media="screen">
<link rel="stylesheet" type="text/css" href="../../css/base/template.css"  media="screen">
<link rel="stylesheet" type="text/css" href="../../css/cavendish/template.css" title="Cavendish" media="screen">
<link rel="icon" href="../../images/mozilla-16.png" type="image/png">

 <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
 <title>Mozilla LDAP C SDK: Chapter 18 - Function Reference</title>
<script src="../../__utm.js" type="text/javascript"></script>
</head>
<body id="www-mozilla-org" class="deepLevel">
<div id="container">
<p class="important">You are currently viewing a snapshot of www.mozilla.org taken on April 21, 2008. Most of this content is
highly out of date (some pages haven't been updated since the project began in 1998) and exists for historical purposes only.  If
there are any pages on this archive site that you think should be added back to www.mozilla.org, please <a
href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Websites&component=www.mozilla.org">file a bug</a>.</p>
<p class="skipLink"><a href="#mainContent" accesskey="2">Skip to main content</a></p>
<div id="header">
<h1><a href="/" title="Return to home page" accesskey="1">Mozilla</a></h1>
<ul>
<li id="menu_aboutus"><a href="../../about/" title="Getting the most out of your online experience">About</a></li>
<li id="menu_developers"><a href="../../developer/" title="Using Mozilla's products for your own applications">Developers</a></li>
<li id="menu_store"><a href="http://store.mozilla.org/?r=mozorg1" title="Shop for Mozilla products on CD and other merchandise">Store</a></li>
<li id="menu_support"><a href="../../support/" title="Installation, trouble-shooting, and the knowledge base">Support</a></li>
<li id="menu_products"><a href="../../products/" title="All software Mozilla currently offers">Products</a></li>
</ul>
<form id="searchbox_002443141534113389537:ysdmevkkknw" action="http://www.google.com/cse" title="mozilla.org Search">
<div>
<label for="q" title="Search mozilla.org's sites">search mozilla:</label>
<input type="hidden" name="cx" value="002443141534113389537:ysdmevkkknw">
<input type="hidden" name="cof" value="FORID:0">
<input type="text" id="q" name="q" accesskey="s" size="30">
<input type="submit" id="submit" value="Go">
</div>
</form>
</div>
<hr class="hide">
<div id="mBody">
<div id="side">

<ul id="nav">
<li><a title="Roadmap" href="../../roadmap.html"><strong> Roadmap</strong></a></li>
<li><a title="Projects" href="../../projects/"><strong> Projects</strong></a></li>
<li><a title="For developers" href="../../developer/"><strong> Coding</strong></a>
<ul>
<li><a title="Module Owners" href="../../owners.html"> Module Owners</a></li>
<li><a title="Hacking" href="../../hacking/"> Hacking</a></li>
<li><a title="Get the Source" href="http://developer.mozilla.org/en/docs/Download_Mozilla_Source_Code"> Get the Source</a></li>
<li><a title="Building Mozilla" href="http://developer.mozilla.org/en/docs/Build_Documentation"> Build It</a></li>
</ul>
</li>
<li><a title="Testing" href="../../quality/"><strong> Testing</strong></a>
<ul>
<li><a title="Downloads of mozilla.org software releases" href="../../download.html"> Releases</a></li>
<li><a title="Latest mozilla builds for testers" href="../../developer/#builds"> Nightly Builds</a></li>
<li><a title="For testers to report bugs" href="https://bugzilla.mozilla.org/"> Report A Problem</a></li>
</ul>
</li>
<li><a title="Tools for mozilla developers" href="../../tools.html"><strong> Tools</strong></a>
<ul>
<li><a title="Bug tracking system for mozilla testers." href="https://bugzilla.mozilla.org/"> Bugzilla</a></li>
<li><a title="Latest status of mozilla builds" href="http://tinderbox.mozilla.org/showbuilds.cgi?tree=Firefox"> Tinderbox</a></li>
<li><a title="Latest checkins" href="http://bonsai.mozilla.org/cvsqueryform.cgi"> Bonsai</a></li>
<li><a title="Source cross reference" href="http://lxr.mozilla.org/seamonkey/"> LXR</a></li>
</ul>
</li>
<li><a title="Frequently Asked Questions." href="../../faq.html"><strong> FAQs</strong></a></li>
</ul>

</div>
<hr class="hide">
<div id="mainContent">





<ul class="snav">
 <li><a href="datatype.htm">Previous</a>
 <li><a href="./">Contents</a>
 <li><a href="ix.htm">Index</a>
 <li><a href="error.htm">Next</a>
</ul>

<h1>Mozilla LDAP C SDK Programmer's Guide</h1>
<h2>Chapter 18 - Function Reference</h2>

<p>This chapter contains a reference to the public functions of the
LDAP C SDK. Along with a detailed description of each function, the
function reference details the function header file and syntax, the
function parameters, and what the function returns. In many cases an
example program is included with the description.</p>

<p>The beginning of this chapter lists the functions in the
following two formats:</p>

<ul>
 <li><a href="function.htm#function-alphabet-order">"Functions (in alphabetical order)."</a>
 <li><a href="function.htm#function-task-order">"Summary of Functions by Task."</a>
</ul>

<h3 id="function-alphabet-order">Functions (in alphabetical order)</a></h3>

<p>The LDAP C SDK includes the following functions (functions that
require LDAPv3 support are noted):</p>

<ul>
 <li><code><a href="function.htm#ber-bvfree">ber_bvfree()</a></code>
 <li><code><a href="function.htm#ber-free">ber_free()</a></code>
 <li><code><a href="function.htm#abandon">ldap_abandon()</a></code>
 <li>
  <code><a href="function.htm#abandon-ext">ldap_abandon_ext()</a></code> -
  LDAPv3 function
 <li><code><a href="function.htm#add">ldap_add()</a></code>
 <li>
  <code><a href="function.htm#add-ext">ldap_add_ext()</a></code> -
  LDAPv3 function
 <li>
  <code><a href="function.htm#add-ext-s">ldap_add_ext_s()</a></code> -
  LDAPv3 function
 <li><code><a href="function.htm#add-s">ldap_add_s()</a></code>
 <li><code><a href="function.htm#ldap-ber-free">ldap_ber_free()</a></code>
 <li><code><a href="function.htm#build-filter">ldap_build_filter()</a></code>
 <li><code><a href="function.htm#compare">ldap_compare()</a></code>
 <li>
  <code><a href="function.htm#compare-ext">ldap_compare_ext()</a></code> -
  LDAPv3 function
 <li>
  <code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code>
  - LDAPv3 function
 <li>
 <code><a href="function.htm#compare-s">ldap_compare_s()</a></code>
 <li>
  <code><a href="function.htm#control-free">ldap_control_free()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#controls-free">ldap_controls_free()</a></code>
  - LDAPv3 function
 <li><code><a href="function.htm#count-entries">ldap_count_entries()</a></code>
 <li>
  <code><a href="function.htm#count-messages">ldap_count_messages()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#count-references">ldap_count_references()</a></code>
  - LDAPv3 function
 <li><code><a href="function.htm#count-values">ldap_count_values()</a></code>
 <li><code><a href="function.htm#count-values-len">ldap_count_values_len()</a></code>
 <li><code><a href="function.htm#create-filter">ldap_create_filter()</a></code>
 <li>
  <code><a href="function.htm#create-persistentsearch-control">ldap_create_persistentsearch_control()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#create-proxyauth-control">ldap_create_proxyauth_control()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#create-sort-control">ldap_create_sort_control()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#create-sort-keylist">ldap_create_sort_keylist()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#create-virtuallist-control">ldap_create_virtuallist_control()</a></code>
  - LDAPv3 function
 <li><code><a href="function.htm#delete">ldap_delete()</a></code>
 <li>
  <code><a href="function.htm#delete-ext">ldap_delete_ext()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a></code>
  - LDAPv3 function
 <li><code><a href="function.htm#delete-s">ldap_delete_s()</a></code>
 <li><code><a href="function.htm#dn2ufn">ldap_dn2ufn()</a></code>
 <li><code><a href="function.htm#err2string">ldap_err2string()</a></code>
 <li><code><a href="function.htm#explode-dn">ldap_explode_dn()</a></code>
 <li><code><a href="function.htm#explode-rdn">ldap_explode_rdn()</a></code>
 <li>
  <code><a href="function.htm#extended-operation">ldap_extended_operation()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#extended-operation-s">ldap_extended_operation_s()</a></code>
  - LDAPv3 function
 <li><code><a href="function.htm#first-attribute">ldap_first_attribute()</a></code>
 <li><code><a href="function.htm#first-entry">ldap_first_entry()</a></code>
 <li>
  <code><a href="function.htm#first-message">ldap_first_message()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#first-reference">ldap_first_reference()</a></code>
  - LDAPv3 function
 <li><code><a href="function.htm#free-friendlymap">ldap_free_friendlymap()</a></code>
 <li><code><a href="function.htm#free-sort-keylist">ldap_free_sort_keylist()</a></code>
 <li><code><a href="function.htm#free-urldesc">ldap_free_urldesc()</a></code>
 <li><code><a href="function.htm#friendly-name">ldap_friendly_name()</a></code>
 <li><code><a href="function.htm#get-dn">ldap_get_dn()</a></code>
 <li>
  <code><a href="function.htm#get-entry-controls">ldap_get_entry_controls()</a></code>
  - LDAPv3 function
 <li><code><a href="function.htm#getfilter-free">ldap_getfilter_free()</a></code>
 <li><code><a href="function.htm#getfirstfilter">ldap_getfirstfilter()</a></code>
 <li><code><a href="function.htm#get-lang-values">ldap_get_lang_values()</a></code>
 <li><code><a href="function.htm#get-lang-values-len">ldap_get_lang_values_len()</a></code>
 <li><code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
 <li><code><a href="function.htm#getnextfilter">ldap_getnextfilter()</a></code>
 <li><code><a href="function.htm#get-option">ldap_get_option()</a></code>
 <li><code><a href="function.htm#get-values">ldap_get_values()</a></code>
 <li><code><a href="function.htm#get-values-len">ldap_get_values_len()</a></code>
 <li><code><a href="function.htm#init">ldap_init()</a></code>
 <li><code><a href="function.htm#init-getfilter">ldap_init_getfilter()</a></code>
 <li><code><a href="function.htm#init-getfilter-buf">ldap_init_getfilter_buf()</a></code>
 <li><code><a href="function.htm#is-ldap-url">ldap_is_ldap_url()</a></code>
 <li><code><a href="function.htm#memcache-destroy">ldap_memcache_destroy()</a></code>
 <li><code><a href="function.htm#memcache-flush">ldap_memcache_flush()</a></code>
 <li><code><a href="function.htm#memcache-get">ldap_memcache_get()</a></code>
 <li><code><a href="function.htm#memcache-init">ldap_memcache_init()</a></code>
 <li><code><a href="function.htm#memcache-set">ldap_memcache_set()</a></code>
 <li><code><a href="function.htm#memcache-update">ldap_memcache_update()</a></code>
 <li><code><a href="function.htm#memfree">ldap_memfree()</a></code>
 <li><code><a href="function.htm#modify">ldap_modify()</a></code>
 <li>
  <code><a href="function.htm#modify-ext">ldap_modify_ext()</a></code> -
  LDAPv3 function
 <li>
  <code><a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a></code>
  - LDAPv3 function
 <li><code><a href="function.htm#modify-s">ldap_modify_s()</a></code>
 <li><code><a href="function.htm#modrdn">ldap_modrdn()</a></code>
 <li><code><a href="function.htm#modrdn-s">ldap_modrdn_s()</a></code>
 <li><code><a href="function.htm#modrdn2">ldap_modrdn2()</a></code>
 <li><code><a href="function.htm#modrdn2-s">ldap_modrdn2_s()</a></code>
 <li><code><a href="function.htm#mods-free">ldap_mods_free()</a></code>
 <li><code><a href="function.htm#msgfree">ldap_msgfree()</a></code>
 <li><code><a href="function.htm#msgid">ldap_msgid()</a></code>
 <li><code><a href="function.htm#msgtype">ldap_msgtype()</a></code>
 <li><code><a href="function.htm#multisort-entries">ldap_multisort_entries()</a></code>
 <li><code><a href="function.htm#next-attribute">ldap_next_attribute()</a></code>
 <li><code><a href="function.htm#next-entry">ldap_next_entry()</a></code>
 <li>
  <code><a href="function.htm#next-message">ldap_next_message()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#next-reference">ldap_next_reference()</a></code>
  - LDAPv3 function
 <li>
 <code><a href="function.htm#parse-entrychange-control">ldap_parse_entrychange_control()</a></code>
 - LDAPv3 function
 <li>
  <code><a href="function.htm#parse-extended-result">ldap_parse_extended_result()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#parse-reference">ldap_parse_reference()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#parse-sasl-bind-result">ldap_parse_sasl_bind_result()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#parse-sort-control">ldap_parse_sort_control()</a></code>
  - LDAPv3 function
 <li>
  <code><a href="function.htm#parse-virtuallist-control">ldap_parse_virtuallist_control()</a></code>
  - LDAPv3 function
 <li><code><a href="function.htm#perror">ldap_perror()</a></code>
 <li>
  <code><a href="function.htm#rename">ldap_rename()</a></code> -
  LDAPv3 function
 <li>
  <code><a href="function.htm#rename-s">ldap_rename_s()</a></code> -
  LDAPv3 function
 <li><code><a href="function.htm#result">ldap_result()</a></code>
 <li><code><a href="function.htm#result2error">ldap_result2error()</a></code>
 <li>
  <code><a href="function.htm#sasl-bind">ldap_sasl_bind()</a></code> -
  LDAPv3 function
 <li>
  <code><a href="function.htm#sasl-bind-s">ldap_sasl_bind_s()</a></code>
  - LDAPv3 function
 <li><code><a href="function.htm#search">ldap_search()</a></code>
 <li>
  <code><a href="function.htm#search-ext">ldap_search_ext()</a></code> -
  LDAPv3 function
 <li>
  <code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>
  - LDAPv3 function
 <li><code><a href="function.htm#search-s">ldap_search_s()</a></code>
 <li><code><a href="function.htm#search-st">ldap_search_st()</a></code>
 <li><code><a href="function.htm#set-filter-additions">ldap_set_filter_additions()</a></code>
 <li><code><a href="function.htm#setfilteraffixes">ldap_setfilteraffixes()</a></code>
 <li><code><a href="function.htm#set-lderrno">ldap_set_lderrno()</a></code>
 <li><code><a href="function.htm#set-option">ldap_set_option()</a></code>
 <li><code><a href="function.htm#set-rebind-proc">ldap_set_rebind_proc()</a></code>
 <li><code><a href="function.htm#simple-bind">ldap_simple_bind()</a></code>
 <li><code><a href="function.htm#simple-bind-s">ldap_simple_bind_s()</a></code>
 <li><code><a href="function.htm#sort-entries">ldap_sort_entries()</a></code>
 <li><code><a href="function.htm#sort-values">ldap_sort_values()</a></code>
 <li><code><a href="function.htm#sort-strcasecmp">ldap_sort_strcasecmp()</a></code>
 <li><code><a href="function.htm#unbind">ldap_unbind()</a></code>
 <li><code><a href="function.htm#unbind-s">ldap_unbind_s()</a></code>
 <li><code><a href="function.htm#unbind-ext">ldap_unbind_ext()</a></code>
 <li><code><a href="function.htm#url-parse">ldap_url_parse()</a></code>
 <li><code><a href="function.htm#url-search">ldap_url_search()</a></code>
 <li><code><a href="function.htm#url-search-s">ldap_url_search_s()</a></code>
 <li><code><a href="function.htm#url-search-st">ldap_url_search_st()</a></code>
 <li><code><a href="function.htm#value-free">ldap_value_free()</a></code>
 <li><code><a href="function.htm#value-free-len">ldap_value_free_len()</a></code>
 <li><code><a href="function.htm#version">ldap_version()</a></code>
 <li><code><a href="function.htm#ssl-advclientauth-init">ldapssl_advclientauth_init()</a></code>
 <li><code><a href="function.htm#ssl-client-init">ldapssl_client_init()</a></code>
 <li><code><a href="function.htm#ssl-clientauth-init">ldapssl_clientauth_init()</a></code>
 <li><code><a href="function.htm#ssl-enable-clientauth">ldapssl_enable_clientauth()</a></code>
 <li><code><a href="function.htm#ssl-err2string">ldapssl_err2string()</a></code>
 <li><code><a href="function.htm#ssl-init">ldapssl_init()</a></code>
 <li><code><a href="function.htm#ssl-install-routines">ldapssl_install_routines()</a></code>
 <li><code><a href="function.htm#ssl-pkcs-init">ldapssl_pkcs_init()</a></code>
</ul>

<h3 id="function-task-order">Summary of Functions by Task</a></h3>

<p>This section summarizes the functions in the LDAP C SDK into the
following task categories:</p>

<ul>
 <li><a href="function.htm#initialize-end-session">Initializing and Ending LDAP Sessions</a>
 <li><a href="function.htm#auth-server">Authenticating to an LDAP Server</a>
 <li><a href="function.htm#perform-operation">Performing LDAP Operations</a>
 <li><a href="function.htm#get-search-results">Getting Search Results</a>
 <li><a href="function.htm#sort-search-results">Sorting Search Results</a>
 <li><a href="function.htm#work-search-filters">Working with Search Filters</a>
 <li><a href="function.htm#work-distinguished-names">Working with Distinguished Names</a>
 <li><a href="function.htm#work-v3-controls">Working with LDAPv3 Controls</a>
 <li><a href="function.htm#work-urls">Working with LDAP URLs</a>
 <li>
  <a href="function.htm#get-attribute-value-language">Getting the 
  Attribute Values for a Particular Language</a>
 <li><a href="function.htm#handle-errors">Handling Errors</a>
 <li><a href="function.htm#free-memory">Freeing Memory</a>
</ul>

<h3 id="initialize-end-session">Initializing and Ending LDAP Sessions</a></h3>

<p>Call the following functions to initialize a session, set session
options, and end a session.</p>

<h4>Table 18-1 - Functions to initialize and end an LDAP session</h4>

<table class="data">
 <tr>
  <th>Function</th>
  <th>Description</th>
 </tr>
 <tr>
  <td><code><a href="function.htm#init">ldap_init()</a></code></td>
  <td>Initialize an LDAP session.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#ssl-init">ldapssl_init()</a></code></td>
  <td>Initialize an LDAP session over SSL.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#set-option">ldap_set_option()</a></code></td>
  <td>Set session preferences.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#get-option">ldap_get_option()</a></code></td>
  <td>Get session preferences.</td>
 </tr>
 <tr>
  <td>
   <code class="long"><a href="function.htm#unbind">ldap_unbind()</a>,
   <a href="function.htm#unbind-s">ldap_unbind_s()</a>, or
   <a href="function.htm#unbind-ext">ldap_unbind_ext()</a></code>
  </td>
  <td>End an LDAP session.</td>
 </tr> <tr>
  <td>
   <code class="long"><a href="function.htm#ssl-client-init">ldapssl_client_init()</a>,
   <a href="function.htm#ssl-clientauth-init">ldapssl_clientauth_init()</a>,
   <a href="function.htm#ssl-advclientauth-init">ldapssl_advclientauth_init()</a>, or
   <a href="function.htm#ssl-pkcs-init">ldapssl_pkcs_init()</a>.</code>
  </td>
  <td>
   Perform once-per-process initialization required in order to
   use SSL.
  </td>
 </tr>
</table>

<h3 id="auth-server">Authenticating to an LDAP Server</a></h3>

<p>Call the following functions to authenticate to an LDAP server.</p>

<h4>Table 18-2 - Functions to authenticate to an LDAP server</h4>

<table class="data">
 <tr>
  <th>Function</th>
  <th>Description</th>
 </tr>
 <tr>
  <td>
   <code><a href="function.htm#simple-bind">ldap_simple_bind()</a></code> or
   <code><a href="function.htm#simple-bind-s">ldap_simple_bind_s()</a></code>
  </td>
  <td>Authenticate to an LDAP server using a password.</td>
 </tr>
 <tr>
  <td>
   <code><a href="function.htm#sasl-bind">ldap_sasl_bind()</a></code> and
   <code><a href="function.htm#parse-sasl-bind-result">ldap_parse_sasl_bind_result()</a></code>,
   or <code><a href="function.htm#sasl-bind-s">ldap_sasl_bind_s()</a></code></td>
  <td>Authenticate to an LDAP server using a SASL mechanism.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#set-rebind-proc">ldap_set_rebind_proc()</a></code></td>
  <td>
   Specify the function used to get authentication information when
   following referrals.
  </td>
 </tr>
</table>

<h3 id="perform-operation">Performing LDAP Operations</h3>

<p>Call the following functions to perform LDAP operations on a server.</p>

<p>
 <strong>Table 18-3 - Functions to perform operations on an LDAP server</strong>
<p>

<table class="data">
 <tr>
  <th>Function</th>
  <th>Description</th>
 </tr>
 <tr>
  <td>
   <code><a href="function.htm#add-ext">ldap_add_ext()</a> or
   <a href="function.htm#add-ext-s">ldap_add_ext_s()</a></code>
  </td>
  <td>Add a new entry to the directory.</td>
 </tr>
 <tr>
  <td>
   <code><a href="function.htm#modify-ext">ldap_modify_ext()</a> or
   <a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a></code>
  </td>
  <td>Modify an entry in the directory.</td>
 </tr>
 <tr>
  <td>
   <code><a href="function.htm#delete-ext">ldap_delete_ext()</a> or
   <a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a></code>
  </td>
  <td>Delete an entry from the directory.</td>
 </tr>
 <tr>
  <td>
   <code><a href="function.htm#rename">ldap_rename()</a> or
   <a href="function.htm#rename-s">ldap_rename_s()</a></code>
  </td>
  <td>Rename an entry in the directory.</td>
 </tr>
 <tr>
  <td>
   <code><a href="function.htm#search-ext">ldap_search_ext()</a> or
   <a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>
  </td>
  <td>Search the directory.</td>
 </tr>
 <tr>
  <td>
   <code><a href="function.htm#compare-ext">ldap_compare_ext()</a> or
   <a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code>
  </td>
  <td>Compare entries in the directory.</td>
 </tr>
 <tr>
  <td>
   <code><a href="function.htm#extended-operation">ldap_extended_operation()</a> or
   <a href="function.htm#extended-operation-s">ldap_extended_operation_s()</a></code>
  </td>
  <td>Perform an LDAPv3 extended operation.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#result">ldap_result()</a></code></td>
  <td>Check the results of an asynchronous operation.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#parse-extended-result">ldap_parse_extended_result()</a></code></td>
  <td>Parse the results of an LDAPv3 extended operation.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#msgfree">ldap_msgfree()</a></code></td>
  <td>Free the results from memory.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#abandon-ext">ldap_abandon_ext()</a></code></td>
  <td>Cancel an asynchronous operation.</td>
 </tr>
</table>

<h3 id="get-search-results">Getting Search Results</h3>

<p>Call the following functions to retrieve search results.</p>

<p>
 <strong>Table 18-4 - Functions to search entries on an LDAP server</strong>
</p>

<table class="data">
 <tr>
  <th>Function</th>
  <th>Description</th>
 </tr>
 <tr>
  <td><code><a href="function.htm#first-message">ldap_first_message()</a></code></td>
  <td>
   Get the first message (an entry or search reference) in a chain
   of search results.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#next-message">ldap_next_message()</a></code></td>
  <td>
   Get the next message (an entry or search reference) in a chain of
   search results.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#count-messages">ldap_count_messages()</a></code></td>
  <td>
   Count the number of messages (entries and search references) in a
   chain of search results.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#first-entry">ldap_first_entry()</a></code></td>
  <td>Get the first entry in a chain of search results.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#next-entry">ldap_next_entry()</a></code></td>
  <td>Get the next entry in a chain of search results.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#count-entries">ldap_count_entries()</a></code></td>
  <td>Count the number of entries in a chain of search results.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#first-reference">ldap_first_reference()</a></code></td>
  <td>Get the first search reference in a chain of search results.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#next-reference">ldap_next_reference()</a></code></td>
  <td>Get the next search reference in a chain of search results.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#count-references">ldap_count_references()</a></code></td>
  <td>Count the number of search references in a chain of search results.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#get-dn">ldap_get_dn()</a></code></td>
  <td>Get the distinguished name for an entry.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#first-attribute">ldap_first_attribute()</a></code></td>
  <td>Get the name of the first attribute in an entry.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#next-attribute">ldap_next_attribute()</a></code></td>
  <td>Get the name of the next attribute in an entry.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#get-values">ldap_get_values()</a></code></td>
  <td>Get the string values of an attribute.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#get-values-len">ldap_get_values_len()</a></code></td>
  <td>Get the binary values of an attribute.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#count-values">ldap_count_values()</a></code></td>
  <td>Count the string values of an attribute.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#count-values-len">ldap_count_values_len()</a></code></td>
  <td>Count the binary values of an attribute.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#get-lang-values">ldap_get_lang_values()</a></code></td>
  <td>
   Get the string values of the specified language subtype of an
   attribute.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#get-lang-values-len">ldap_get_lang_values_len()</a></code></td>
  <td>
   Get the binary values of the specified language subtype of an
   attribute.
   </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#value-free">ldap_value_free()</a></code></td>
  <td>Free the memory allocated for the string values of an attribute.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#value-free-len">ldap_value_free_len()</a></code></td>
  <td>Free the memory allocated for the binary values of an attribute.</td>
 </tr>
</table>

<h3 id="sort-search-results">Sorting Search Results</h3>

<p>Call the following functions to sort search results.</p>

<p>
 <strong>Table 18-5 - Functions that sort search results</strong>
<p>

<table class="data">
 <tr>
  <th>Function</th>
  <th>Description</th>
 </tr>
 <tr>
  <td><code><a href="function.htm#sort-entries">ldap_sort_entries()</a></code></td>
  <td>
   Have your client sort entries by distinguished name or by a
   single attribute.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#multisort-entries">ldap_multisort_entries()</a></code></td>
  <td>Have your client sort entries by multiple attributes.</td>
 </tr>
 <tr>
  <td>
   <code class="long"><a href="function.htm#create-sort-keylist">ldap_create_sort_keylist()</a>,
   <a href="function.htm#create-sort-control">ldap_create_sort_control()</a>,
   <a href="function.htm#parse-sort-control">ldap_parse_sort_control()</a></code>
  </td>
  <td>
   Request that the server sort the search results before sending
   them to your client.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#sort-values">ldap_sort_values()</a></code></td>
  <td>Sort the values of an attribute</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#sort-strcasecmp">ldap_sort_strcasecmp()</a></code></td>
  <td>
   A case-insensitive comparison function that you can pass to
   <code>ldap_sort_values()</code>.
  </td>
 </tr>
</table>

<h3 id="work-search-filters">Working with Search Filters</h3>

<p>Call the following functions to initialize, retrieve, and
build filters.</p>

<p>
 <strong>Table 18-6 - Functions to initialize, retrieve, and build filters</strong>
</p>

<table class="data">
 <tr>
  <th>Function</th>
  <th>Description</th>
 </tr>
 <tr>
  <td><code><a href="function.htm#init-getfilter">ldap_init_getfilter()</a></code></td>
  <td>Read a filter configuration file into memory.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#init-getfilter-buf">ldap_init_getfilter_buf()</a></code></td>
  <td>Read a filter configuration from a buffer.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#set-filter-additions">ldap_set_filter_additions()</a></code></td>
  <td>
   Specify the prefix and suffix to be added to all filters
   retrieved from the filter configuration.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#getfirstfilter">ldap_getfirstfilter()</a></code></td>
  <td>Retrieve the first matching filter from the filter configuration.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#getnextfilter">ldap_getnextfilter()</a></code></td>
  <td>Retrieve the next matching filter from the filter configuration.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#getfilter-free">ldap_getfilter_free()</a></code></td>
  <td>Free the filter configuration from memory.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#create-filter">ldap_create_filter()</a></code></td>
  <td>Build a filter.</td>
 </tr>
</table>

<h3 id="work-distinguished-names">Working with Distinguished Names</h3>

<p>Call the following functions to retrieve a distinguished name
from an entry and to split a distinguished name into its component
parts.</p>

<p>
 <strong>Table 18-7 - Functions to retrieve distinguished names</strong>
</p>

<table class="data">
 <tr>
  <th>Function</th>
  <th>Description</th>
 </tr>
 <tr>
  <td><code><a href="function.htm#get-dn">ldap_get_dn()</a></code></td>
  <td>Get the distinguished name for an entry.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#explode-dn">ldap_explode_dn()</a></code></td>
  <td>Split up a distinguished name into its components.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#explode-rdn">ldap_explode_rdn()</a></code></td>
  <td>Split up a relative distinguished name into its components.</td>
 </tr>
</table>

<h3 id="work-v3-controls">Working with LDAPv3 Controls</h3>

<p>Call the following functions to work with LDAPv3 controls.</p>

<p>
 <strong>Table 18-8 - Functions to work with LDAPv3 controls</strong>
<p>

<table class="data">
 <tr>
  <th>Function</th>
  <th>Description</th>
 </tr>
 <tr>
  <td><code><a href="function.htm#create-persistentsearch-control">ldap_create_persistentsearch_control()</a></code></td>
  <td>
   Create a "persistent search" control to track changes in
   directory entries.
  </td>
 </tr>
 <tr>
  <td>
   <code><a href="function.htm#create-sort-keylist">ldap_create_sort_keylist()</a>,
   <a href="function.htm#create-sort-control">ldap_create_sort_control()</a></code>
  </td>
  <td>
   Create a "sorting" control to return sorted search results from
   the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#create-proxyauth-control">ldap_create_proxyauth_control()</a></code></td>
  <td>
   Create a "proxy authorization" control to allow an entry to act
   as a proxy for an alternate entry.
  </td>
 </tr>
 <tr>
  <td>
   <code class="long"><a href="function.htm#add-ext">ldap_add_ext()</a>,
   <a href="function.htm#add-ext-s">ldap_add_ext_s()</a>,
   <a href="function.htm#compare-ext">ldap_compare_ext()</a>,
   <a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a>,
   <a href="function.htm#delete-ext">ldap_delete_ext()</a>,
   <a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a>,
   <a href="function.htm#extended-operation">ldap_extended_operation()</a>,
   <a href="function.htm#extended-operation-s">ldap_extended_operation_s()</a>,
   <a href="function.htm#modify-ext">ldap_modify_ext()</a>,
   <a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a>,
   <a href="function.htm#rename">ldap_rename()</a>,
   <a href="function.htm#rename-s">ldap_rename_s()</a>,
   <a href="function.htm#sasl-bind">ldap_sasl_bind()</a>,
   <a href="function.htm#sasl-bind-s">ldap_sasl_bind_s()</a>,
   <a href="function.htm#search-ext">ldap_search_ext()</a>,
   <a href="function.htm#search-ext-s">ldap_search_ext_s()</a>,
   <a href="function.htm#abandon-ext">ldap_abandon_ext()</a></code>
  </td>
  <td>Pass LDAP controls to the server.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#parse-result">ldap_parse_result()</a></code></td>
  <td>Parse LDAP server controls from results sent from the server.</td>
 </tr>
 <tr>
  <td>
   <code><a href="function.htm#get-entry-controls">ldap_get_entry_controls()</a>,
   <a href="function.htm#parse-entrychange-control">ldap_parse_entrychange_control()</a></code>
  </td>
  <td>
   Parse an "entry change notification" control from an entry and 
   retrieve information from the control.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#parse-sort-control">ldap_parse_sort_control()</a></code></td>
  <td>Parse "sorting" controls from results sent from the server.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#control-free">ldap_control_free()</a></code></td>
  <td>
   Free the memory allocated for an
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structure.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#controls-free">ldap_controls_free()</a></code></td>
  <td>
   Free the memory allocated for an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structures.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#unbind-ext">ldap_unbind_ext()</a></code></td>
  <td>
   Lets you specifically name a server or client control when
   unbinding from the server.
  </td>
 </tr>
</table>

<h3 id="work-urls">Working with LDAP URLs</h3>

<p>Call the following functions to interpret LDAP URLs.</p>

<p><strong>Table 18-9 - Functions to interpret LDAP URLs</strong></p>

<table class="data">
 <tr>
  <th>Function</th>
  <th>Description</th>
 </tr>
 <tr>
  <td><code><a href="function.htm#is-ldap-url">ldap_is_ldap_url()</a></code></td>
  <td>Determine if a URL is an LDAP URL.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#url-parse">ldap_url_parse()</a></code></td>
  <td>Split up an LDAP URL into its components.</td>
 </tr>
 <tr>
  <td>
   <code class="long"><a href="function.htm#url-search">ldap_url_search()</a>,
   <a href="function.htm#url-search-s">ldap_url_search_s()</a>, or
   <a href="function.htm#url-search-st">ldap_url_search_st()</a></code>
  </td>
  <td>Perform the search specified by an LDAP URL.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#free-urldesc">ldap_free_urldesc()</a></code></td>
  <td>Free the memory allocated for a parsed URL.</td>
 </tr>
</table>

<h3 id="get-attribute-value-language">Getting the Attribute Values for a Particular Language</h3>

<p>Call the following functions to get the values from a particular
language subtype in an attribute.</p>

<p><strong>Table 18-10 - Functions to get language subtypes</strong></p>

<table class="data">
 <tr>
  <th>Function</th>
  <th>Description</th>
 </tr>
 <tr>
  <td>
   <code><a href="function.htm#get-lang-values">ldap_get_lang_values()</a> or
   <a href="function.htm#get-lang-values-len">ldap_get_lang_values_len()</a></code>
  </td>
  <td>Get an attribute's value in a particular language.</td>
 </tr>
</table>

<h3 id="handle-errors">Handling Errors</h3>

<p>Call the following functions to handle errors returned by the
LDAP API functions.</p>

<p><strong>Table 18-11 - Functions for error handling</strong></p>

<table class="data">
 <tr>
  <th>Function</th>
  <th>Description</th>
 </tr>
 <tr>
  <td><code><a href="function.htm#parse-result">ldap_parse_result()</a></code></td>
  <td>Get the error code resulting from an asynchronous LDAP operation.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code></td>
  <td>Get information about the last error that occurred.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#set-lderrno">ldap_set_lderrno()</a></code></td>
  <td>Set information about an error.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#err2string">ldap_err2string()</a></code></td>
  <td>Get the error message for a specific error code.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#ssl-err2string">ldapssl_err2string()</a></code></td>
  <td>Get the error message for a specific SSL error code.</td>
 </tr>
</table>

<h3 id="free-memory">Freeing Memory</h3>

<p>Call the following functions to free memory allocated by the LDAP
API functions.</p>

<p><strong>Table 18-12 - Functions to free memory</strong></p>

<table class="data">
 <tr>
  <th>Function</th>
  <th>Description</th>
 </tr>
 <tr>
  <td><code><a href="function.htm#memfree">ldap_memfree()</a></code></td>
  <td>Free memory allocated by an LDAP API function call.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#mods-free">ldap_mods_free()</a></code></td>
  <td>
   Free the structures allocated for adding or modifying entries in
   the directory.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#msgfree">ldap_msgfree()</a></code></td>
  <td>
   Free the memory allocated for search results or other LDAP
   operation results.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#value-free">ldap_value_free()</a></code></td>
  <td>Free the memory allocated for the string values of an attribute.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#value-free-len">ldap_value_free_len()</a></code></td>
  <td>
   Free the memory allocated for the binary values of an attribute
   (an array of <code><a href="datatype.htm#berval">berval</a></code>
   structures).
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#ber-bvfree">ber_bvfree()</a></code></td>
  <td>
   Free the memory allocated for a
   <code><a href="datatype.htm#berval">berval</a></code> structures.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#getfilter-free">ldap_getfilter_free()</a></code></td>
  <td>Free the filter configuration from memory.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#free-urldesc">ldap_free_urldesc()</a></code></td>
  <td>Free the memory allocated for a parsed URL.</td>
 </tr>
 <tr>
  <td><code><a href="function.htm#ber-free">ber_free()</a></code></td>
  <td>
   Free the memory allocated for a
   <code><a href="datatype.htm#BerElement">BerElement</a></code> structure.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#control-free">ldap_control_free()</a></code></td>
  <td>
   Free the memory allocated for an
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structure
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#controls-free">ldap_controls_free()</a></code></td>
  <td>
   Free the memory allocated for an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures.
  </td>
 </tr>
 <tr>
  <td><code><a href="function.htm#free-sort-keylist">ldap_free_sort_keylist()</a></code></td>
  <td>
   Free the memory allocated for an array of
   <code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code>
   structures.
  </td>
 </tr>
</table>

<h2 id="ber-bvfree">ber_bvfree()</h2>

<p>Frees a <a href="datatype.htm#berval">berval</a> structure from memory.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;lber.h&gt;
void ber_bvfree( struct berval *bv );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-13 - ber_bvfree() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>bv</code></td>
  <td>
   Pointer to the <code><a href="datatype.htm#berval">berval</a></code>
   structure that you want to free from memory.
  </td>
 </tr>
</table>

<p><strong>Description</strong></p>

<p>The <code>ber_bvfree()</code> function frees a
<a href="datatype.htm#berval">berval</a> structure from memory. Call
this function to free <a href="datatype.htm#berval">berval</a>
arguments passed back from the
<code><a href="function.htm#extended-operation-s">ldap_extended_operation_s()</a></code>,
<code><a href="function.htm#parse-extended-result">ldap_parse_extended_result()</a></code>,
<code><a href="function.htm#sasl-bind-s">ldap_sasl_bind_s()</a></code>, and
<code><a href="function.htm#parse-sasl-bind-result">ldap_parse_sasl_bind_result()</a></code>
functions.</p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#extended-operation-s">ldap_extended_operation_s()</a>,
<a href="function.htm#parse-extended-result">ldap_parse_extended_result()</a>,
<a href="function.htm#sasl-bind-s">ldap_sasl_bind_s()</a>,
<a href="function.htm#parse-sasl-bind-result">ldap_parse_sasl_bind_result()</a>.</code></p>

<h2 id="ber-free">ber_free()</h2>

<p>The <code>ber_free()</code> function frees a
<code><a href="datatype.htm#BerElement">BerElement</a></code> structure
from memory. Call this function to free any
<code><a href="datatype.htm#BerElement">BerElement</a></code> structures
that you have allocated.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ber_free( BerElement *ber, int freebuf );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-14 - ber_free() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ber</code></td>
  <td>
   Pointer to the
   <code><a href="datatype.htm#BerElement">BerElement</a></code>
   structure that you want to free.
  </td>
 </tr>
 <tr>
  <td><code>freebuf</code></td>
  <td>
   Specifies whether or not to free the buffer in the
   <code>BerElement</code> structure.
  </td>
 </tr>
</table>

<p><strong>Description</strong></p>

<p>You can call this function to free
<code><a href="datatype.htm#BerElement">BerElement</a></code> structures
allocated by
<code><a href="function.htm#first-attribute">ldap_first_attribute()</a></code>
function calls and by
<code><a href="function.htm#next-attribute">ldap_next_attribute()</a></code>
function calls.</p>

<p>When freeing structures allocated by these functions, you should
specify <code>0</code> for the <code>freebuf</code> argument. (These
functions do not allocate the extra buffer in the
<code><a href="datatype.htm#BerElement">BerElement</a></code> structure.)</p>

<p>For example, to retrieve attributes from a search result entry,
you need to call the
<code><a href="function.htm#first-attribute">ldap_first_attribute()</a></code>
function. Calling this function allocates a
<code><a href="datatype.htm#BerElement">BerElement</a></code> structure,
which is used to keep track of the current attribute. When you are
done working with the attributes, you should free this structure
from memory if the structure still exists.</p>

<p><strong>Example</strong></p>

<p>The following example frees the
<code><a href="datatype.htm#BerElement">BerElement</a></code> structure
allocated by the
<code><a href="function.htm#first-attribute">ldap_first_attribute()</a></code>
function.</p>

<p><strong>Code Example 18-1 - ber_free() code example</strong></p>

<pre class="code">LDAPMessage *a, *e;
BerElement *ber;
...
for ( a = ldap_first_attribute( ld, e, &amp;ber ); a != NULL;
  a =ldap_next_attribute( ld, e, ber ) {
  ...
  /* Retrieve the value of each attribute */
  ...
}

/* Free the BerElement when done */
if ( ber != NULL ) {
  ber_free( ber, 0 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#first-attribute">ldap_first_attribute()</a>,
<a href="function.htm#next-attribute">ldap_next_attribute()</a>.</code></p>

<h2 id="abandon">ldap_abandon()</h2>

<p>Cancels ("abandons") an asynchronous LDAP operation that is
in progress.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP client,
use <code><a href="function.htm#abandon-ext">ldap_abandon_ext()</a></code>
instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_abandon( LDAP *ld, int msgid );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-15 - ldap_abandon() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>msgid</code></td>
  <td>Message ID of an LDAP operation.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  -1 if unsuccessful. The appropriate LDAP error code is also set in
  the <code><a href="datatype.htm#LDAP">LDAP</a></code> structure.
  You can retrieve the error code by calling the
  <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
  function.
  <p></p>
  Some of the possible LDAP result codes for this function include:
  <ul>
   <li>
    <code>LDAP_PARAM_ERROR</code> (if any of the arguments are
    invalid).
   <li>
    <code>LDAP_ENCODING_ERROR</code> (if an error occurred when
    BER-encoding the request).
   <li>
    <code>LDAP_SERVER_DOWN</code> (if the LDAP server did not
    receive the request or if the connection to the server was lost).
   <li><code>LDAP_NO_MEMORY</code> (if memory cannot be allocated).
  </ul>
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_abandon()</code> function cancels ("abandons") an
asynchronous LDAP operation that is in progress.</p>

<p>A newer version of this function,
<code><a href="function.htm#abandon-ext">ldap_abandon_ext()</a></code>, is
available in this release of the LDAP API.
<code>ldap_abandon()</code> (the older version of the function) is
included only for backward-compatibility. If you are writing a new
LDAP client, use
<code><a href="function.htm#abandon-ext">ldap_abandon_ext()</a></code>
instead of <code>ldap_abandon()</code>.</p>

<p>If you want more information on <code>ldap_abandon()</code>,
refer to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following example cancels an
<code><a href="function.htm#url-search">ldap_url_search()</a></code>
operation, abandoning the results of the operation.</p>

<p>
 <strong>Code Example 18-2 - Canceling an ldap_url_search() operation</strong>
</p>

<pre class="example code">LDAP *ld;
char *url = "ldap://ldap.itd.umich.edu/c=US?o,description? one?o=umich";
int msgid;
...
/* Initiate a search operation */
msgid = ldap_url_search( ld, url, 0 );
...
/* Abandon the search operation */
if ( ldap_abandon( ld, msgid ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_abandon" );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#abandon-ext">ldap_abandon_ext()</a></code>.</p>

<h2 id="abandon-ext">ldap_abandon_ext()</h2>

<p>Cancels ("abandons") an asynchronous LDAP operation that is in
progress. For example, you can cancel an LDAP search operation that
you started with
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code>.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_abandon_ext( LDAP *ld, int msgid,
  LDAPControl **serverctrls, LDAPControl **clientctrls );</pre>

<p><strong>Parameters</strong></p>
<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-16 - ldap_abandon_ext() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>msgid</code></td>
  <td>Message ID of the LDAP operation that you want to cancel.</td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP client controls that apply to this
   LDAP operation. If you do not want to pass any client controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_abandon()</code> function cancels ("abandons") an
asynchronous LDAP operation that is in progress. For example, if you
called <code><a href="function.htm#search-ext">ldap_search_ext()</a></code>
to initiate an LDAP search operation on the server, you can call
<code>ldap_abandon_ext()</code> to cancel the LDAP search operation.</p>

<p>This function is a new version of the
<code><a href="function.htm#abandon">ldap_abandon()</a></code>
function. If you are writing a new LDAP client, you should call this
function instead of
<code><a href="function.htm#abandon">ldap_abandon()</a></code>.</p>

<p>When you call this function, your LDAP client sends a request to
cancel an operation being processed by the LDAP server. To identify
the operation to be cancelled, specify the message ID of the
operation in the <code>msgid</code> argument.</p>

<p>(When you call an asynchronous function such as
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code> and
<code><a href="function.htm#modify-ext">ldap_modify_ext()</a></code>, the
<code>msgidp</code> argument of the function returns a pointer to a
message ID that identifies the operation. For example, when you call
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code> to
start an LDAP search operation on the server, the <code>msgidp</code>
argument returns a pointer to a message ID identifying that LDAP
search operation.)</p>

<p>When you call <code>ldap_abandon_ext()</code>, the function
checks to see if the results of the operation have already been
returned. If so, <code>ldap_abandon_ext()</code> deletes the message
ID from the queue of pending messages. If the results have not been
returned, <code>ldap_abandon_ext()</code> sends a request to abandon
the operation on the LDAP server.</p>

<p>Once you cancel an operation, results of the operation will not
be returned, even if you subsequently call
<code><a href="function.htm#result">ldap_result()</a></code> to try
to get the results.</p>

<p>For more information, see <a href="using.htm#cancel_operation_progress">"Canceling an
Operation in Progress."</a></p>

<p><strong>Example</strong></p>

<p>The following example cancels an
<code><a href="function.htm#url-search">ldap_url_search()</a></code>
operation, abandoning the results of the operation.</p>

<p>
 <strong>Code Example 18-3 - ldap_abandon_ext() code example</strong>
</p>

<pre class="code">char *url = "ldap://ldap.itd.umich.edu/c=US?o,description?one?o=umich";
int msgid;
LDAPControl **srvrctrls, **clntctrls;
...
/* Initiate a search operation */
msgid = ldap_url_search( ld, url, 0 );
...
/* Abandon the search operation */
if ( ldap_abandon_ext( ld, msgid, srvrctrls, clntctrls )
    != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_abandon" );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#add-ext">ldap_add_ext()</a>,
<a href="function.htm#compare-ext">ldap_compare_ext()</a>,
<a href="function.htm#delete-ext">ldap_delete_ext()</a>,
<a href="function.htm#extended-operation">ldap_extended_operation()</a>,
<a href="function.htm#modify-ext">ldap_modify_ext()</a>,
<a href="function.htm#rename">ldap_rename()</a>,
<a href="function.htm#sasl-bind">ldap_sasl_bind()</a>,
<a href="function.htm#search-ext">ldap_search_ext()</a>,
<a href="function.htm#simple-bind">ldap_simple_bind()</a>,
<a href="function.htm#url-search">ldap_url_search()</a>.</code></p>

<h2 id="add">ldap_add()</h2>

<p>Adds a new entry to the directory asynchronously.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP
client, use
<code><a href="function.htm#add-ext">ldap_add_ext()</a></code> instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_add( LDAP *ld, const char *dn, LDAPMod **attrs );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-17 - ldap_add() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>
   Distinguished name (DN) of the entry to add. With the exception
   of the leftmost component, all components of the distinguished
   name (for example, <code>o=organization or c=country</code>) must
   already exist.
  </td>
 </tr>
 <tr>
  <td><code>attrs</code></td>
  <td>
   Pointer to a <code>NULL</code>-terminated array of pointers to
   <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures
   representing the attributes of the new entry.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>The message ID of the <code>ldap_add()</code> operation. To check
the result of this operation, call
<code><a href="function.htm#result">ldap_result()</a></code> and
<code><a href="function.htm#result2error">ldap_result2error()</a></code>.
See the result code documentation for the
<code><a href="function.htm#add-ext-s">ldap_add_ext_s()</a></code>
function for a list of possible result codes for the LDAP add
operation.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_add()</code> function adds a new entry to the
directory asynchronously.</p>

<p>A newer version of this function,
<code><a href="function.htm#add-ext">ldap_add_ext()</a></code>, is
available in this release of the LDAP API. <code>ldap_add()</code>
(the older version of the function) is included only for
backward-compatibility. If you are writing a new LDAP client, use
<code><a href="function.htm#add-ext">ldap_add_ext()</a></code> instead
of <code>ldap_add()</code>.</p>

<p>If you want more information on <code>ldap_add()</code>, refer to
the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following example adds a new entry to the directory.</p>

<p>
 <strong>Code Example 18-4 - ldap_add() code example</strong>
</p>

<pre class="code">...
LDAP *ld;
LDAPMod *list_of_attrs[4];
LDAPMod attribute1, attribute2, attribute3;
LDAPMessage *result;
int msgid, rc;
struct timeval tv;

/* Distinguished name of the new entry. Note that "dc=example,dc=com" and
"ou=People, dc=example,dc=com" must already exist in the directory. */
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";

/* To add a "person" entry, you must specify values for the sn, cn, and
objectClass attributes. (These are required attributes.) */
char *sn_values[] = { "Jensen", NULL };

/* To specify multiple values for an attribute, add the different values to the array. */
char *cn_values[] = { "Barbara Jensen", "Babs Jensen", NULL };

/* The object class for a "person" entry is "inetOrgPerson", which is a
subclass of "top", "person", and "organizationalPerson". You should add all of
these classes as values of the objectClass attribute. */
char *objectClass_values[] = { "top", "person", "organizationalPerson",
"inetOrgPerson", NULL };
...
/* Specify the value and type of each attribute in separate LDAPMod structures
*/
attribute1.mod_type = "sn";
attribute1.mod_values = sn_values;
attribute2.mod_type = "cn";
attribute2.mod_values = cn_values;
attribute3.mod_type = "objectClass";
attribute3.mod_values = objectClass_values;

/* Add the pointers to these LDAPMod structures to an array */
list_of_attrs[0] = &amp;attribute1;
list_of_attrs[1] = &amp;attribute2;
list_of_attrs[2] = &amp;attribute3;
list_of_attrs[3] = NULL;
...
/* Set up the timeout period for adding the new entry */
tv.tv_sec = tv.tv_usec = 0;

/* Add the user "Barbara Jensen" */
if ( ( msgid = ldap_add( ld, dn, list_of_attrs ) ) == -1 ) {
  ldap_perror( ld, "ldap_add" );
  return( 1 );
}

/* Check to see if the operation has completed */
while ( ( rc = ldap_result( ld, msgid, 0, &amp;tv, &amp;result ) ) == 0 ) {
  ...
  /* do other work while waiting for the operation to complete */
  ...
}

/* Check the result to see if any errors occurred */
if (( rc = ldap_result2error( ld, result, 1 )) != LDAP_SUCCESS ) {
  printf( "Error while adding entry: %s\n", ldap_err2string( rc ));
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#add-ext">ldap_add_ext()</a>.</code></p>

<h2 id="add-ext">ldap_add_ext()</h2>

<p>Adds a new entry to the directory asynchronously.</p>

<p><strong>Syntax</strong></p>
<pre>#include &lt;ldap.h&gt;
int ldap_add_ext( LDAP *ld, const char *dn, LDAPMod **attrs,
  LDAPControl **serverctrls, LDAPControl **clientctrls,
  int *msgidp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-18 - ldap_add_ext() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>
   Distinguished name (DN) of the entry to add. With the exception
   of the leftmost component, all components of the distinguished
   name (for example, <code>o=organization or c=country</code>) must
   already exist.
  </td>
 </tr>
 <tr>
  <td><code>attrs</code></td>
  <td>
   Pointer to a <code>NULL</code>-terminated array of pointers to
   <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures
   representing the attributes of the new entry.
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP client controls that apply to this
   LDAP operation. If you do not want to pass any client controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>msgidp</code></td>
  <td>
   Pointer to an integer that will be set to the message ID of the
   LDAP operation. To check the result of this operation, call
   <code><a href="function.htm#result">ldap_result()</a></code> and
   <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
   functions.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your
  request (for example, as a session preference) and your LDAP
  client does not specify that it is using the LDAPv3 protocol. Make
  sure that you set the version of your LDAP client to version 3
  before calling this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_add_ext()</code> adds a new entry to the directory
asynchronously.</p>

<p>This function is a new version of the
<code><a href="function.htm#add">ldap_add()</a></code> function.
If you are writing a new LDAP client, you should call this function
instead of <code><a href="function.htm#add">ldap_add()</a></code>.</p>

<p>To add a new entry to the directory, you need to specify the
following information:</p>

<ul>
 <li>
  A unique DN identifying the new entry.
  <p></p>
  Use the <code>dn</code> argument to specify the DN of the new
  entry. Note that the parents of the entry should already exist.
  For example, if you are adding the entry
  <code>uid=bjensen, ou=People, dc=example,dc=com</code>, the
  entries <code>ou=People, dc=example,dc=com</code> and
  <code>dc=example,dc=com</code> should already exist in the
  directory.
 <li>
  A set of attributes for the new entry.
  <p></p>
  Create an <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code>
  structure for each attribute. Set the <code>mod_op</code> field to
  0 if the attribute values are string values. To specify values
  that consist of binary data (such as a sound file or a JPEG file),
  set the <code>mod_op</code> field to <code>LDAP_MOD_BVALUES</code>.
  <p></p>
  Create an array of these
  <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures
  and pass the array as the <code>attrs</code> argument.
</ul>

<p><code>ldap_add_ext()</code> is an asynchronous function; it does
not directly return results. If you want the results to be returned
directly by the function, call the synchronous function
<code><a href="function.htm#add-ext-s">ldap_add_ext_s()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>In order to get the results of the LDAP add operation, you need
to call the
<code><a href="function.htm#result">ldap_result()</a></code> function
and the
<code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
function. (See <a href="using.htm#call_async_function">"Calling Asynchronous
Functions"</a> for details.) For a list of possible result codes for
an LDAP add operation, see the result code documentation for the
<code><a href="function.htm#add-ext-s">ldap_add_ext_s()</a></code>
function.</p>
<p>For additional information on adding new entries to the
directory, see <a href="addmod.htm#add-new-entry">"Adding a New Entry."</a></p>

<p><strong>Example</strong></p>

<p>See the example under <a href="addmod.htm#example-add-entry-directory-async">"Example: Adding
an Entry to the Directory (Asynchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#add-ext-s">ldap_add_ext_s()</a>,
<a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#parse-result">ldap_parse_result()</a>,
<a href="datatype.htm#LDAPMod">LDAPMod</a>.</code></p>

<h2 id="add-ext-s">ldap_add_ext_s()</h2>

<p>Adds a new entry to the directory synchronously.</p>

<p><strong>Syntax</strong></p>
<pre>#include &lt;ldap.h&gt;
int ldap_add_ext_s( LDAP *ld, const char *dn, LDAPMod **attrs,
  LDAPControl **serverctrls, LDAPControl **clientctrls );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-19 - ldap_add_ext_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>
   Distinguished name (DN) of the entry to add. With the exception
   of the leftmost component, all components of the distinguished
   name (for example, o=<code> or c=country</code>) must already
   exist.
  </td>
 </tr>
 <tr>
  <td><code>attrs</code></td>
  <td>
   Pointer to a NULL-terminated array of pointers to
   <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures
   representing the attributes of the new entry.
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP client controls that apply to this
   LDAP operation. If you do not want to pass any client controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>
<ul>

 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_LOCAL_ERROR</code> if an error occurred when receiving
  the results from the server.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when
  decoding the BER-encoded results from the server.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your
  request (for example, as a session preference) and your LDAP
  client does not specify that it is using the LDAPv3 protocol. Make
  sure that you set the version of your LDAP client to version 3
  before calling this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP 
  Version of Your Client."</a>)
</ul>

<p>The following result codes can be returned by the Netscape
Directory Server when processing an LDAP add request. Other LDAP
servers may send these result codes under different circumstances or
may send different result codes back to your LDAP client.</p>

<ul>
 <li>
  <code>LDAP_OPERATIONS_ERROR</code> may be sent by the Netscape
  Directory Server for general errors encountered by the server when
  processing the request.
 <li>
  <code>LDAP_PROTOCOL_ERROR</code> if the add request sent by this
  function did not comply with the LDAP protocol (for example, if
  the server encountered an error when decoding your client's
  BER-encoded request).
 <li>
  <code>LDAP_CONSTRAINT_VIOLATION</code> may be sent by the Netscape
  Directory Server if the server is configured to require a minimum
  password length and the new entry includes a value for the
  <code>userpassword</code> attribute that is shorter than the
  minimum length.
  <p></p>
  The server may also send this result code if the value of the
  <code>userpassword</code> attribute is the same as the value of
  the <code>uid</code>, <code>cn</code>, <code>sn</code>,
  <code>givenname</code>, <code>ou</code>, or <code>mail</code>
  attributes. (Using a password that is the same as your user id or
  email address would make the password trivial and easy to crack.)
 <li>
  <code>LDAP_TYPE_OR_VALUE_EXISTS</code> may be sent by the Netscape
  Directory Server if the set of attributes specified by the
  <code>attrs</code> argument includes duplicate attribute values.
 <li>
  <code>LDAP_INVALID_DN_SYNTAX</code> may be sent by the Netscape
  Directory Server if the DN specified by the <code>dn</code>
  argument is not a valid DN.
 <li>
  <code>LDAP_ALREADY_EXISTS</code> may be sent by the Netscape
  Directory Server if the DN specified by the <code>dn</code>
  argument identifies an entry already in the directory.
 <li>
  <code>LDAP_OBJECT_CLASS_VIOLATION</code> may be sent by the
  Netscape Directory Server if the new entry does not comply with
  the Directory Server schema (for example, if one or more required
  attributes are not specified).
 <li>
  <code>LDAP_NO_SUCH_OBJECT</code> may be sent by the Netscape
  Directory Server if the parent of the entry does not exist and if
  you are not authenticated as the root DN (for example, if you
  attempt to add
  <code>uid=bjensen, ou=People, dc=example,dc=com</code> and if
  <code>ou=People, dc=example,dc=com</code> does not exist).
  <p></p>
  This result code may also be sent if the DN of the new entry has a
  suffix that is not handled by the current server and no referral
  URLs are available.
 <li>
  <code>LDAP_REFERRAL</code> may be sent by the Netscape Directory
  Server if the DN specified by the <code>dn</code> argument
  identifies an entry not handled by the current server and if
  referral URLs identify a different server to handle the entry.
  (For example, if the DN is
  <code>uid=bjensen, ou=European Sales, dc=example,dc=com</code>,
  all entries under <code>ou=European Sales</code> might be handled
  by a different Directory Server.)
 <li>
  <code>LDAP_UNWILLING_TO_PERFORM</code> may be sent by the Netscape
  Directory Server if the server's database is set up to not allow
  write operations to the database (the database is read-only).
 <li>
  <code>LDAP_INVALID_SYNTAX</code> may be sent by the Netscape
  Directory Server if the entry or the entry's parent has an
  invalid ACL.
 <li>
  <code>LDAP_INSUFFICIENT_ACCESS</code> may be sent by the Netscape
  Directory Server in the following situations:
  <ul>
   <li>The ACL for the entry's parent does not allow you to add the entry.
   <li>The entry's parent has no ACL.
   <li>
    The entry has no parent and your client is not authenticated as
    the root DN.
  </ul>
</ul>

<p>Note that the Directory Server may send other result codes in
addition to the codes described here (for example, the server may
have loaded a custom plug-in that returns other result codes).</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_add_ext_s()</code> function adds a new entry to
the directory synchronously.</p>

<p>This function is a new version of the
<code><a href="function.htm#add-s">ldap_add_s()</a></code> function.
If you are writing a new LDAP client, you should call this function
instead of <code><a href="function.htm#add-s">ldap_add_s()</a></code>.</p>

<p>To add a new entry to the directory, you need to specify the
following information:</p>

<ul>
 <li>
  A unique DN identifying the new entry.
  <p></p>
  Use the <code>dn</code> argument to specify the DN of the new
  entry. Note that the parents of the entry should already exist.
  For example, if you are adding the entry
  <code>uid=bjensen, ou=People, dc=example,dc=com</code>, the
  entries <code>ou=People, dc=example,dc=com</code> and
  <code>dc=example,dc=com</code> should already exist in the
  directory.
 <li>
  A set of attributes for the new entry.
  <p></p>
  Create an <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code>
  structure for each attribute. Set the <code>mod_op</code> field to
  <code>0</code> if the attribute values are string values. To
  specify values that consist of binary data (such as a sound file
  or a JPEG file), set the <code>mod_op</code> field to
  <code>LDAP_MOD_BVALUES</code>.
  <p></p>
  Create an array of these
  <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures
  and pass the array as the <code>attrs</code> argument.
</ul>

<p><code>ldap_add_ext_s()</code> is a synchronous function, which
directly returns the results of the operation. If you want to
perform other operations while waiting for the results of this
operation, call the asynchronous function
<code><a href="function.htm#add-ext">ldap_add_ext()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>For additional information on adding new entries to the
directory, see <a href="addmod.htm#add-new-entry">"Adding a New Entry."</a></p>

<p><strong>Example</strong></p>

<p>See the example under <a href="addmod.htm#example-add-entry-directory-sync">"Example: 
Adding an Entry to the Directory (Synchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#add-ext">ldap_add_ext()</a>,
<a href="datatype.htm#LDAPMod">LDAPMod</a>.</code></p>

<h2 id="add-s">ldap_add_s()</h2>

<p>Adds a new entry to the directory synchronously.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP client,
use <code><a href="function.htm#add-ext-s">ldap_add_ext_s()</a></code>
instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_add_s( LDAP *ld, const char *dn, LDAPMod **attrs );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-20 - ldap_add_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>
   Distinguished name (DN) of the entry to add. With the exception
   of the leftmost component, all components of the distinguished
   name (for example, o=<code>organization or c=>country</code>)
   must already exist.
  </td>
 </tr>
 <tr>
  <td><code>attrs</code></td>
  <td>
   Pointer to a <code>NULL</code>-terminated array of pointers to
   <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures
   representing the attributes of the new entry.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>See the result code documentation for the
<code><a href="function.htm#add-ext-s">ldap_add_ext_s()</a></code>
function for a list of possible return codes for the LDAP add
operation.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_add_s()</code> function adds a new entry to the
directory synchronously.</p>

<p>A newer version of this function,
<code><a href="function.htm#add-ext-s">ldap_add_ext_s()</a></code>, is
available in this release of the LDAP API. <code>ldap_add_s()</code>
(the older version of the function) is included only for
backward-compatibility. If you are writing a new LDAP client, use
<code><a href="function.htm#add-ext-s">ldap_add_ext_s()</a></code>
instead of <code>ldap_add_s()</code>.</p>

<p>If you want more information on <code>ldap_add_s()</code>, refer
to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following example adds a new entry to the directory.</p>

<p>
 <strong>Code Example 18-5 - ldap_add_s code example</strong>
</p>

<pre class="code">...
LDAP *ld;
LDAPMod *list_of_attrs[4];
LDAPMod attribute1, attribute2, attribute3;

/* Distinguished name of the new entry. Note that "dc=example,dc=com" and
   "ou=People, dc=example,dc=com" must already exist in the directory. */
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";

/* To add a "person" entry, you must specify values for the sn, cn, and
   objectClass attributes. (These are required attributes.) */
char *sn_values[] = { "Jensen", NULL };

/* To specify multiple values for an attribute, add the different values to the array. */
char *cn_values[] = { "Barbara Jensen", "Babs Jensen", NULL };

/* The object class for a "person" entry is "inetOrgPerson", which is a
   subclass of "top", "person", and "organizationalPerson". You should add
   all of these classes as values of the objectClass attribute. */
char *objectClass_values[] = { "top", "person", "organizationalPerson", "inetOrgPerson", NULL };
...
/* Specify the value and type of each attribute in separate LDAPMod structures */
attribute1.mod_type = "sn";
attribute1.mod_values = sn_values;
attribute2.mod_type = "cn";
attribute2.mod_values = cn_values;
attribute3.mod_type = "objectClass";
attribute3.mod_values = objectClass_values;

/* Add the pointers to these LDAPMod structures to an array */
list_of_attrs[0] = &amp;attribute1;
list_of_attrs[1] = &amp;attribute2;
list_of_attrs[2] = &amp;attribute3;
list_of_attrs[3] = NULL;
...
/* Add the user "Barbara Jensen" */
if ( ldap_add_s( ld, dn, list_of_attrs ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_add_s" );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#add-ext-s">ldap_add_ext_s()</a>.</code></p>

<h2 id="ldap-ber-free">ldap_ber_free() </h2>

<p>This function is documented here only for backward compatibility;
you should use the
<code><a href="function.htm#ber-free">ber_free()</a></code> function
in its place since this function will be phased out over time.
Except in name, the function <code>ldap_ber_free()</code> is
idendical to <code>ber_free()</code>.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_ber_free( BerElement *ber, int freebuf );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-21 - ldap_ber_free() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ber</code></td>
  <td>
   Pointer to the
   <code><a href="datatype.htm#BerElement">BerElement</a></code> structure
   that you want to free.
  </td>
 </tr>
 <tr>
  <td><code>freebuf</code></td>
  <td>
   Specifies whether or not to free the buffer in the
   <code>BerElement</code> structure.
  </td>
 </tr>
</table>

<h2 id="build-filter">ldap_build_filter()</h2>

<p>The <code>ldap_build_filter()</code> function is a deprecated
function. Use the
<code><a href="function.htm#create-filter">ldap_create_filter()</a></code>
function instead.</p>

<h2 id="compare">ldap_compare()</h2>

<p>Asynchronously determines if an attribute of an entry contains a
specified value.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP
client, use
<code><a href="function.htm#compare-ext">ldap_compare_ext()</a></code>
instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_compare( LDAP *ld, const char *dn, const char *attr,
  const char *value );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-22 - ldap_compare() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <a href="datatype.htm#LDAP">LDAP</a> structure containing
   information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry used in the comparison.</td>
 </tr>
 <tr>
  <td><code>attr</code></td>
  <td>Attribute type that you want to check the value against.</td>
 </tr>
 <tr>
  <td><code>value</code></td>
  <td>Value that you want to compare against the attribute values.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>Returns the message ID of the <code>ldap_compare()</code>
operation. To check the result of this operation, call
<code><a href="function.htm#result">ldap_result()</a></code> and
<code><a href="function.htm#result2error">ldap_result2error()</a></code>.
For a list of possible return codes for the LDAP compare operation,
see the result code documentation for the
<code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code>
function.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_compare()</code> function compares a value with
the value of an attribute in an entry.</p>

<p>A newer version of this function,
<code><a href="function.htm#compare-ext">ldap_compare_ext()</a></code>, is
available in this release of the LDAP API. <code>ldap_compare()</code>
(the older version of the function) is included only for
backward-compatibility. If you are writing a new LDAP client, use
<code><a href="function.htm#compare-ext">ldap_compare_ext()</a></code>
instead of <code>ldap_compare()</code>.</p>

<p>If you want more information on <code>ldap_compare()</code>,
refer to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following section of code checks to see if Barbara Jensen has
the e-mail address "<code>bjensen@example.com</code>".</p>

<p>
 <strong>Code Example 18-6 - Using ldap_compare()</strong>
</p>

<pre class="code">>#include &lt;stdio.h&gt;
#include &lt;ldap.h&gt;
...
LDAP *ld;
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";
int msgid;
...
msg_id = ldap_compare( ld, dn, "mail", "bjensen@example.com" );
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#compare-ext">ldap_compare_ext()</a></code></p>

<h2 id="compare-ext">ldap_compare_ext()</h2>

<p>Asynchronously determines if an attribute of an entry contains a
specified value.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_compare_ext( LDAP *ld, const char *dn,
  const char *attr, struct berval *bvalue,
  LDAPControl **serverctrls, LDAPControl **clientctrls,
  int *msgidp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-23 - ldap_compare_ext() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>Connection handle, which is a pointer to an 
  <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
  containing information about the connection to the LDAP server.
 </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry used in the comparison.</td>
 </tr>
 <tr>
  <td><code>attr</code></td>
  <td>Attribute type that you want to check the value against.</td>
 </tr>
 <tr>
  <td><code>value</code></td>
  <td>Value that you want to compare against the attribute values.</td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of
    <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
    structures representing LDAP client controls that apply to this
    LDAP operation. If you do not want to pass any client controls,
    specify <code>NULL</code> for this argument.
   </td>
 </tr>
 <tr>
  <td><code>msgidp</code></td>
  <td>
   Pointer to an integer that will be set to the message ID of the
   LDAP operation. To check the result of this operation, call the
   <code><a href="function.htm#result">ldap_result()</a></code> and
   <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
   functions.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your
  request (for example, as a session preference) and your LDAP
  client does not specify that it is using the LDAPv3 protocol. Make
  sure that you set the version of your LDAP client to version 3
  before calling this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_compare_ext()</code> function asynchronously
compares the value of an attribute in an entry against a specified
value.</p>

<p>This function is a new version of the
<code><a href="function.htm#compare">ldap_compare()</a></code>
function. If you are writing a new LDAP client, you should call this
function instead of
<code><a href="function.htm#compare">ldap_compare()</a></code>.</p>

<p><code>ldap_compare_ext()</code> is an asynchronous function; it
does not directly return results. If you want the results to be
returned directly by the function, call the synchronous function
<code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>In order to get the results of the LDAP compare operation, you
need to call the
<code><a href="function.htm#result">ldap_result()</a></code> function
and the <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
function. (See <a href="using.htm#call_async_function">"Calling Asynchronous
Functions"</a> for details.) For a list of possible result codes for
an LDAP compare operation, see the result code documentation for the
<code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code>
function.</p>

<p>For additional information on comparing attribute values in an
entry, see <a href="compare.htm#compare_value_attribute">"Comparing the Value of an
Attribute."</a></p>

<p><strong>Example</strong></p>

<p>See the example under <a href="compare.htm#example_compare_async">"Example:
Comparing a Value in an Entry (Asynchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a>,
<a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#parse-result">ldap_parse_result()</a>.</code></p>

<h2 id="compare-ext-s">ldap_compare_ext_s()</h2>

<p>Synchronously determines if an attribute of an entry contains a
specified value.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_compare_ext_s( LDAP *ld, const char *dn,
  const char *attr, struct berval *bvalue,
  LDAPControl **serverctrls, LDAPControl **clientctrls );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-24 - ldap_compare_ext_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry used in the comparison.</td>
 </tr>
 <tr>
  <td><code>attr</code></td>
  <td>Attribute type that you want to check the value against.</td>
 </tr>
 <tr>
  <td><code>value</code></td>
  <td>Value that you want to compare against the attribute values.</td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP client controls that apply to this
   LDAP operation. If you do not want to pass any client controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  <code>LDAP_COMPARE_TRUE</code> if the entry contains the
  attribute value.
 <li>
  <code>LDAP_COMPARE_FALSE</code> if the entry does not contain the
  attribute value.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_LOCAL_ERROR</code> if an error occurred when receiving
  the results from the server.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when
  decoding the BER-encoded results from the server.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your
  request (for example, as a session preference) and your LDAP
  client does not specify that it is using the LDAPv3 protocol. Make
  sure that you set the version of your LDAP client to version 3
  before calling this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
</ul>

<p>The following result codes can be returned by the Netscape
Directory Server when processing an LDAP compare request. Other LDAP
servers may send these result codes under different circumstances or
may send different result codes back to your LDAP client.</p>

<ul>
 <li>
  <code>LDAP_OPERATIONS_ERROR</code> may be sent by the Netscape
   Directory Server for general errors encountered by the server
   when processing the request.
 <li>
  <code>LDAP_PROTOCOL_ERROR</code> if the compare request sent by
  this function did not comply with the LDAP protocol (for example,
  if the server encountered an error when decoding your client's
  BER-encoded request).
 <li>
  <code>LDAP_NO_SUCH_OBJECT</code> may be sent by the Netscape
  Directory Server if the specified entry has a suffix that is not
  handled by the current server and no referral URLs are available.
 <li>
  <code>LDAP_REFERRAL</code> may be sent by the Netscape Directory
  Server if the DN specified by the <code>dn</code> argument
  identifies an entry not handled by the current server and if
  referral URLs identify a different server to handle the entry. (For
  example, if the DN is
  <code>uid=bjensen, ou=European Sales, dc=example,dc=com</code>, all
  entries under <code>ou=European Sales</code> might be handled by a
  different Directory Server.)
 <li>
  <code>LDAP_INSUFFICIENT_ACCESS</code> may be sent by the Netscape
  Directory Server if your client does not have the access right to
  compare this entry.
 <li>
  <code>LDAP_INVALID_SYNTAX</code> may be sent by the Netscape
  Directory Server if the entry or the entry's parent has an invalid
  ACL.
 <li>
  <code>LDAP_NO_SUCH_ATTRIBUTE</code> may be sent by the Netscape
  Directory Server if the entry does not contain the attribute
  specified by the <code>attr</code> argument.
</ul>

<p>Note that the Netscape Directory Server may send other result 
codes in addition to the codes described here (for example, the 
server may have loaded a custom plug-in that returns other result 
codes).</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_compare_ext_s()</code> function synchronously
compares the value of an attribute in an entry against a specified
value.</p>

<p>This function is a new version of the
<code><a href="function.htm#compare-s">ldap_compare_s()</a></code>
function. If you are writing a new LDAP client, you should call this
function instead of
<code><a href="function.htm#compare-s">ldap_compare_s()</a></code>.</p>

<p><code>ldap_compare_ext_s()</code> is a synchronous function,
which directly returns the results of the operation. If you want to
perform other operations while waiting for the results of this
operation, call the asynchronous function
<code><a href="function.htm#compare-ext">ldap_compare_ext()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>For additional information on comparing attribute values in an
entry, see <a href="compare.htm#compare_value_attribute">"Comparing the Value of an
Attribute."</a></p>

<p><strong>Example</strong></p>

<p>See the example under <a href="compare.htm#example_compare_sync">"Example:
Comparing a Value in an Entry (Synchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#compare-ext">ldap_compare_ext()</a></code>.</p>

<h2 id="compare-s">ldap_compare_s()</h2>

<p>Synchronously determines if an attribute of an entry contains a
specified value.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP client,
use <code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code>
instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_compare_s( LDAP *ld, const char *dn,
  const char *attr, const char *value );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-25 - ldap_compare_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry used in the comparison.</td>
 </tr>
 <tr>
  <td><code>attr</code></td>
  <td>Attribute type that you want to check the value against.</td>
 </tr>
 <tr>
  <td><code>value</code></td>
  <td>Value that you want to compare against the attribute values.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>For a list of the possible result codes for an LDAP compare
operation, see the result code documentation for the
<code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code>
function.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_compare_s()</code> function compares a value with
the value of an attribute in an entry.</p>

<p>A newer version of this function,
<code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code>,
is available in this release of the LDAP API.
<code>ldap_compare_s()</code> (the older version of the function) is
included only for backward-compatibility. If you are writing a new
LDAP client, use
<code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code>
instead of <code>ldap_compare_s()</code>.</p>

<p>If you want more information on <code>ldap_compare_s()</code>,
refer to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following section of code checks to see if Barbara Jensen has
the e-mail address "<code>bjensen@example.com</code>".</p>

<p>
 <strong>Code Example 18-7 - ldap_compare_s() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
LDAP *ld;
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";
int has_value;
...
has_value = ldap_compare_s( ld, dn, "mail", "bjensen@example.com" );
switch ( has_value ) {
  case LDAP_COMPARE_TRUE:
    printf( "The mail attribute contains bjensen@example.com.\n");
    break;
  case LDAP_COMPARE_FALSE:
    printf( "The mail attribute does not contain bjensen@example.com.\n");
    break;
  default:
    ldap_perror( ld, "ldap_compare_s" );
    return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a>.</code></p>

<h2 id="control-free">ldap_control_free()</h2>

<p>Frees an <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
structure from memory.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_control_free( LDAPControl *ctrl );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-26 - ldap_control_free() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ctrl</code></td>
  <td>
   Pointer to an
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structure that you want to free from memory.
  </td>
 </tr>
</table>

<p><strong>Description</strong></p>

<p>The <code>ldap_control_free()</code> function frees an
<code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structure
from memory.</p>

<p>You should call this function to free controls that you create
(for example, if you call the
<code><a href="function.htm#create-sort-control">ldap_create_sort_control()</a></code>
function).</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#controls-free">ldap_controls_free()</a>.</code></p>

<h2 id="controls-free">ldap_controls_free()</h2>

<p>Frees an array of
<code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structures
from memory.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_controls_free( LDAPControl **ctrls );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-27 - ldap_controls_free() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures that you want to free from memory.
  </td>
 </tr>
</table>

<p><strong>Description</strong></p>

<p>The <code>ldap_controls_free()</code> function frees an array of
<code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structures
from memory.</p>

<p>You should call this function to free arrays of controls that you
create or any arrays returned by
<code><a href="function.htm#parse-result">ldap_parse_result()</a></code>.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#control-free">ldap_control_free()</a>.</code></p>

<h2 id="count-entries">ldap_count_entries()</h2>

<p>Returns the number of
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structures
representing directory entries in a chain of search results.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_count_entries( LDAP *ld, LDAPMessage *result );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-28 - ldap_count_entries() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>result</code></td>
  <td>
   Chain of search results, represented by the pointer to an
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  The number of
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
  structures of the type <code>LDAP_RES_SEARCH_ENTRY</code> in a
  chain of search results, if successful. (If there are no structures
  of this type, returns <code>0</code>.)
 <li>-1 if <code>ld</code> is not a valid connection handle.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_count_entries()</code> function returns the number
of <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
structures representing directory entries in a chain of search
results. These messages have the type
<code>LDAP_RES_SEARCH_ENTRY</code>.</p>

<p>Note that if you pass in a pointer to an
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
in the middle of the chain of results, the function counts only the
entries between that structure and the last structure in the chain.
In this type of situation, the function does not return the count of
all entries in the chain.</p>

<p>For more information on using this function, see
<a href="search.htm#c6-iterating-through-a-chain-of-results">"Iterating 
Through a Chain of Results."</a></p>

<p><strong>Example</strong></p>

<p>See the examples under
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code> and
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>.</p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#search-ext">ldap_search_ext()</a>,
<a href="function.htm#search-ext-s">ldap_search_ext_s()</a>,
<a href="function.htm#first-entry">ldap_first_entry()</a>,
<a href="function.htm#next-entry">ldap_next_entry()</a>,
<a href="function.htm#first-message">ldap_first_message()</a>,
<a href="function.htm#next-message">ldap_next_message()</a>.</code></p>

<h2 id="count-messages">ldap_count_messages()</h2>

<p>Returns the number of
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structures
in a chain of search results.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_count_messages( LDAP *ld, LDAPMessage *res );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-29 - ldap_count_messages() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>result</code></td>
  <td>
   Chain of search results, represented by the pointer to an
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  The number of
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
  structures in a chain of search results, if successful. (If there
  are no structures, returns <code>0</code>.)
 <li><code>-1</code> if <code>ld</code> is not a valid connection handle.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_count_messages()</code> function returns the
number of <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
structures in a chain of search results.</p>

<p>Note that if you pass in a pointer to an
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
in the middle of the chain of results, the function counts only
between that structure and the last structure in the chain. In this
type of situation, the function does not return the count of all
structures in the chain.</p>

<p>For more information on using this function, see
<a href="search.htm#c6-iterating-through-a-chain-of-results">"Iterating 
Through a Chain of Results."</a></p>

<p><strong>Example</strong></p>

<p>See the examples under
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code> and
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>.</p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#search-ext">ldap_search_ext()</a>,
<a href="function.htm#search-ext-s">ldap_search_ext_s()</a>,
<a href="function.htm#first-message">ldap_first_message()</a>,
<a href="function.htm#next-message">ldap_next_message()</a>.</code></p>

<h2 id="count-references">ldap_count_references()</h2>

<p>Returns the number of
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structures
representing search references in a chain of search results.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_count_references( LDAP *ld, LDAPMessage *res );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-30 - ldap_count_references() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>result</code></td>
  <td>
   Chain of search results, represented by the pointer to an
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  The number of
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
  structures of the type <code>LDAP_RES_SEARCH_REFERENCE</code> in a
  chain of search results, if successful. (If there are no
  structures of this type, returns <code>0</code>.)
 <li><code>-1</code> if <code>ld</code> is not a valid connection handle.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_count_references()</code> function returns the
number of <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
structures representing search references in a chain of search
results. These messages have the type
<code>LDAP_RES_SEARCH_REFERENCE</code>.</p>

<p>Note that if you pass in a pointer to an
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
in the middle of the chain of results, the function counts only the
references between that structure and the last structure in the
chain. In this type of situation, the function does not return the
count of all references in the chain.</p>

<p>For more information on using this function, see
<a href="search.htm#c6-iterating-through-a-chain-of-results">"Iterating Through a Chain of Results."</a></p>

<p><strong>Example</strong></p>

<p>See the examples under
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code> and
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>.</p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#search-ext">ldap_search_ext()</a>,
<a href="function.htm#search-ext-s">ldap_search_ext_s()</a>,
<a href="function.htm#first-reference">ldap_first_reference()</a>,
<a href="function.htm#next-reference">ldap_next_reference()</a>.</code></p>

<h2 id="count-values">ldap_count_values()</h2>

<p>The <code>ldap_count_values()</code> function returns the number
of values in an array of strings. Use the
<code><a href="function.htm#count-values-len">ldap_count_values_len()</a></code>
function instead of this function if the array contains
<code><a href="datatype.htm#berval">berval</a></code> structures.</p>

<p>For additional information, see
<a href="search.htm#c6-getting-the-values-of-an-attribute">"Getting the Values of an Attribute."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_count_values( char **values );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-31 - ldap_count_values() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>values</code></td>
  <td>Array of values.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>The number of values in the array, if successful.
 <li>
  <code>-1</code> if unsuccessful. (See
  <a href="error.htm">Chapter 19 - Result Codes</a> for a
  complete listing.)
</ul>

<p><strong>Example</strong></p>

<p>The following section of code counts the number of values
assigned to an attribute.</p>

<p>
 <strong>Code Example 18-8 - ldap_count_values() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *e;
char *a="cn";
char **vals;
int count;
...

/* Get the values of the cn attribute */
vals = ldap_get_values( ld, e, a );

/* Count the values of the attribute */
count = ldap_count_values( vals );
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#count-values-len">ldap_count_values_len()</a>,
<a href="function.htm#get-values">ldap_get_values()</a>.</code></p>

<h2 id="count-values-len">ldap_count_values_len()</h2>

<p>The <code>ldap_count_values_len()</code> function returns the
number of values in an array of
<code><a href="datatype.htm#berval">berval</a></code> structures. Use
the <code><a href="function.htm#count-values">ldap_count_values()</a></code>
function instead of this function if the array contains strings.</p>

<p>For additional information, see
<a href="search.htm#c6-getting-the-values-of-an-attribute">"Getting the Values of an Attribute."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_count_values_len( struct berval **vals );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-32 - ldap_count_values_len() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>values</code></td>
  <td>Array of <a href="datatype.htm#berval">berval</a> structures.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>The number of values in the array, if successful.
 <li>
  <code>-1</code> if unsuccessful. (See
  <a href="error.htm">Chapter 19 - Result Codes</a> for a
  complete listing.)
</ul>

<p><strong>Example</strong></p>

<p>The following section of code counts the number of values
assigned to an attribute.</p>

<p>
 <strong>Code Example 18-9 - ldap_count_values_len() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
LDAP *ld;
LDAPMessage *e;
char *a="jpegPhoto";
struct berval **bvals;
int count;
...
/* Get the values of the jpegPhoto attribute */
bvals = ldap_get_values_len( ld, e, a );

/* Count the values of the attribute */
count = ldap_count_values_len( vals );
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#count-values">ldap_count_values()</a>,
<a href="function.htm#get-values-len">ldap_get_values_len()</a>.</code></p>

<h2 id="create-filter">ldap_create_filter()</h2>

<p>The <code>ldap_create_filter()</code> routine constructs an LDAP
search filter. For more information about filters, see
<a href="filter.htm#create_filter">"Creating Filters Programmatically."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_create_filter( char *buf, unsigned long buflen,
  char *pattern, char *prefix, char *suffix, char *attr,
  char *value, char **valwords );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-33 - ldap_create_filter() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>buf</code></td>
  <td>Buffer to contain the constructed filter.</td>
 </tr>
 <tr>
  <td><code>buflen</code></td>
  <td>Size of the buffer.</td>
 </tr>
 <tr>
  <td><code>pattern</code></td>
  <td>Pattern for the filter.</td>
 </tr>
 <tr>
  <td><code>prefix</code></td>
  <td>Prefix to prepend to the filter (<code>NULL</code> if not used).</td>
 </tr>
 <tr>
  <td><code>suffix</code></td>
  <td>Suffix to append to the filter (<code>NULL</code> if not used).</td>
 </tr>
 <tr>
  <td><code>attr</code></td>
  <td>Replaces <code>%a</code> in the pattern.</td>
 </tr>
 <tr>
  <td><code>value</code></td>
  <td>Replaces <code>%v</code> in the pattern.</td>
 </tr>
 <tr>
  <td><code>valwords</code></td>
  <td>Replaces <code>%vM</code> through <code>%vN</code> in the pattern.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  <code>LDAP_SIZELIMIT_EXCEEDED</code> if the created filter exceeds
  the size of the buffer.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function.
</ul>

<p><strong>Example</strong></p>

<p>The following section of code builds the filter
<code>(mail=bjensen@example.com)</code>.</p>

<p>
 <strong>Code Example 18-10 - Creating a filter with ldap_create_filter()</strong>
</p>

<pre class="code">char buf[LDAP_FILT_MAXSIZ];
char *pattern = "(%a=%v)";
char *attr = "mail";
char *value = "bjensen@example.com";
...
ldap_create_filter( buf, LDAP_FILT_MAXSIZ, pattern, NULL,
  NULL, attr, value, NULL );
...</pre>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#init-getfilter">ldap_init_getfilter()</a>,
<a href="function.htm#init-getfilter-buf">ldap_init_getfilter_buf()</a>,
<a href="function.htm#getfirstfilter">ldap_getfirstfilter()</a>,
<a href="function.htm#getnextfilter">ldap_getnextfilter()</a>,
<a href="function.htm#set-filter-additions">ldap_set_filter_additions()</a>.</code></p>

<h2 id="create-persistentsearch-control">ldap_create_persistentsearch_control()</h2>

<p>Creates a control that allows your client to perform a persistent
search of an LDAP v3 server, which allows the search operation
to continue without termination until your client abandons the search.</p>

<p>This function implements an extension to the LDAPv3 protocol.
Persistent search is an optional LDAP server feature; it may not be
supported on all LDAP servers. Call this function when interacting
with LDAP servers that support this LDAPv3 extension.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_create_persistentsearch_control( LDAP *ld,
  int changetypes, int changesonly, int return_echg_ctls,
  char ctl_iscritical, LDAPControl **ctrlp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-34 - ldap_create_persistentsearch_control() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>changetypes</code></td>
  <td>
   Specifies the types of changes that you want to keep track of.
   This field can have one or more of the following values (you can
   OR the values together to specify multiple types):
   <p></p>
   <ul>
    <li>
     <code>LDAP_CHANGETYPE_ADD</code> specifies that you want to
     keep track of entries added to the directory.
    <li>
     <code>LDAP_CHANGETYPE_DELETE</code> specifies that you want to
     keep track of entries deleted from the directory.
    <li>
     <code>LDAP_CHANGETYPE_MODIFY</code> specifies that you want to
     keep track of entries that are modified.
    <li>
     <code>LDAP_CHANGETYPE_MODDN</code> specifies that you want to
     keep track of entries that are renamed.
    <li>
     <code>LDAP_CHANGETYPE_ANY</code> specifies that you want to
     keep track of all of the above changes to the directory.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>changesonly</code></td>
  <td>
   Specifies whether or not you want skip the initial search and
   only get the latest changes as they occur:
   <p></p>
   <ul>
    <li>
     If non-zero, the initial search is skipped and only entries
     that have changed after the initial search are returned.
    <li>
     If <code>0</code>, the results of the initial search are
     returned first.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>return_echg_ctls</code></td>
  <td>
   Specifies whether or not entry change notification controls are
   included with each entry returned to your client:
   <p></p>
   <ul>
    <li>
     If non-zero, an entry change notification control is included
     with each entry.
    <li>
     If <code>0</code>, entry change notification controls are not
     included with the entries returned from the server.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>ctl_iscritical</code></td>
  <td>
   Specifies whether or not the persistent search control is
   critical to the search operation:
   <p></p>
   <ul>
    <li>
     If non-zero, the control is critical to the search operation.
     If the server does not support persistent searches, the server
     will return the error
     <code>LDAP_UNAVAILABLE_CRITICAL_EXTENSION</code>.
    <li>
     If <code>0</code>, the control is not critical to the search
     operation. Even if the server does not support persistent
     searches, the search operation is still performed.
    </ul>
  </td>
 </tr>
 <tr>
  <td><code>ctrlp</code></td>
  <td>
   Pointer to a pointer to an
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structure that will be created by this function. When you are
   done using this control, you should free it by calling the
   <code><a href="function.htm#control-free">ldap_control_free()</a></code>
   function.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the control.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_create_persistentsearch_control()</code> function
allows you to perform persistent searches. A persistent search
provides the means to track changes to a set of entries that match
the search criteria. After the initial search is performed, the
server keeps track of the search criteria and sends back information
when any entry that matches the criteria is added, deleted,
modified, or renamed.</p>

<p>Calling this function creates an LDAP server control that you can
pass to the
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code>
function.</p>

<p>In order for the control to work, the LDAP server that you are
connecting to must support the server control for persistent searches
(OID 2.16.840.1.113730.3.4.3, or
<code>LDAP_CONTROL_PERSISTENTSEARCH</code>, as defined in the
<code>ldap.h</code> header file). See
<a href="controls.htm#determine_control_support">"Determining the Controls Supported By
the Server"</a> for information on determining the controls
supported by a server.</p>

<p>After you create the control, you can pass it to the LDAP server
during a search operation. (Pass the server control when calling the
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code>
function.) If you specify that you want "entry change notification"
controls sent back (that is, if you specify a non-zero value for the
<code>return_echg_ctls</code> argument), the server includes
controls with each changed entry it sends back.</p>

<p>To retrieve the "entry change notification control" from each
entry, call the
<code><a href="function.htm#get-entry-controls">ldap_get_entry_controls()</a></code>
function. To get data about the changes made to the entry from the
control, call the
<code><a href="function.htm#parse-entrychange-control">ldap_parse_entrychange_control()</a></code>
function.</p>

<p>When you are done with the search, you can cancel the persistent
search by calling the
<code><a href="function.htm#abandon-ext">ldap_abandon_ext()</a></code>
function. You should also free the control from memory by calling
the <code><a href="function.htm#control-free">ldap_control_free()</a></code>
function.</p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#search-ext">ldap_search_ext()</a>,
<a href="function.htm#abandon-ext">ldap_abandon_ext()</a>,
<a href="function.htm#get-entry-controls">ldap_get_entry_controls()</a>,
<a href="function.htm#parse-entrychange-control">ldap_parse_entrychange_control()</a>,
<a href="function.htm#control-free">ldap_control_free()</a>.</code></p>

<h2 id="create-proxyauth-control">ldap_create_proxyauth_control()</h2>

<p>You use <code>ldap_create_proxyauth_control()</code> to create an
LDAPv3 control that allows a bound entity to assume the identity of
another directory entry.</p>

<p>This function implements the proxy authorization extension of the
LDAPv3 protocol. Proxy authorization is an optional LDAP server
feature and it may not be supported on all LDAP servers.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_create_proxyauth_control( LDAP *ld, char *DN,
  char ctl_iscritical, LDAPControl **ctrlp);</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:
<P>
<p>
 <strong>Table 18-35 - ldap_create_proxyauth_control() function parameters</strong>
</p>

<table class="data">
 <tr>
  <th><code>ld</code></th>
  <th>
   Connection handle, which is a pointer to an <code>LDAP</code>
   structure containing information about the connection to the LDAP
   server.</th>
 </tr>
 <tr>
  <td><code>DN</code></td>
  <td>
   String representing the distinguished name of the entry who's
   identity the client will be assuming.
  </td>
 </tr>
 <tr>
  <td><code>ctl_iscritical</code></td>
  <td>
   Specifies whether the persistent search control is critical to
   the search operation. For proxy authorization controls, this
   should be set to a non-zero value.
   <p></p>
   If non-zero, the control is critical to the directory operation.
   If the server does not support proxy authentication, the server
   will return an <code>LDAP_UNAVAILABLE_CRITICAL_EXTENSION</code>
   error.
   <p></p>If <code>0</code>, the control is not critical to the
   directory operation. Even if the server does not support proxied
   authorization, the operation is still attempted and the proxied
   authorization control is ignored.
  </td>
 </tr>
 <tr>
  <td><code>ctrlp</code></td>
  <td>
   Pointer to a pointer to an <code>LDAPControl</code> structure
   that is created by this function. When you are done using this
   control, you should free it by calling the
   <code>ldap_control_free()</code> function.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the control.
 <li>
  <code>LDAP_UNAVAILABLE_CRITICAL_EXTENSION</code> if the server
  does not support proxied authorization and ctl_iscritical is set
  to a non-zero value.
</ul>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#control-free">ldap_control_free()</a></code></p>

<h2 id="create-sort-control">ldap_create_sort_control()</h2>

<p>Creates a control that specifies the order in which you want
search results returned.</p>

<p>This function implements an extension to the LDAPv3 protocol.
Server-side sorting is an optional LDAP server feature; it may not
be supported on all LDAP servers. Call this function when
interacting with LDAP servers that support this LDAPv3 extension.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_create_sort_control( LDAP *ld,
  LDAPsortkey **sortKeyList, const char ctl_iscritical,
  LDAPControl **ctrlp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-36 - ldap_create_sort_control() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>sortKeyList</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code>
   structures that specify the attribute types or matching rules
   used for sorting and the order (ascending or descending) in which
   to sort the results.
  </td>
 </tr>
 <tr>
  <td><code>ctl_iscritical</code></td>
  <td>
   Specifies whether or not the control is critical to the search
   operation. This field can have one of the following values:
   <p></p>
   <ul>
    <li>
     A nonzero value specifies that the control is critical to
     the operation.
    <li>
     <code>0</code> specifies that the control is not critical to
     the operation.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>ctrlp</code></td>
  <td>
   Pointer to a pointer to an
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structure that will be created by this function. When you are
   done using this control, you should free it by calling the
   <code><a href="function.htm#control-free">ldap_control_free()</a></code>
   function.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed to
  the function.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the control.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_create_sort_control()</code> function allows you
to specify the order in which you want to receive data from the
server. Calling this function creates an LDAP control that you can
pass to the
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code> and
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>
functions.</p>

<p>In order for the control to work, the LDAP server that you are
connecting to must support the server control for sorting search
results (OID 1.2.840.113556.1.4.473, or
<code>LDAP_CONTROL_SORTREQUEST</code> as defined in
<code>ldap.h</code>). See <a href="controls.htm#determine_control_support">"Determining
the Controls Supported By the Server"</a> for information on
determining the controls supported by a server.</p>

<p>To specify the attributes to use for sorting the results, you can
call <code><a href="function.htm#create-sort-keylist">ldap_create_sort_keylist()</a></code>
to create an array of
<code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code> structures
and pass the array as the <code>sortKeyList</code> argument.</p>

<p>When you are done with the search, you should free the control
and the array of <a href="datatype.htm#LDAPsortkey">LDAPsortkey</a>
structures by calling the
<code><a href="function.htm#control-free">ldap_control_free()</a></code>
function and the
<code><a href="function.htm#free-sort-keylist">ldap_free_sort_keylist()</a></code>
function.</p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#create-sort-keylist">ldap_create_sort_keylist()</a>,
<a href="function.htm#search-ext">ldap_search_ext()</a>,
<a href="function.htm#search-ext-s">ldap_search_ext_s()</a>,
<a href="function.htm#control-free">ldap_control_free()</a>.</code></p>

<h2 id="create-sort-keylist">ldap_create_sort_keylist()</h2>

<p>Creates an array of
<code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code> structures
from a string representation of a set of sort keys.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_create_sort_keylist(LDAPsortkey ***sortKeyList,
  const char *string_rep);</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-37 - ldap_create_sort_keylist() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>sortKeyList</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code>
   structures that specify the attribute types or matching rules
   used for sorting and the order (ascending or descending) in which
   to sort the results.
  </td>
 </tr>
 <tr>
  <td><code>string_rep</code></td>
  <td>String representation of a set of sort keys.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li><code>-1</code> if an error occurred
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_create_sort_keylist()</code> function allows you
to create an array of
<code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code> structures
from a string representation of a set of sort keys. Calling this
function creates an array of
<code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code> structures
that you can pass to the
<code><a href="function.htm#create-sort-control">ldap_create_sort_control()</a></code>
function.</p>

<p>The string representation specified by the <code>string_rep</code> 
argument should specify the name of the attribute that you want to 
sort by.</p>

<ul>
 <li>
  To sort in reverse order, precede the attribute name with a
  hyphen ("-").
 <li>
  To use a matching rule for sorting, append a colon to the
  attribute name and specify the object identifier (OID) of a
  matching rule after the colon.
</ul>

<p>For example:</p>

<ul>
 <li><code>cn</code> (sort by the cn attribute)
 <li><code>-cn</code> (sort by the cn attribute in reverse order)
 <li>
  <code>-cn:1.2.3.4</code> (sort by the cn attribute in reverse
  order and use the matching rule identified by the OID 1.2.3.4)
</ul>

<p>When you are done sorting the results, you should free the array
of <code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code>
structures by calling the
<code><a href="function.htm#free-sort-keylist">ldap_free_sort_keylist()</a></code>
function.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#create-sort-control">ldap_create_sort_control()</a>,
<a href="function.htm#free-sort-keylist">ldap_free_sort_keylist()</a>.</code></p>

<h2 id="create-virtuallist-control">ldap_create_virtuallist_control()</h2>

<p>Creates a control that requests a subset of search results for
use in a virtual list box.</p>

<p>This function implements an extension to the LDAPv3 protocol.
This control is supported by the Netscape Directory Server, version
4.0 and later. For information on determining if a server supports
this or other LDAPv3 controls, see
<a href="srvrinfo.htm#determine_server_support">"Determining If the 
Server Supports LDAPv3"</a>.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_create_virtuallist_control( LDAP *ld,
  LDAPVirtualList *ldvlistp, LDAPControl **ctrlp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-38 - ldap_create_virtuallist_control() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>ldvlistp</code></td>
  <td>
   Pointer to an
   <code><a href="datatype.htm#LDAPFiltInfo">LDAPVirtualList</a></code>
   structure that specifies the subset of entries that you want
   retrieved from the server and the selected entry.
  </td>
 </tr>
 <tr>
  <td><code>ctrlp</code></td>
  <td>
   Pointer to a pointer to an
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structure that will be created by this function. When you are
   done using this control, you should free it by calling the
   <code><a href="function.htm#control-free">ldap_control_free()</a></code>
   function.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the control
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_create_virtuallist_control()</code> function
allows you to retrieve a subset of entries from the server for use
in a virtual list box. Calling this function creates an LDAP control
that you can pass to the
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code> and
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>
functions.</p>

<p>Note that you also need to pass a server-side sorting control to
the search functions. You can call the
<code><a href="function.htm#create-sort-keylist">ldap_create_sort_keylist()</a></code>
and <code><a href="function.htm#create-sort-control">ldap_create_sort_control()</a></code>
functions to create a server-side sorting control.</p>

<p>In order for the virtual list view control to work, the LDAP
server that you are connecting to must support the server control
for sorting search results (OID 2.16.840.1.113730.3.4.9, or
<code>LDAP_CONTROL_VLVREQUEST</code>, as defined in <code>ldap.h</code>).</p>

<p>Netscape Directory Server 4.0 and later supports this control.
For information on determining if a server supports this or other
LDAPv3 controls, see <a href="srvrinfo.htm#determine_server_support">"Determining If
the Server Supports LDAPv3"</a>.</p>

<p>To specify the subset of entries that you want to retrieve, create
an <code><a href="datatype.htm#LDAPFiltInfo">LDAPVirtualList</a></code>
structure and pass in a pointer to this structure as the
<code>ldvlistp</code> argument.</p>

<p>When you are done with the search, you should free the control by
calling the
<code><a href="function.htm#control-free">ldap_control_free()</a></code>
function.</p>

<p>For more information about this control, see
<a href="controls.htm#use_virtual_list">"Using the Virtual List View Control."</a></p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="datatype.htm#LDAPFiltInfo">LDAPVirtualList</a>,
<a href="function.htm#parse-virtuallist-control">ldap_parse_virtuallist_control()</a>,
<a href="function.htm#search-ext">ldap_search_ext()</a>,
<a href="function.htm#search-ext-s">ldap_search_ext_s()</a>,
<a href="function.htm#control-free">ldap_control_free()</a>.</code></p>

<h2 id="delete">ldap_delete()</h2>

<p>Deletes an entry from the directory asynchronously.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP client,
use <code><a href="function.htm#delete-ext">ldap_delete_ext()</a></code>
instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_delete( LDAP *ld, const char *dn );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-39 - ldap_delete() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry to remove.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>Returns the message ID of the <code>ldap_delete()</code>
operation. To check the result of this operation, call
<code><a href="function.htm#result">ldap_result()</a></code> and
<code><a href="function.htm#result2error">ldap_result2error()</a></code>.
For a list of the possible result codes for an LDAP delete
operation, see the result code documentation for the
<code><a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a></code>
function.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_delete()</code> function removes an entry from the
directory.</p>

<p>A newer version of this function,
<code><a href="function.htm#delete-ext">ldap_delete_ext()</a></code>, is
available in this release of the LDAP API. <code>ldap_delete()</code>
(the older version of the function) is included only for
backward-compatibility. If you are writing a new LDAP client, use
<code><a href="function.htm#delete-ext">ldap_delete_ext()</a></code>
instead of <code>ldap_delete()</code>.</p>

<p>If you want more information on <code>ldap_delete()</code>,
refer to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following section of code uses the asynchronous
<code>ldap_delete()</code> function to remove the entry for
"<code>Barbara Jensen</code>" from the directory.</p>

<p>
 <strong>Code Example 18-11 - ldap_delete() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result;
int msgid, rc;
struct timeval tv;

/* Distinguished name of the entry that you want to delete. */
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";
...
/* Set up the timeout period to wait for the "modify" operation */
tv.tv_sec = tv.tv_usec = 0;

/* Delete the entry */
if ( ( msgid = ldap_delete( ld, dn ) ) == -1 ) {
  ldap_perror( ld, "ldap_delete" );
  return( 1 );
}
/* Check to see if the operation has completed */
while ( ( rc = ldap_result( ld, msgid, 0, &amp;tv, &amp;result ) ) == 0 ) {
  ...
  /* do other work while waiting for the operation to complete */
  ...
}
/* Check the result to see if any errors occurred */
ldap_result2error( ld, result, 1 );
ldap_perror( ld, "ldap_delete" );
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#delete-ext">ldap_delete_ext()</a>.</code></p>

<h2 id="delete-ext">ldap_delete_ext()</h2>

<p>Deletes an entry from the directory asynchronously.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_delete_ext( LDAP *ld, const char *dn,
  LDAPControl **serverctrls, LDAPControl **clientctrls,
  int *msgidp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-40 - ldap_delete_ext() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry to remove.</td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP client controls that apply to this
   LDAP operation. If you do not want to pass any client controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>msgidp</code></td>
  <td>
   Pointer to an integer that will be set to the message ID of the
   LDAP operation. To check the result of this operation, call the
   <code><a href="function.htm#result">ldap_result()</a></code> and
   <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
   functions.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your
  request (for example, as a session preference) and your LDAP
  client does not specify that it is using the LDAPv3 protocol. Make
  sure that you set the version of your LDAP client to version 3
  before calling this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_delete_ext()</code> function deletes an entry from
the directory asynchronously. Use the <code>dn</code> argument to
specify the entry that you want to delete.</p>

<p>This function is a new version of the
<code><a href="function.htm#delete">ldap_delete()</a></code>
function. If you are writing a new LDAP client, you should call
this function instead of
<code><a href="function.htm#delete">ldap_delete()</a></code>.</p>

<p><code>ldap_delete_ext()</code> is an asynchronous function; it
does not directly return results. If you want the results to be
returned directly by the function, call the synchronous function
<code><a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>In order to get the results of the LDAP delete operation, you
need to call the
<code><a href="function.htm#result">ldap_result()</a></code> function
and the
<code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
function. (See <a href="using.htm#call_async_function">"Calling Asynchronous
Functions"</a> for details.) For a list of possible result codes for
an LDAP delete operation, see the result code documentation for the
<code><a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a></code>
function.</p>

<p>For additional information on deleting entries from the
directory, see <a href="addmod.htm#delete-entry">"Deleting an Entry."</a></p>

<p><strong>Example</strong></p>

<p>See the example under <a href="addmod.htm#example-delete-entry-directory-async">"Example:
Deleting an Entry from the Directory (Asynchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a>,
<a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#parse-result">ldap_parse_result()</a>.</code></p>

<h2 id="delete-ext-s">ldap_delete_ext_s()</h2>

<p>Deletes an entry from the directory synchronously.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_delete_ext_s( LDAP *ld, const char *dn,
  LDAPControl **serverctrls, LDAPControl **clientctrls );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-41 - ldap_delete_ext_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry to remove.</td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP client controls that apply to this
   LDAP operation. If you do not want to pass any client controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_LOCAL_ERROR</code> if an error occurred when receiving
  the results from the server.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when
  decoding the BER-encoded results from the server.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your
  request (for example, as a session preference) and your LDAP
  client does not specify that it is using the LDAPv3 protocol. Make
  sure that you set the version of your LDAP client to version 3
  before calling this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
</ul>

<p>The following result codes can be returned by the Directory
Server when processing an LDAP delete request. Other LDAP servers
may send these result codes under different circumstances or may
send different result codes back to your LDAP client.</p>

<ul>
 <li>
  <code>LDAP_OPERATIONS_ERROR</code> may be sent by the Directory
  Server for general errors encountered by the server when
  processing the request.
 <li>
  <code>LDAP_PROTOCOL_ERROR</code> if the delete request did not
  comply with the LDAP protocol. The Directory Server may set this
  error code in the results for a variety of reasons. Some of these
  reasons include:
  <p></p>
  <ul>
   <li>
    The server encountered an error when decoding your client's
    BER-encoded request.
  </ul>
  <p></p>
 <li>
  <code>LDAP_UNWILLING_TO_PERFORM</code> may be sent by the
  Directory Server in the following situations:
  <p></p>
  <ul>
   <li>
    The entry to be deleted is a DSE (DSA-specific entry, where DSA
    is the Directory Server Agent).
   <li>The server's database is read-only.
  </ul>
 <li>
  <code>LDAP_NO_SUCH_OBJECT</code> may be sent by the Directory
  Server if the entry that you want deleted does not exist and if no
  referral URLs are available.
 <li>
  <code>LDAP_REFERRAL</code> may be sent by the Directory Server if
  the DN specified by the <code>dn</code> argument identifies an
  entry not handled by the current server and if referral URLs
  identify a different server to handle the entry. (For example, if
  the DN is <code>uid=bjensen, ou=European Sales, dc=example,dc=com</code>,
  all entries under <code>ou=European Sales</code> might be handled
  by a different Directory Server.)
 <li>
  <code>LDAP_NOT_ALLOWED_ON_NONLEAF</code> may be sent by the
  Directory Server if the entry that you want deleted has entries
  beneath it in the directory tree (in other words, if this entry is
  a parent entry to other entries).
 <li>
  <code>LDAP_INSUFFICIENT_ACCESS</code> may be sent by the
  Directory Server if the DN that your client is authenticated as
  does not have the access rights to write to the entry.
</ul>

<p>Note that the Directory Server may send other result codes in
addition to the codes described here (for example, the server may
have loaded a custom plug-in that returns other result codes).</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_delete_ext_s()</code> function deletes an entry
from the directory synchronously. Use the <code>dn</code> argument
to specify the entry that you want to delete.</p>

<p>This function is a new version of the
<code><a href="function.htm#delete-s">ldap_delete_s()</a></code>
function. If you are writing a new LDAP client, you should call this
function instead of
<code><a href="function.htm#delete-s">ldap_delete_s()</a></code>.</p>

<p><code>ldap_delete_ext_s()</code> is a synchronous function, which
directly returns the results of the operation. If you want to
perform other operations while waiting for the results of this
operation, call the asynchronous function
<code><a href="function.htm#delete-ext">ldap_delete_ext()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>For additional information on deleting entries from the
directory, see <a href="addmod.htm#delete-entry">"Deleting an Entry."</a></p>

<p><strong>Example</strong></p>

<p>See the example under <a href="addmod.htm#example-delete-entry-directory-sync">"Example:
Deleting an Entry from the Directory (Synchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#delete-ext">ldap_delete_ext()</a></code>.</p>

<h2 id="delete-s">ldap_delete_s()</h2>

<p>Deletes an entry from the directory synchronously.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP
client, use
<code><a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a></code>
instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_delete_s(LDAP *ld, const char *dn);</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-42 - ldap_delete_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry to remove.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>For a list of possible result codes for an LDAP delete operation,
see the result code documentation for the
<code><a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a></code>
function.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_delete_s()</code> function removes an entry from
the directory.</p>

<p>A newer version of this function,
<code><a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a></code>,
is available in this release of the LDAP API.
<code>ldap_delete_s()</code> (the older version of the function) is
included only for backward-compatibility. If you are writing a new
LDAP client, use
<code><a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a></code>
instead of <code>ldap_delete_s()</code>.</p>

<p>If you want more information on <code>ldap_delete_s()</code>,
refer to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following section of code uses the synchronous
<code>ldap_delete_s()</code> function to delete the entry for
Barbara Jensen from the directory.</p>

<p>
 <strong>Code Example 18-12 - ldap_delete_s() code example</strong>
</p>

<pre class="code">LDAP *ld;
/* Distinguished name of the entry that you want to delete. */
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";
...
/* Delete the entry */
if ( ldap_delete_s( ld, dn ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_delete_s" );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a>.</code></p>

<h2 id="dn2ufn">ldap_dn2ufn()</h2>

<p>The <code>ldap_dn2ufn()</code> function converts a distinguished
name (DN) into a "friendlier" form by stripping off the cryptic
type names.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
char * ldap_dn2ufn( const char *dn );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-43 - ldap_dn2ufn() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) that you want converted to a friendlier form.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>If successful, returns the DN in its friendlier form.
 <li>If unsuccessful, returns <code>NULL</code>.
</ul>

<h2 id="err2string">ldap_err2string()</h2>

<p>The <code>ldap_err2string()</code> function returns the
corresponding error message for an error code. For more information,
see <a href="using.htm#get_error_message">"Getting the Error Message."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
char * ldap_err2string( int err );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-44 - ldap_err2string() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>err</code></td>
  <td>Error code that you want interpreted into an error message.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the corresponding error message for the
  error code.
 <li>
  If unsuccessful (for example, if the error code is not a valid
  LDAP API error code), returns "<code>Unknown error</code>".
</ul>

<p><strong>Example</strong></p>

<p>The following section of code sets the variable
<code>err_msg</code> to the error message corresponding to the error
code returned by the <code>ldap_simple_bind_s()</code> function.</p>

<p>
 <strong>Code Example 18-13 - ldap_err2string() code example</strong>
</p>

<pre class="code">...
LDAP *ld;
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";
char *pw = "hifalutin";
char *err_msg;
...
err_msg = ldap_err2string( ldap_simple_bind_s( ld, dn, pw ) );
...</pre>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#get-lderrno">ldap_get_lderrno()</a>,
<a href="function.htm#perror">ldap_perror()</a>,
<a href="function.htm#result2error">ldap_result2error()</a>,
<a href="function.htm#set-lderrno">ldap_set_lderrno()</a>,
<a href="function.htm#ssl-err2string">ldapssl_err2string()</a>.</code></p>

<h2 id="explode-dn">ldap_explode_dn()</h2>

<p>The <code>ldap_explode_dn()</code> function converts a
distinguished name (DN) into its component parts. For more
information, see <a href="search.htm#c6-getting-the-components-of-a-distinquished-name">"Getting the Components
of a Distinguished Name."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
char ** ldap_explode_dn( const char *dn, int notypes );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-45 - ldap_explode_dn() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) that you want separated into components.</td>
 </tr>
 <tr>
  <td><code>notypes</code></td>
  <td>
   Specifies whether or not type names in the distinguished name are
   returned. This parameter can have the following possible values:
   <p></p>
   <ul>
    <li><code>0</code> specifies that type names are returned.
    <li>A non-zero value specifies that type names are not returned.
   </ul>
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns a NULL-terminated array containing the
  components of the distinguished name (DN).
 <li>If unsuccessful, returns a <code>NULL</code>.
</ul>

<p><strong>Example</strong></p>

<p>The following function call:</p>

<pre>ldap_explode_dn( "uid=bjensen, ou=People, dc=example,dc=com", 0 )</pre>

<p>returns this array:</p>

<pre>{ "uid=bjensen", "ou=People", "dc=example", "dc=com", NULL }</pre>

<p>If you change the <code>notypes</code> parameter from
<code>0</code> to <code>1</code>:</p>

<pre>ldap_explode_dn( "uid=bjensen, ou=People, dc=example,dc=com", 1 )</pre>

<p>the component names are not returned in the array:</p>

<pre>{ "bjensen", "People", "dc=example, "dc=com", NULL }</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#explode-rdn">ldap_explode_rdn()</a>,
<a href="function.htm#get-dn">ldap_get_dn()</a>.</code></p>

<h2 id="explode-rdn">ldap_explode_rdn()</h2>

<p>The <code>ldap_explode_rdn()</code> function converts a relative
distinguished name (RDN) into its component parts. For more
information, see <a href="search.htm#c6-getting-the-components-of-a-distinquished-name">"Getting the Components
of a Distinguished Name."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
char ** ldap_explode_rdn( const char *dn, int notypes );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-46 - ldap_explode_rdn() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>dn</code></td>
  <td>
   Relative distinguished name (RDN) that you want separated into
   components.
  </td>
 </tr>
 <tr>
  <td><code>notypes</code></td>
  <td>
   Specifies whether or not type names in the relative distinguished
   name are returned. This parameter can have the following possible
   values:
   <p></p>
   <ul>
    <li><code>0</code> specifies that type names are returned.
    <li>A non-zero value specifies that type names are not returned.
   </ul>
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns a <code>NULL</code>-terminated array
  containing the components of the relative distinguished name (RDN).
 <li>If unsuccessful, returns a <code>NULL</code>.
</ul>

<p><strong>Example</strong></p>

<p>The following function call:</p>

<pre>ldap_explode_rdn( "ou=Sales + cn=Barbara Jensen", 0 );</pre>

<p>returns this array:</p>

<pre>{ "ou=Sales", "cn=Barbara Jensen", NULL }</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#explode-dn">ldap_explode_dn()</a>,
<a href="function.htm#get-dn">ldap_get_dn()</a>.</code></p>

<h2 id="extended-operation">ldap_extended_operation()</h2>

<p>Sends a request to the server to perform an extended operation
asynchronously.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_extended_operation( LDAP *ld, const char *requestoid,
  struct berval *requestdata, LDAPControl **serverctrls,
  LDAPControl **clientctrls, int *msgidp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-47 - ldap_extended_operation() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>requestoid</code></td>
  <td>
   Object identifier (OID) of the extended operation that you want
   the server to perform.
  </td>
 </tr>
 <tr>
  <td><code>requestdata</code></td>
  <td>
   Pointer to a <code><a href="datatype.htm#berval">berval</a></code>
   structure containing the data that you want passed to the server
   to perform the extended operation.
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP client controls that apply to this
   LDAP operation. If you do not want to pass any client controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>msgidp</code></td>
  <td>
   Pointer to an integer that will be set to the message ID of the
   LDAP operation. To check the result of this operation, call the
   <code><a href="function.htm#result">ldap_result()</a></code> and
   <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
   functions.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if your LDAP client does not
  specify that it is using the LDAPv3 protocol. Make sure that you
  set the version of your LDAP client to version 3 before calling
  this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_extended_operation()</code> function sends a
request to the server to perform an LDAPv3 extended operation
synchronously.</p>

<p>The LDAP server must support the extended operation. The Netscape
Directory Server supports a server plug-in interface that you can
use to add support for extended operations to the server. For
details, see the <em>Netscape Directory Server Programmer's Guide</em>.</p>

<p>For information on determining the extended operations supported
by a server, see <a href="extendop.htm#determine_extendop_support">"Determining 
the Extended Operations Supported."</a></p>

<p>After processing an LDAPv3 extended operation, an LDAP server can
return an object identifier and data in the result. To parse the OID
and data from the result, call the
<code><a href="function.htm#parse-extended-result">ldap_parse_extended_result()</a></code>
function.</p>

<p><code>ldap_extended_operation()</code> is an asynchronous
function; it does not directly return results. If you want the
results to be returned directly by the function, call the
synchronous function
<code><a href="function.htm#extended-operation-s">ldap_extended_operation_s()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>In order to get the results of the LDAP extended operation, you
need to call the
<code><a href="function.htm#result">ldap_result()</a></code>
function, the
<code><a href="function.htm#parse-extended-result">ldap_parse_extended_result()</a></code>
function, and the
<code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
function. (See <a href="extendop.htm#perform_async_extendop">"Performing 
an Asynchronous Extended Operation"</a> for details.) For a list of
possible result codes for an LDAP extended operation, see the result
code documentation for the
<code><a href="function.htm#extended-operation-s">ldap_extended_operation_s()</a></code>
function.</p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#extended-operation-s">ldap_extended_operation_s()</a>,
<a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#parse-extended-result">ldap_parse_extended_result()</a>,
<a href="function.htm#get-lderrno">ldap_get_lderrno()</a>.</code></p>

<h2 id="extended-operation-s">ldap_extended_operation_s()</h2>

<p>Sends a request to the server to perform an extended operation
synchronously.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_extended_operation_s( LDAP *ld, const char *requestoid,
  struct berval *requestdata, LDAPControl **serverctrls,
  LDAPControl **clientctrls, char **retoidp,
  struct berval **retdatap );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-48 - ldap_extended_operation_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>requestoid</code></td>
  <td>
   Object identifier (OID) of the extended operation that you want
   the server to perform.
  </td>
 </tr>
 <tr>
  <td><code>requestdata</code></td>
  <td>
   Pointer to a
   <code><a href="datatype.htm#berval">berval</a></code> structure
   containing the data that you want passed to the server to perform
   the extended operation.
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP client controls that apply to this
   LDAP operation. If you do not want to pass any client controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>retoidp</code></td>
  <td>
   Pointer to the object identifier (OID) returned by the server
   after performing the extended operation.
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#memfree">ldap_memfree()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>retdatap</code></td>
  <td>
   Pointer to the pointer to a
   <code><a href="datatype.htm#berval">berval</a></code> structure
   containing the data returned by the server after performing the
   extended operation.
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#ber-bvfree">ber_bvfree()</a></code>
   function.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_LOCAL_ERROR</code> if an error occurred when receiving
  the results from the server.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when
  decoding the BER-encoded results from the server.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if your LDAP client does not
  specify that it is using the LDAPv3 protocol. Make sure that you
  set the version of your LDAP client to version 3 before calling
  this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
</ul>

<p>The following result codes can be returned by the Netscape
Directory Server when processing an LDAP extended operation request.
Other LDAP servers may send these result codes under different
circumstances or may send different result codes back to your LDAP
client.</p>

<ul>
 <li>
  <code>LDAP_OPERATIONS_ERROR</code> may be sent by the Netscape
  Directory Server for general errors encountered by the server when
  processing the request.
 <li>
  <code>LDAP_PROTOCOL_ERROR</code> if the extended operation request
  did not comply with the LDAP protocol. The Netscape Directory
  Server may set this error code in the results for a variety of
  reasons. Some of these reasons include:
  <p></p>
  <ul>
   <li>
    The server encountered an error when decoding your client's
    BER-encoded request.
   <li>
    The extended operation specified by the <code>requestoid</code>
    argument is not supported by the server.
  </ul>
</ul>

<p>Depending on the extended operation requested, the Netscape
Directory Server may send other result codes in addition to the
codes described here. In the Netscape Directory Server, the people
deploying the server are responsible for implementing the mechanisms
for handling extended operations. Check with your server
administrator for additional result codes returned to the client.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_extended_operation_s()</code> function sends a
request to the server to perform an LDAPv3 extended operation
synchronously.</p>

<p>The LDAP server must support the extended operation. The Netscape
Directory Server supports a server plug-in interface that you can
use to add support for extended operations to the server. For
details, see the <em>Netscape Directory Server Programmer's
Guide</em>.</p>

<p>For information on determining the extended operations supported
by a server, see <a href="extendop.htm#determine_extendop_support">"Determining 
the Extended Operations Supported."</a></p>

<p>After processing an LDAPv3 extended operation, an LDAP server can
return an object identifier and data in the results. The
<code>retoidp</code> and <code>retdatap</code> arguments point to
these values.</p>

<p><code>ldap_extended_operation_s()</code> is a synchronous
function, which directly returns the results of the operation. If
you want to perform other operations while waiting for the results
of this operation, call the asynchronous function
<code><a href="function.htm#extended-operation">ldap_extended_operation()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#extended-operation">ldap_extended_operation()</a>.</code></p>

<h2 id="first-attribute">ldap_first_attribute()</h2>

<p>The <code>ldap_first_attribute()</code> function returns the name
of the first attribute in a entry returned by the
<code><a href="function.htm#first-entry">ldap_first_entry()</a></code>
function, the
<code><a href="function.htm#next-entry">ldap_next_entry()</a></code>
function, or the
<code><a href="function.htm#result">ldap_result()</a></code> function.</p>

<p>For more information, see 
<a href="search.htm#c6-getting-attributes-from-an-entry">"Getting
Attributes from an Entry."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
char * ldap_first_attribute( LDAP *ld, LDAPMessage *entry,
  BerElement **ber );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-49 - ldap_first_attribute() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>entry</code></td>
  <td>
   Pointer to the <a href="datatype.htm#LDAPMessage">LDAPMessage</a>
   structure representing the entry returned by the
   <code><a href="function.htm#first-entry">ldap_first_entry()</a></code>
   or <code><a href="function.htm#next-entry">ldap_next_entry()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>ber</code></td>
  <td>
   A pointer to a
   <code><a href="datatype.htm#BerElement">BerElement</a></code>
   allocated to keep track of its current position. Pass this
   pointer to subsequent calls to
   <code><a href="function.htm#next-attribute">ldap_next_attribute()</a></code>
   to step through the entry's attributes.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the pointer to the name of the first
  attribute in an entry. When you are done using this data, you
  should free the memory by calling the
  <code><a href="function.htm#memfree">ldap_memfree()</a></code>
  function.
 <li>
  If unsuccessful, returns a <code>NULL</code> and sets the
  appropriate error code in the
  <code><a href="datatype.htm#LDAP">LDAP</a></code> structure. To
  get the error code, call the
  <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
  function. (See <a href="error.htm">Chapter 19 "Result Codes</a>
  for a complete listing of error codes.)
</ul>

<p><strong>Example</strong></p>

<p>The following section of code retrieves each attribute for an
entry.</p>

<p>
 <strong>Code Example 18-14 - ldap_first_attribute() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result, *e;
BerElement *ber;
char *a;
char *my_searchbase = "dc=example,dc=com";
char *my_filter = "(sn=Jensen)"
...
/* Search the directory */
if ( ldap_search_s( ld, my_searchbase, LDAP_SCOPE_SUBTREE, \  my_filter, NULL, 0, &amp;result ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_search_s" );
  return( 1 );
}

/* Get the first matching entry.*/
e = ldap_first_entry( ld, result );

/* Retrieve the attributes the entry */
  for ( a = ldap_first_attribute( ld, e, &amp;ber ); a != NULL;
   a = ldap_next_attribute( ld, e, ber ) ) {
    ...
    /* Code to get and manipulate attribute values */
    ...
    }
    ldap_memfree( a );
  }
  /* Free the BerElement from memory when done */
  if ( ber != NULL ) {
    ldap_ber_free( ber, 0 );
  }
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#first-entry">ldap_first_entry()</a>,
<a href="function.htm#next-entry">ldap_next_entry()</a>,
<a href="function.htm#next-attribute">ldap_next_attribute()</a>.</code></p>

<h2 id="first-entry">ldap_first_entry()</h2>

<p>Returns a pointer to the 
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
representing the first directory entry in a chain of search results.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
LDAPMessage * ldap_first_entry( LDAP *ld, LDAPMessage *result );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-50 - ldap_first_entry() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>result</code></td>
  <td>
   Chain of search results, which are represented by a pointer to
   the <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the pointer to the first
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
  structure of the type <code>LDAP_RES_SEARCH_ENTRY</code> in the
  chain of search results.
 <li>
  If no <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
  structures of the type <code>LDAP_RES_SEARCH_ENTRY</code> are in
  the chain of the search results or if the function is unsuccessful,
  returns a <code>NULLMSG</code>.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_first_entry()</code> function returns a pointer to
the <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
structure representing the first directory entry in a chain of
search results. Search result entries are in messages of the type
<code>LDAP_RES_SEARCH_ENTRY</code>.</p>

<p>You can use this function in conjunction with the
<code><a href="function.htm#next-entry">ldap_next_entry()</a></code>
function to iterate through the directory entries in a chain of
search results. These functions skip over any messages in the chain
that do not have the type <code>LDAP_RES_SEARCH_ENTRY</code>.</p>

<p>Do not free the
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
returned by this function. Because this is a structure within a
chain of search results, freeing this structure will free part of
the chain of search results. When you are done working with the
search results, you can free the chain itself, rather than
individual structures within the chain.</p>

<p>For more information, see <a href="search.htm#c6-iterating-through-a-chain-of-results">"Iterating
Through a Chain of Results."</a></p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#search-ext">ldap_search_ext()</a>,
<a href="function.htm#search-ext-s">ldap_search_ext_s()</a>,
<a href="function.htm#next-entry">ldap_next_entry()</a>.</code></p>

<h2 id="first-message">ldap_first_message()</h2>

<p>Returns a pointer to the first
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
in a chain of search results.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
LDAPMessage * ldap_first_message( LDAP *ld, LDAPMessage *res );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-51 - ldap_first_message() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>res</code></td>
  <td>
   Chain of search results, represented by a pointer to the
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the pointer to the first
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  in the chain of search results.
 <li>
  If no <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
  structures are in the chain or if the function is unsuccessful,
  returns a <code>NULLMSG</code>.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_first_message()</code> function returns a pointer
to the first
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
in a chain of search results.</p>

<p>You can use this function in conjunction with the

<code><a href="function.htm#next-message">ldap_next_message()</a></code>
function to iterate through the chain of search results. You can
call the <code><a href="function.htm#msgtype">ldap_msgtype()</a></code>
function to determine if each message contains a matching entry (a
message of the type <code>LDAP_RES_SEARCH_ENTRY</code>) or a search
reference (a message of the type
<code>LDAP_RES_SEARCH_REFERENCE</code>).</p>

<p>Do not free the
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
returned by this function. Because this is the first structure
within a chain of search results, freeing this structure will free
the chain of search results. When you are done working with the
search results, you can free the chain itself, rather than
individual structures within the chain.</p>

<p>For more information, see <a href="search.htm#c6-iterating-through-a-chain-of-results">"Iterating
Through a Chain of Results."</a></p>

<p><strong>Example</strong></p>

<p>See the examples under 
<a href="search.htm#c6-example-searching-the-directory-asynchronous">"Example:
Searching the Directory (Asynchronous)"</a> and
<a href="search.htm#c6-example-searching-the-directory-synchronous">"Example: 
Searching the Directory (Synchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#search-ext">ldap_search_ext()</a>,
<a href="function.htm#search-ext-s">ldap_search_ext_s()</a>,
<a href="function.htm#next-message">ldap_next_message()</a>.</code></p>

<h2 id="first-reference">ldap_first_reference()</h2>

<p>Returns a pointer to the
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
representing the first search reference in a chain of search results.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
LDAPMessage * ldap_first_reference(LDAP *ld, LDAPMessage *res );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-52 - ldap_first_reference() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>res</code></td>
  <td>
   Chain of search results, which are represented by a pointer to
   the <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the pointer to the first
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  of the type <code>LDAP_RES_SEARCH_REFERENCE</code> in the chain of
  search results.
 <li>
  If no <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
  structures of the type <code>LDAP_RES_SEARCH_REFERENCE</code> are
  in the chain of the search results or if the function is
  unsuccessful, returns a <code>NULLMSG</code>.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_first_reference()</code> function returns a
pointer to the
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
representing the first search reference in a chain of search
results. Search references are in messages of the type
<code>LDAP_RES_SEARCH_REFERENCE</code>.</p>

<p>You can use this function in conjunction with the
<code><a href="function.htm#next-reference">ldap_next_reference()</a></code>
function to iterate through the search references in a chain of
search results. These functions skip over any messages in the chain
that do not have the type <code>LDAP_RES_SEARCH_REFERENCE</code>.</p>

<p>Do not free the
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
returned by this function. Because this is a structure within a
chain of search results, freeing this structure will free part of
the chain of search results. When you are done working with the
search results, you can free the chain itself, rather than
individual structures within the chain.</p>

<p>For more information, see <a href="search.htm#c6-iterating-through-a-chain-of-results">"Iterating
Through a Chain of Results."</a></p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#search-ext">ldap_search_ext()</a>,
<a href="function.htm#search-ext-s">ldap_search_ext_s()</a>,
<a href="function.htm#next-reference">ldap_next_reference()</a>.</code></p>

<h2 id="free-friendlymap">ldap_free_friendlymap()</h2>

<p>The <code>ldap_free_friendlymap()</code> function frees the 
structures allocated by the 
<code><a href="function.htm#friendly-name">ldap_friendly_name()</a></code> 
function.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_free_friendlymap( FriendlyMap *map );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-53 - ldap_free_friendlymap() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>map</code></td>
  <td>Pointer to the mapping structure in memory.</td>
 </tr>
</table>

<p><strong>Example</strong></p>

<p>The following section of code frees memory allocated by the
<code>ldap_friendly_name()</code> function.</p>

<p>
 <strong>Code Example 18-15 - ldap_free_friendlymap() code example</strong>
</p>

<pre class="code">...
FriendlyMap *map;
...
ldap_free_friendlymap( map );
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#friendly-name">ldap_friendly_name()</a>.</code></p>

<h2 id="free-sort-keylist">ldap_free_sort_keylist()</h2>

<p>Frees the structures allocated by the
<code><a href="function.htm#create-sort-keylist">ldap_create_sort_keylist()</a></code>
function.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_free_sort_keylist (LDAPsortkey **sortKeyList);</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-54 - ldap_free_sort_keylist() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>sortKeyList</code></td>
  <td>
   Array of <code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code>
   structures that you want to free from memory.
  </td>
 </tr>
</table>

<p><strong>Description</strong></p>

<p>The <code>ldap_free_sort_keylist()</code> function frees the
array of <code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code>
structures allocated by the
<code><a href="function.htm#create-sort-keylist">ldap_create_sort_keylist()</a></code>
function.</p>

<p>When you are done sorting results, you can call this function to
free the memory that you have allocated.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#create-sort-keylist">ldap_create_sort_keylist()</a>.</code></p>

<h2 id="free-urldesc">ldap_free_urldesc()</h2>

<p>The <code>ldap_free_urldesc()</code> function frees memory
allocated by the
<code><a href="function.htm#url-parse">ldap_url_parse()</a></code>
function. For more information, see
<a href="url.htm#free_components">"Freeing the Components of an LDAP URL."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_free_urldesc( LDAPURLDesc *ludp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-55 - ldap_free_urldesc() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ludp</code></td>
  <td>Pointer to a <code>LDAPURLDesc</code> structure.</td>
 </tr>
</table>

<p><strong>Example</strong></p>

<p>The following section of code parses an LDAP URL and then frees
the <code><a href="datatype.htm#LDAPURLDesc">LDAPURLDesc</a></code>
structure from memory after verifying that the LDAP URL is valid.</p>

<p>
 <strong>Code Example 18-16 - ldap_free_urldesc() code example</strong>
</p>

<pre class="code">>#include &lt;stdio.h&gt;
#include &lt;ldap.h&gt;
...
char *my_url = "ldap://ldap.example.com:5000/dc=example,dc=com?cn,mail,telephoneNumber?sub? \
  (sn=Jensen)";
LDAPURLDesc *ludpp;
int res, i;
...
if ( ( res = ldap_url_parse( my_url, &amp;ludpp ) ) != 0 ) {
  switch( res ){
    case LDAP_URL_ERR_NOTLDAP:
      printf( "URL does not begin with \"ldap://\"\n" );
      break;
    case LDAP_URL_ERR_NODN:
      printf( "URL does not contain a distinguished name\n" );
      break;
    case LDAP_URL_ERR_BADSCOPE:
      printf( "URL contains an invalid scope\n" );
      break;
    case LDAP_URL_ERR_MEM:
      printf( "Not enough memory\n" );
      break;
    default:
      printf( "Unknown error\n" );
  }
  return( 1 );
}
printf( "URL is a valid LDAP URL\n" );
ldap_free_urldesc( ludpp );
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#url-parse">ldap_url_parse()</a>.</code></p>

<h2 id="friendly-name">ldap_friendly_name()</h2>

<p>The <code>ldap_friendly_name()</code> function maps a set of
"unfriendly names" (for example, a two-letter country code such as
"<code>IS</code>") to "friendly names" (for example, the full names
of countries, such as "<code>Iceland</code>").</p>

<p>This function relies on the existence of a file mapping
"unfriendly names" to "friendly names". The names in the file are
tab-delimited, as shown in the example file below:</p>

<pre>unfriendly_name&gt;        &lt;friendly_name&gt;
AD        Andorra
AE        United Arab Emirates
AF        Afghanistan
AG        Antigua and Barbuda
AI        Anguilla</pre>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
char * ldap_friendly_name( char *filename, char *uname,
  FriendlyMap *map );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-56 - ldap_friendly_name() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>filename</code></td>
  <td>
   Name of the map file listing the "unfriendly names" and "friendly
   names."
  </td>
 </tr>
 <tr>
  <td><code>uname</code></td>
  <td>"Unfriendly name" for which you want to find the "friendly name."</td>
 </tr>
 <tr>
  <td><code>map</code></td>
  <td>
   Pointer to the mapping in memory. Initialize this pointer to
   <code>NULL</code> on the first call, then use the pointer during
   subsequent calls so that the mapping file does not need to be
   read again.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the "friendly name" for the specified
  "unfriendly name".
 <li>
  If unsuccessful (for example, if the file cannot be read, if the
  file is in a bad format, or if the map parameter is set to
  <code>NULL</code>), returns the original name (the name you passed
  as the <code>uname</code> parameter).
</ul>

<p><strong>Example</strong></p>

<p>The following section of code reads in a map of friendly names
and prints the name corresponding to the unfriendly name "IS".</p>

<p>
 <strong>Code Example 18-17 - ldap_friendly_name() code example</strong>
</p>

<pre class="code">#include &lt;stdio.h&gt;
...
FriendlyMap map = NULL;
char *map_file = "/home/bjensen/ldapsdk/examples/ldapfriendly";
char *unfriendly_name = "IS";
char *friendly_name;
...
/* Read the ldapfriendly file into the map in memory */
friendly_name = ldap_friendly_name( map_file, unfriendly_name, &amp;map );
printf( "Friendly Name for %s: %s\n", unfriendly_name, friendly_name );

/* Since the file is in memory now, no need to reference it in subsequent calls */
friendly_name = ldap_friendly_name( NULL, "VI", &amp;map );
printf( "Friendly Name for VI: %s\n", friendly_name );
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#free-friendlymap">ldap_free_friendlymap()</a>.</code></p>

<h2 id="get-dn">ldap_get_dn()</h2>

<p>The <code>ldap_get_dn()</code> routine returns the distinguished
name (DN) for an entry in a chain of search results. You can get an
entry from a chain of search results by calling the
<code><a href="function.htm#first-entry">ldap_first_entry()</a></code> and
<code><a href="function.htm#next-entry">ldap_next_entry()</a></code>
functions. For more information, see
<a href="search.htm#c6-getting-distinguished-names-for-each-entry">"Getting 
Distinguished Names for Each Entry."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
char * ldap_get_dn( LDAP *ld, LDAPMessage *entry );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-57 - ldap_get_dn() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>entry</code></td>
  <td>
   Pointer to an entry in a chain of search results, as returned by
   the <code><a href="function.htm#first-entry">ldap_first_entry()</a></code>
   and <code><a href="function.htm#next-entry">ldap_next_entry()</a></code>
   functions.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the distinguished name (DN) for the
  specified entry.
 <li>
  If unsuccessful, returns a <code>NULL</code> and sets the
  appropriate error code in the <a href="datatype.htm#LDAP">LDAP</a>
  structure. To get the error code, call the
  <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
  function. (See <a href="error.htm">Chapter 19 - Result Codes</a>
  for a complete listing of error codes.)
</ul>

<p><strong>Example</strong></p>

<p>The following section of code prints the distinguished name for
each entry found in a search.</p>

<p>
 <strong>Code Example 18-18 - ldap_get_dn() code example</strong>
</p>

<pre class="code">#include &lt;stdio.h&gt;
#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result, *e;
char *dn;
char *my_searchbase = "dc=example,dc=com";
char *my_filter = "(sn=Jensen)";
...
/* Search the directory */
if ( ldap_search_s( ld, my_searchbase, LDAP_SCOPE_SUBTREE, my_filter,
  NULL, 0, &amp;result ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_search_s" );
  return( 1 );
}

/* For each matching entry found, print out the name of the entry.*/
for ( e = ldap_first_entry( ld, result ); e != NULL;
  e = ldap_next_entry( ld, e ) ) {
  if ( ( dn = ldap_get_dn( ld, e ) ) != NULL ) {
    printf( "dn: %s\n", dn );
    /* Free the memory used for the DN when done */
    ldap_memfree( dn );
  }
}
/* Free the result from memory when done. */
ldap_msgfree( result );
...</pre>

<p><strong>See Also:</strong><br>

<p><code><a href="function.htm#first-entry">ldap_first_entry()</a>,
<a href="function.htm#next-entry">ldap_next_entry()</a>.</code></p>

<h2 id="get-entry-controls">ldap_get_entry_controls()</h2>

<p>Gets the LDAP controls included with a directory entry in a set
of search results.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_get_entry_controls( LDAP *ld, LDAPMessage *entry,
  LDAPControl ***serverctrlsp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-58 - ldap_get_entry_controls() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>entry</code></td>
  <td>
   Pointer to an
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure representing an entry in a chain of search results.
  </td>
 </tr>
 <tr>
  <td><code>serverctrlsp</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures, which represent the LDAPv3 server controls returned
   by the server.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>
<ul>
 <li>
  <code>LDAP_SUCCESS</code> if the LDAP controls were successfully
  retrieved.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when decoding
  the BER-encoded message.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_get_entry_controls()</code> function retrieves the
LDAPv3 controls included in a directory entry in a chain of search
results.</p>

<p>The LDAP controls are specified in an array of
<code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structures.
(Each <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
structure represents an LDAP control.)</p>

<p>At this point in time, the entry notification controls (which are
used with persistent search controls) are the only controls that are
returned with individual entries. Other controls are returned with
results sent from the server. You can call
<code><a href="function.htm#parse-result">ldap_parse_result()</a></code> to
retrieve those controls.</p>

<h2 id="getfilter-free">ldap_getfilter_free()</h2>

<p>The <code>ldap_getfilter_free()</code> function frees the memory
used by a filter set. Once you call this routine, the
<code><a href="datatype.htm#LDAPFiltDesc">LDAPFiltDesc</a></code> structure
is no longer valid and cannot be used again. For more information,
see <a href="filter.htm#free_filter_mem">"Freeing Filters from Memory."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_getfilter_free( LDAPFiltDesc *lfdp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-59 - ldap_getfilter_free() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>lfdp</code></td>
  <td>
   Pointer to a
   <code><a href="datatype.htm#LDAPFiltDesc">LDAPFiltDesc</a></code>
   structure.
  </td>
 </tr>
</table>

<p><strong>Example</strong></p>

<p>The following section of code frees the
<code><a href="datatype.htm#LDAPFiltDesc">LDAPFiltDesc</a></code> structure
from memory after all searches are completed.</p>

<p>
 <strong>Code Example 18-19 - ldap_getfilter_free code example</strong>
</p>

<pre class="code">>#include &lt;ldap.h&gt;
...
LDAPFiltDesc *lfdp;
char *filter_file = "myfilters.conf";
...
/* Read the filter configuration file into an LDAPFiltDesc structure */
lfdp = ldap_init_getfilter( filter_file );
...
/* Retrieve filters and perform searches */
...
/* Free the configuration file (the LDAPFiltDesc structure) */
ldap_getfilter_free( lfdp );
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#init-getfilter">ldap_init_getfilter()</a>,
<a href="function.htm#init-getfilter-buf">ldap_init_getfilter_buf()</a>.</code></p>

<h2 id="getfirstfilter">ldap_getfirstfilter()</h2>

<p>The <code>ldap_getfirstfilter()</code> function retrieves the
first filter that is appropriate for a given value. For more
information, see <a href="filter.htm#retrieve_filter">"Retrieving Filters."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
LDAPFiltInfo * ldap_getfirstfilter( LDAPFiltDesc *lfdp,
  char *tagpat, char *value );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-60 - ldap_getfirstfilter() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>lfdp</code></td>
  <td>
   Pointer to an
   <code><a href="datatype.htm#LDAPFiltDesc">LDAPFiltDesc</a></code> structure.
  </td>
 </tr>
 <tr>
  <td><code>tagpat</code></td>
  <td>Regular expression for a tag in the filter configuration.</td>
 </tr>
 <tr>
  <td><code>value</code></td>
  <td>Value for which to find the first appropriate filter.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns a pointer to an
  <code><a href="datatype.htm#LDAPFiltInfo">LDAPFiltInfo</a></code> structure.
 <li>If no more filters can be returned, returns a <code>NULL</code>.
 <li>If unsuccessful, returns a <code>NULL</code>.
</ul>

<p><strong>Example</strong></p>

<p>The following section of code is based on the <code>getfilt</code>
command-line program example provided with the LDAP C SDK. The
program prompts the user to enter search criteria. Based on the
criteria entered, the program retrieves filters that match the search
criteria. The example uses the filter configuration file shown in
<a href="filter.htm#understand_config_file">"Understanding the Configuration File
Syntax."</a></p>

<p>
 <strong>Code Example 18-20 - ldap_getfirstfilter() code example</strong>
</p>

<pre class="code">#include &lt;stdio.h&gt;
#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result, *e;
BerElement *ber;
char *a, *dn;
char **vals;
int i;
LDAPFiltDesc *ldfp;
LDAPFiltInfo *ldfi;
char buf[ 80 ]; /* Contains the search criteria */
int found;
...
/* Load the filter configuration file into an LDAPFiltDesc structure */
if ( ( ldfp = ldap_init_getfilter( "myfilters.conf" ) ) == NULL ) {
  perror( "Cannot open filter configuration file" );
  return( 1 );
}

/* Read a string to search for */
printf( "Enter a string to search for: " );
gets( buf );
if ( strlen( buf ) == 0 ) {
  fprintf( stderr, "usage: %s search-string\n", argv[ 0 ]);
  return( 1 );
}

/* Select a filter to use when searching for the value in buf */
found = 0;
for ( ldfi = ldap_getfirstfilter( ldfp, "people", buf ); ldfi != NULL; ldfi =
ldap_getnextfilter( ldfp ) ) {

  /* Use the selected filter to search the directory */
  if ( ldap_search_s( ld, "dc=example,dc=com, ldfi-&gt;lfi_scope,
   ldfi-&gt;lfi_filter, NULL, 0, &amp;result ) != LDAP_SUCCESS ) {
    ldap_perror( ld, "ldap_search_s" );
    return( 1 );
  } else {

    /* Once a filter gets results back, stop iterating through the different filters */
    if ( ( found = ldap_count_entries( ld, result ) &gt; 0 ) ) {
      break;
    } else {
      ldap_msgfree( result );
    }
  }
}

if ( found == 0 ) {
  printf( "No matching entries found.\n" );
} else {
  printf( "Found %d %s match%s for \"%s\"\n\n", found,
   ldfi-&gt;lfi_desc, found == 1 ? "" : "es", buf );
}

ldap_msgfree( result );
ldap_getfilter_free( ldfp );
...</pre>

<p><strong>See Also:</strong><br>

<p><code><a href="function.htm#init-getfilter">ldap_init_getfilter()</a>,
<a href="function.htm#init-getfilter-buf">ldap_init_getfilter_buf()</a>,
<a href="function.htm#getnextfilter">ldap_getnextfilter()</a>.</code></p>

<h2 id="get-lang-values">ldap_get_lang_values()</h2>

<p>The <code>ldap_get_lang_values()</code> function returns a
<code>NULL</code>-terminated array of an attribute's string values
that match a specified language subtype.</p>

<p>If you want to retrieve binary data from an attribute, call the
<code><a href="function.htm#get-lang-values-len">ldap_get_lang_values_len()</a></code>
function instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
char ** ldap_get_lang_values( LDAP *ld, LDAPMessage *entry,
  const char *target, char **type );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-61 - ldap_get_lang_values() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>entry</code></td>
  <td>Entry retrieved from the directory.</td>
 </tr>
 <tr>
  <td><code>target</code></td>
  <td>
   Attribute type (including an optional language subtype) that you
   want to retrieve the values of.
  </td>
 </tr>
 <tr>
  <td><code>type</code></td>
  <td>
   Pointer to a buffer that returns the attribute type retrieved by
   this function.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns a <code>NULL</code>-terminated array of the
  attribute's values.
 <li>
  If unsuccessful or if no such attribute exists in the entry,
  returns a NULL and sets the appropriate error code in the
  <a href="datatype.htm#LDAP">LDAP</a> structure. To get the error
  code, call the
  <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
  function. (See <a href="error.htm">Chapter 19 "Result Codes</a>"
  for a complete listing of error codes.)
</ul>

<p><strong>Description</strong></p>

<p>Unlike the
<code><a href="function.htm#get-values">ldap_get_values()</a></code>
function, if a language subtype is specified, this function first
attempts to find and return values that match that subtype (for
example, <code>cn;lang-en</code>).</p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#first-entry">ldap_first_entry()</a>,
<a href="function.htm#next-entry">ldap_next_entry()</a>,
<a href="function.htm#first-attribute">ldap_first_attribute()</a>,
<a href="function.htm#next-attribute">ldap_next_attribute()</a>,
<a href="function.htm#get-lang-values-len">ldap_get_lang_values_len()</a>,
<a href="function.htm#get-values">ldap_get_values()</a>.</code></p>

<h2 id="get-lang-values-len">ldap_get_lang_values_len()</h2>

<p>The <code>ldap_get_lang_values_len()</code> function returns a
NULL-terminated array of pointers to
<a href="datatype.htm#berval">berval</a> structures, each containing
the length and pointer to a binary value of an attribute for a given
entry. Use the
<code><a href="function.htm#get-lang-values">ldap_get_lang_values()</a></code>
routine instead of this routine if the attribute values are string
values.</p>

<p>For more information, see <a href="search.htm#c6-getting-the-values-of-an-attribute">"Getting the
Values of an Attribute."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
struct berval ** ldap_get_lang_values_len( LDAP *ld,
  LDAPMessage *entry, const char *target, char **type );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-62 - ldap_get_lang_values_len() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>entry</code></td>
  <td>
   Result returned by the
   <code><a href="function.htm#result">ldap_result()</a></code> or
   <code><a href="function.htm#search-s">ldap_search_s()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>target</code></td>
  <td>
   Attribute returned by
   <code><a href="function.htm#first-attribute">ldap_first_attribute()</a></code>
   or <code><a href="function.htm#next-attribute">ldap_next_attribute()</a></code>,
   or the attribute as a literal string, such as
   "<code>jpegPhoto</code>" or "<code>audio</code>".
  </td>
 </tr>
 <tr>
  <td><code>type</code></td>
  <td>
   Pointer to a buffer that returns the attribute type retrieved by
   this function.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns a NULL-terminated array of pointers to
  <code>berval</code> structures, which in turn contain pointers to
  the attribute's binary values.
 <li>
  If unsuccessful or if no such attribute exists in the entry,
  returns a NULL and sets the appropriate error code in the
  <a href="datatype.htm#LDAP">LDAP</a> structure. To get the error
  code, call the
  <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
  function. (See <a href="error.htm">Chapter 19 "Result Codes</a>"
  for a complete listing of error codes.)
</ul>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#first-entry">ldap_first_entry()</a>,
<a href="function.htm#next-entry">ldap_next_entry()</a>,
<a href="function.htm#first-attribute">ldap_first_attribute()</a>,
<a href="function.htm#next-attribute">ldap_next_attribute()</a>,
<a href="function.htm#get-lang-values">ldap_get_lang_values()</a>,
<a href="function.htm#get-values-len">ldap_get_values_len()</a>.</code></p>

<h2 id="get-lderrno">ldap_get_lderrno()</h2>

<p>The <code>ldap_get_lderrno()</code> function gets information
about the last error that occurred for an LDAP operation. You can
also call this function to get error codes for functions that do not
return errors (such as
<code><a href="function.htm#next-attribute">ldap_next_attribute()</a></code>).</p>

<p>For more information, see <a href="using.htm#get_info_error">"Getting
Information About the Error."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_get_lderrno( LDAP *ld, char **m, char **s );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-63 - ldap_get_lderrno() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>m</code></td>
  <td>
   In the event of an <code>LDAP_NO_SUCH_OBJECT</code> error return,
   this parameter contains the portion of the DN that identifies an
   existing entry. (See <a href="using.htm#receive_portion_dn_matching_entry">"Receiving the
   Portion of the DN Matching an Entry."</a>)
  </td>
 </tr>
 <tr>
  <td><code>s</code></td>
  <td>The text of the error message.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>The LDAP error code for the last operation. (See
<a href="error.htm">Chapter 19 - Result Codes</a> for a complete
listing of error codes.)</p>

<p><strong>Example</strong></p>

<p>The following section of code attempts to add a new user to the
directory. If the entry identified by a DN does not exist, the
server sends the client a portion of the DN that find an existing
entry. This DN is returned to the client as the variable
<code>matched</code>. (See <a href="using.htm#receive_portion_dn_matching_entry">"Receiving the
Portion of the DN Matching an Entry"</a> for details.)</p>

<p>
 <strong>Code Example 18-21 - ldap_get_lderrno() code example</strong>
</p>

<pre class="code">LDAP *ld;
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";
LDAPMod **list_of_attrs;
char *matched;
int rc;
...
if ( ldap_add_s( ld, dn, list_of_attrs ) != LDAP_SUCCESS ) {
  rc = ldap_get_lderrno( ld, &amp;matched, NULL );
  return( rc );
}
...</pre>

<p>In the example above, if no organizational unit named New
Department exists, the <code>matched</code> variable is set to:</p>

<pre>dc=example,dc=com</pre>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#err2string">ldap_err2string()</a>,
<a href="function.htm#perror">ldap_perror()</a>,
<a href="function.htm#result2error">ldap_result2error()</a>,
<a href="function.htm#set-lderrno">ldap_set_lderrno()</a>.</code></p>

<h2 id="getnextfilter">ldap_getnextfilter()</h2>

<p>The <code>ldap_getnextfilter()</code> function retrieves the next
filter that is appropriate for a given value. Call this function to
get subsequent filters after calling
<code><a href="function.htm#getfirstfilter">ldap_getfirstfilter()</a></code>.
For more information, see <a href="filter.htm#retrieve_filter">"Retrieving
Filters."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
LDAPFiltInfo * ldap_getnextfilter( LDAPFiltDesc *lfdp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-64 - ldap_getnextfilter() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>lfdp</code></td>
  <td>
   Pointer to an
   <code><a href="datatype.htm#LDAPFiltDesc">LDAPFiltDesc</a></code>
   structure.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns a pointer to an
  <code><a href="datatype.htm#LDAPFiltInfo">LDAPFiltInfo</a></code> structure.
 <li>If no more filters can be returned, returns a <code>NULL</code>.
 <li>If unsuccessful, returns a <code>NULL</code>.
</ul>

<p><strong>Example</strong></p>

<p>See the example under
<code><a href="function.htm#getfirstfilter">ldap_getfirstfilter()</a></code>.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#getfirstfilter">ldap_getfirstfilter()</a>.</code></p>

<h2 id="get-option">ldap_get_option()</h2>

<p>The function <code>ldap_get_option()</code> gets session
preferences from an
<code><a href="datatype.htm#LDAP">LDAP</a></code> structure. For
information on the options you can retrieve with this function, see
<code><a href="function.htm#set-option">ldap_set_option()</a></code>.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_get_option( LDAP *ld, int option, void *optdata );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-65 - ldap_get_option() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>option</code></td>
  <td>
   Option that you want to retrieve.
   <p></p>
   The option parameter must be set to one of the option values, as
   detailed in <a href="function.htm#table-18-117-set-option-parameter">Table 
   18-117</a>, which describes the function parameters for 
   <code>ldap_set_option()</code>.
  </td>
 </tr>
 <tr>
  <td><code>optdata</code></td>
  <td>Pointer to the buffer in which the value of the option will be put.</td>
 </tr>
</table>

<p>The following table describes the options that you can retrieve
with <code>ldap_get_option()</code>.</p>

<p>
 <strong>Table 18-66 - Options for the ldap_get_options() function</strong>
</p>

<table class="data">
 <tr>
  <td><code>LDAP_OPT_API_FEATURE_INFO</code></td>
  <td>Retrieves information about the revision of a supported LDAP feature.</td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_API_INFO</code></td>
  <td>
   Retrieves information the API and the extensions supported,
   including the supported API version, protocol version, the names
   of the supported API extensions with their vendor name version.
   For details on the structure returned, refer to the
   <code>ldap.h</code> header file.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_CLIENT_CONTROLS</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing the LDAPv3 client controls you want sent
   with every request by default.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(LDAPControl ***)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_DESC</code></td>
  <td>
   Socket descriptor underlying the main LDAP connection.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(LBER_SOCKET *)</code>. The <code>LBER_SOCKET</code> data
   type depends on the platform that you are using:
   <p></p>
   <ul>
    <li><code>int</code> in UNIX.
    <li><code>SOCKET</code> in Windows.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_DEREF</code></td>
  <td>
   Determines how aliases work during a search.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   <code>optdata</code> can be one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_DEREF_NEVER</code> specifies that aliases are never
     dereferenced.
    <li>
     <code>LDAP_DEREF_SEARCHING</code> specifies that aliases are
     dereferenced when searching under the base object (but not when
     finding the base object).
    <li>
     <code>LDAP_DEREF_FINDING</code> specifies that aliases are
     dereferenced when finding the base object (but not when
     searching under the base object).
    <li>
     <code>LDAP_DEREF_ALWAYS</code> specifies that aliases are
     always dereferenced when finding and searching under the base
     object.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_DNS_FN_PTRS</code></td>
  <td>
   Lets you use alternate DNS functions for getting the host entry
   of the LDAP server.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(struct <a href="datatype.htm#ldap_dns_fns">ldap_dns_fns</a> *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_ERROR_NUMBER</code></td>
  <td>
   Result code for the most recent LDAP error that occurred for
   this session.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_ERROR_STRING</code></td>
  <td>
   Error message returned with the result code for the most recent
   LDAP error that occurred for this session.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(char **)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_EXTRA_THREAD_FN_PTRS</code></td>
  <td>
   Lets you specify the locking and semaphore functions that you
   want called when getting results from the server. (See
   <a href="threaded.htm">Chapter 16 - Writing Multithreaded
   Clients</a> for details.)
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(struct <a href="datatype.htm#ldap_extra_thread_fns">ldap_extra_thread_fns</a> *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_IO_FN_PTRS</code></td>
  <td>
   Lets you use alternate communication stacks.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(struct <a href="datatype.htm#ldap_io_fns">ldap_io_fns</a> *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_MATCHED_DN</code></td>
  <td>
   Gets the matched DN value returned with the most recent LDAP
   error that occurred for this session.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_MEMALLOC_FN_PTRS</code></td>
  <td>
   Gets a pointer to the callback structure which you previously set.
   <p></p>
   The data type for the <code>optdata</code> parameter is<br>
   (<code>struct ldap_memalloc_fns<a href="datatype.htm#ldap_io_fns">ldap_io_fns</a></code> *).
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_PROTOCOL_VERSION</code></td>
  <td>
   Version of the protocol supported by your client.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   You can specify either <code>LDAP_VERSION2</code> or
   <code>LDAP_VERSION3</code>. If no version is set, the default is
   <code>LDAP_VERSION2</code>.
   <p></p>
   In order to use LDAPv3 features, you need to set the protocol
   version to <code>LDAP_VERSION3</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_REBIND_ARG</code></td>
  <td>
   Lets you set the last argument passed to the routine specified by
   <code>LDAP_OPT_REBIND_FN</code>.
   <p></p>
   You can also set this option by calling the
   <code><a href="function.htm#set-rebind-proc">ldap_set_rebind_proc()</a></code>
   function.
   The data type for the <code>optdata</code> parameter is
   <code>(void *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_REBIND_FN</code></td>
  <td>
   Lets you set the routine to be called when you need to
   authenticate a connection with another LDAP server (for example,
   during the course of following a referral).
   <p></p>
   You can also set this option by calling the
   <code><a href="function.htm#set-rebind-proc">ldap_set_rebind_proc()</a></code>
   function.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(LDAP_REBINDPROC_CALLBACK *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_RECONNECT</code></td>
  <td>
   If the connection to the server is lost, determines whether or
   not the same connection handle should be used to reconnect to the
   server.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   <code>optdata</code> can be one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_OPT_ON</code> specifies that the same connection
     handle can be used to reconnect to the server.
    <li>
    <code>LDAP_OPT_OFF</code> specifies that you want to create a
    new connection handle to connect to the server.
   </ul>
   <p></p>
   By default, this option is off.
   <p></p>
   For details, see <a href="using.htm#handle_failover">"Handling Failover."</a>
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_REFERRALS</code></td>
  <td>
   Determines whether or not the client should follow referrals.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   <code>optdata</code> can be one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_OPT_ON</code> specifies that the server should
     follow referrals.
    <li>
     <code>LDAP_OPT_OFF</code> specifies that the server should not
     follow referrals.
   </ul>
   <p></p>
   By default, the client follows referrals.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_REFERRAL_HOP_LIMIT</code></td>
  <td>
   Maximum number of referrals the client should follow in a sequence
   (in other words, the client can only be referred this number of
   times before it gives up).
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   By default, the maximum number of referrals that the client can
   follow in a sequence is 5 for the initial connection.
   <p></p>
   Note that this limit does not apply to individual requests that
   generate multiple referrals in parallel.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_RESTART</code></td>
  <td>
   Determines whether or not LDAP I/O operations should be restarted
   automatically if they are prematurely aborted.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   <code>optdata</code> can be one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_OPT_ON</code> specifies that I/O operations should
     be restarted automatically.
    <li>
     <code>LDAP_OPT_OFF</code> specifies that I/O operations should
     not be restarted automatically.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_SERVER_CONTROLS</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing the LDAPv3 server controls you want sent
   with every request by default.
   <p></p>
   Typically, since controls are specific to the type of request,
   you may want to pass the controls using operation-specific
   functions (such as
   <code><a href="function.htm#add-ext">ldap_add_ext()</a></code>)
   instead.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(LDAPControl ***)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_SIZELIMIT</code></td>
  <td>
   Maximum number of entries that should be returned by the server
   in search results.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   Note that the LDAP server may impose a smaller size limit than
   the limit you specify. (The server administrator has the ability
   to set this limit.)
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_SSL</code></td>
  <td>
   Determines whether or not SSL is enabled.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   <code>optdata</code> can be one of the following values:
   <ul>
    <li><code>LDAP_OPT_ON</code> specifies that SSL is enabled.
    <li><code>LDAP_OPT_OFF</code> specifies that SSL is disabled.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_THREAD_FN_PTRS</code></td>
  <td>
   Lets you specify the thread function pointers. (See
   <a href="threaded.htm">Chapter 16 - Writing Multithreaded
   Clients</a> for details.)
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(struct <a href="datatype.htm#ldap_thread_fns">ldap_thread_fns</a> *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_TIMELIMIT</code></td>
  <td>
   Maximum number of seconds that should be spent by the server when
   answering a search request.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   Note that the LDAP server may impose a shorter time limit than
   the limit you specify. (The server administrator has the ability
   to set this limit.)
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>-1</code> if unsuccessful.
</ul>

<p><strong>Examples</strong></p>

<p>The following example gets the session preference for the maximum
number of entries to be returned from search operations.</p>

<p>
 <strong>Code Example 18-22 - ldap_get_option() code example</strong>
</p>

<pre class="code">...
LDAP *ld;
int max_ret;
...
/* Get the maximum number of entries returned */
if (ldap_get_option, LDAP_OPT_SIZELIMIT, &amp;max_ret) != LDAP_SUCCESS) {
  ldap_perror( ld, "ldap_get_option" );
  return( 1 );
}</pre>

<p>Here are two small sections of code that show how to use the
<code>LDAP_OPT_API_FEATURE_INFO</code> and the
<code>LDAP_OPT_API_INFO</code> options, respectively:</p>

<pre class="code">ldfi.ldapaif_info_version = LDAP_FEATURE_INFO_VERSION;
ldfi.ldapaif_name = "VIRTUAL_LIST_VIEW";
if (ldap_get_option(NULL, LDAP_OPT_API_FEATURE_INFO, &amp;ldfi)==0) {
/* use the info here */ }

LDAPIInfo ldai;
ldai.ldapiai_info_version = LDAP_API_INFO_VERSION;
if (ldap_get_option( NULL, LDAP_OPT_API_INFO, &amp;ldia ) == 0) {
/* use the ldai info here */
}</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#init">ldap_init()</a>,
<a href="function.htm#set-option">ldap_set_option()</a>.</code></p>

<h2 id="get-values">ldap_get_values()</h2>

<p>The <code>ldap_get_values()</code> function returns a
<code>NULL</code>-terminated array of an attribute's string values
for a given entry. Use the
<code><a href="function.htm#get-values-len">ldap_get_values_len()</a></code>
function instead of this function if the attribute values are binary.</p>

<p>For more information, see <a href="search.htm#c6-getting-the-values-of-an-attribute">"Getting the
Values of an Attribute."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
char ** ldap_get_values( LDAP *ld, LDAPMessage *entry,
  const char *target );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-67 - ldap_get_values() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>entry</code></td>
  <td>
   Result returned by the
   <code><a href="function.htm#result">ldap_result()</a></code> or
   <code><a href="function.htm#search-s">ldap_search_s()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>target</code></td>
  <td>
   Attribute returned by
   <code><a href="function.htm#first-attribute">ldap_first_attribute()</a></code>
   or <code><a href="function.htm#next-attribute">ldap_next_attribute()</a></code>,
   or the attribute as a literal string, such as
   "<code>jpegPhoto</code>" or "<code>audio</code>".
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns a <code>NULL</code>-terminated array of the
  attribute's values.
 <li>
  If unsuccessful or if no such attribute exists in the entry,
  returns a NULL and sets the appropriate error code in the
  <a href="datatype.htm#LDAP">LDAP</a> structure. To get the error
  code, call the
  <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
  function. (See <a href="error.htm">Chapter 19 - Result
  Codes</a> for a complete listing of error codes.)
</ul>

<p><strong>Example</strong></p>

<p>The following section of code gets and prints the values of an
attribute in an entry. This example assumes that all attributes have
string values.</p>

<p>
 <strong>Code Example 18-23 - ldap_get_values() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result, *e;
BerElement *ber;
char *a;
char **vals;
char *my_searchbase = "dc=example,dc=com";
char *my_filter = "(sn=Jensen)";
int i;
...
/* Search the directory */
if ( ldap_search_s( ld, my_searchbase, LDAP_SCOPE_SUBTREE, my_filter,
  NULL, 0, &amp;result ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_search_s" );
  return( 1 );
}

/* Get the first matching entry.*/
e = ldap_first_entry( ld, result );

/* Get the first matching attribute */
a = ldap_first_attribute( ld, e, &amp;ber );

/* Get the values of the attribute */
if ( ( vals = ldap_get_values( ld, e, a ) ) != NULL ) {
  for ( i = 0; vals[i] != NULL; i++ ) {
    /* Print the name of the attribute and each value */
    printf( "%s: %s\n", a, vals[i] );
  }
  /* Free the attribute values from memory when done. */
  ldap_value_free( vals );
}
...</pre>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#first-entry">ldap_first_entry()</a>,
<a href="function.htm#next-entry">ldap_next_entry()</a>,
<a href="function.htm#first-attribute">ldap_first_attribute()</a>,
<a href="function.htm#next-attribute">ldap_next_attribute()</a>,
<a href="function.htm#get-lang-values">ldap_get_lang_values()</a>,
<a href="function.htm#get-values-len">ldap_get_values_len()</a>.</code></p>

<h2 id="get-values-len">ldap_get_values_len()</h2>

<p>The <code>ldap_get_values_len()</code> function returns a
<code>NULL</code>-terminated array of pointers to
<code><a href="datatype.htm#berval">berval</a></code> structures,
each containing the length and pointer to a binary value of an
attribute for a given entry. Use the
<code><a href="function.htm#get-values">ldap_get_values()</a></code>
routine instead of this routine if the attribute values are string
values.</p>

<p>For more information, see <a href="search.htm#c6-getting-the-values-of-an-attribute">"Getting
the Values of an Attribute."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
struct berval ** ldap_get_values_len( LDAP *ld,
  LDAPMessage *entry, const char *target );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-68 - ldap_get_values_len() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>entry</code></td>
  <td>
   Result returned by the
   <code><a href="function.htm#result">ldap_result()</a></code> or
   <code><a href="function.htm#search-s">ldap_search_s()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>target</code></td>
  <td>
   Attribute returned by
   <code><a href="function.htm#first-attribute">ldap_first_attribute()</a></code>
   or <code><a href="function.htm#next-attribute">ldap_next_attribute()</a></code>,
   or the attribute as a literal string, such as
   "<code>jpegPhoto</code>" or "<code>audio</code>".
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns a <code>NULL</code>-terminated array of
  pointers to <code>berval</code> structures, which in turn contain
  pointers to the attribute's binary values.
 <li>
  If unsuccessful or if no such attribute exists in the entry,
  returns a NULL and sets the appropriate error code in the
  <a href="datatype.htm#LDAP">LDAP</a> structure. To get the error
  code, call the
  <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
  function. (See <a href="error.htm">Chapter 19 - Result
  Codes</a> for a complete listing of error codes.)
</ul>

<p><strong>Example</strong></p>

<p>The following section of code gets the first value of the
<code>jpegPhoto</code> attribute and saves the JPEG data to a file.</p>

<p>
 <strong>Code Example 18-24 - ldap_get_values_len() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result, *e;
BerElement *ber;
struct berval photo_data;
struct berval **list_of_photos;
FILE *out;
char *my_searchbase = "dc=example,dc=com";
char *my_filter = "(sn=Jensen)";
...
/* Search the directory */
if ( ldap_search_s( ld, my_searchbase, LDAP_SCOPE_SUBTREE, my_filter, NULL,
  0, &amp;result ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_search_s" );
  return( 1 );
}

/* Get the first matching entry.*/
e = ldap_first_entry( ld, result );

/* Get the value of the jpegPhoto attribute */
if ( ( list_of_photos = ldap_get_values_len( ld, e, "jpegPhoto" ) ) != NULL ) {
  /* Prepare to write the JPEG data to a file */
  if ( ( out = fopen( "photo.jpg", "wb" ) ) == NULL ) {
    perror( "fopen" );
    return( 1 );
  }
  /* Get the first JPEG */
  photo_data = *list_of_photos[0];
  /* Write the JPEG data to a file */
  fwrite( photo_data.bv_val, photo_data.bv_len, 1, out );
  fclose( out );
  /* Free the attribute values from memory when done. */
  ldap_value_free_len( list_of_photos );
}
...</pre>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#first-entry">ldap_first_entry()</a>,
<a href="function.htm#next-entry">ldap_next_entry()</a>,
<a href="function.htm#first-attribute">ldap_first_attribute()</a>,
<a href="function.htm#next-attribute">ldap_next_attribute()</a>,
<a href="function.htm#get-lang-values-len">ldap_get_lang_values_len()</a>,
<a href="function.htm#get-values">ldap_get_values()</a>.</code></p>

<h2 id="init">ldap_init()</h2>

<p>Initializes a session with an LDAP server and returns an
<a href="datatype.htm#LDAP">LDAP</a> structure that represents the
context of the connection to that server.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
LDAP * ldap_init( const char *defhost, int defport );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-69 - ldap_init() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>defhost</code></td>
  <td>
   Space-delimited list of one or more host names (or IP address in
   dotted notation, such as "141.211.83.36") of the LDAP servers
   that you want the LDAP client to connect to.
   <p></p>
   The names can be in <code>hostname:portnumber</code> format (in
   which case, <code>portnumber</code> overrides the port number
   specified by the <code>defport</code> argument.
  </td>
 </tr>
 <tr>
  <td><code>defport</code></td>
  <td>
   Default port number of the LDAP server. To specify the standard
   LDAP port (port 389), use <code>LDAP_PORT</code> as the value for
   this parameter.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns a pointer to an
  <a href="datatype.htm#LDAP">LDAP</a> structure.
 <li>If unsuccessful, returns a <code>NULL</code>.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_init()</code> function initializes a session with
an LDAP server. <code>ldap_init()</code> allocates an
<a href="datatype.htm#LDAP">LDAP</a> structure containing
information about the session, including the host name and port of
the LDAP server, preferences for the session (such as the maximum
number of entries to return in a search), and the error code of the
last LDAP operation performed.</p>

<p>You can specify a list of LDAP servers that you want to attempt
to connect to. Your client will attempt to connect to the first LDAP
server in the list. If the attempt fails, your client will attempt
to connect to the next LDAP server in the list.</p>

<p>You can specify the list of LDAP servers by passing a
space-delimited list of the host names as the host argument. For
example:</p>

<pre>...
LDAP *ld
...
ld = ldap_init( "ld1.example.com ld2.example.com \
  ld3.example.com", LDAP_PORT );</pre>

<p>In the example above, the LDAP client will attempt to connect to
the LDAP server on <code>ld1.example.com</code>, port 389. If that
server does not respond, the client will attempt to connect to the
LDAP server on <code>ld2.example.com</code>, port 389. If that
server does not respond, the client will use the server on
<code>ld3.example.com</code>, port 389.</p>

<p>If any of the servers do not use the default port specified by
the <code>defport</code> argument, use the
<code><em>host:port</em></code> format to specify the server name.
For example:</p>

<pre>...<br>
LDAP *ld
...
ld = ldap_init( "ld1.example.com ld2.example.com:38900", \
  LDAP_PORT );</pre>

<p>In the example above, the LDAP client will attempt to connect to
the LDAP server on <code>ld1.example.com</code>, port 389. If that
server does not respond, the client will attempt to connect to the
LDAP server on <code>ld2.example.com</code>, port 38900.</p>

<p>Once you initialize a session, you need to call the
<code><a href="function.htm#simple-bind">ldap_simple_bind()</a></code> or
<code><a href="function.htm#simple-bind-s">ldap_simple_bind_s()</a></code>
function to connect and authenticate to the LDAP server.</p>

<p>For more information, see
<a href="writing.htm#initialize_ldap_session">"Initializing an LDAP Session."</a></p>

<p>Note that if you are connecting to a secure LDAP server over SSL,
you should be calling the
<code><a href="function.htm#ssl-init">ldapssl_init()</a></code>
function instead. For details, see
<a href="ssl.htm">Chapter 12 "Connecting Over SSL</a>."</p>

<p><strong>Example</strong></p>

<p>The following section of code initializes a session with the LDAP
server at <code>ldap.example.com:389</code>.</p>

<p>
 <strong>Code Example 18-25 - ldap_init() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;

/* Specify the host name of the LDAP server. */
char *ldap_host = "ldap.example.com";

/* Because the LDAP server is running on the standard LDAP port
   (port 389), you can use LDAP_PORT to identify the port number. */
int ldap_port = LDAP_PORT;
...
/* Initialize the session with ldap.example.com:389 */
if ( ( ld = ldap_init( ldap_host, ldap_port ) ) == NULL ) {
  perror( "ldap_init" );
  return( 1 );
}
...
/* Subsequent calls that authenticate to the LDAP server. */
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#unbind">ldap_unbind()</a>,
<a href="function.htm#unbind-s">ldap_unbind_s()</a>.</code></p>

<h2 id="init-getfilter">ldap_init_getfilter()</h2>

<p>The <code>ldap_init_getfilter()</code> function reads a valid
LDAP filter configuration file (such as <code>ldapfilter.conf</code>)
and returns a pointer to an
<code><a href="datatype.htm#LDAPFiltDesc">LDAPFiltDesc</a></code> structure.</p>

<p>For more information, see <a href="filter.htm#load_filter_config">"Loading a
Filter Configuration File."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
LDAPFiltDesc * ldap_init_getfilter( char *fname );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-70 - ldap_init_getfilter() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>fname</code></td>
  <td>Name of the LDAP filter configuration file to use.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns a pointer to an
  <code><a href="datatype.htm#LDAPFiltDesc">LDAPFiltDesc</a></code> structure.
 <li>
  If unsuccessful (for example, if there is an error reading the
  file), returns a <code>NULL</code>.
</ul>

<p><strong>Example</strong></p>

<p>The following section of code loads the filter configuration file
named <code>myfilters.conf</code> into memory.</p>

<p>
 <strong>Code Example 18-26 - Loading a filter configuration file</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAPFiltDesc *lfdp;
char *filter_file = "myfilters.conf";
...
lfdp = ldap_init_getfilter( filter_file );
...</pre>

<p><strong>See Also:</strong><br>

<p><code><a href="function.htm#init-getfilter-buf">ldap_init_getfilter_buf()</a>,
<a href="function.htm#getfilter-free">ldap_getfilter_free()</a>.</code></p>

<h2 id="init-getfilter-buf">ldap_init_getfilter_buf()</h2>

<p>The <code>ldap_init_getfilter_buf()</code> function reads LDAP
filter configuration information from a buffer and returns a pointer
to an <code><a href="datatype.htm#LDAPFiltDesc">LDAPFiltDesc</a></code>
structure. The configuration information in the buffer must use the
correct syntax, as specified in
<a href="filter.htm#understand_config_file">"Understanding the Configuration File
Syntax."</a></p>

<p>For more information, see <a href="filter.htm#load_filter_config">"Loading a
Filter Configuration File."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
LDAPFiltDesc * ldap_init_getfilter_buf(char *buf, long buflen );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-71 - ldap_init_getfilter_buf() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>buf</code></td>
  <td>Buffer containing LDAP filter configuration information.</td>
 </tr>
 <tr>
  <td><code>buflen</code></td>
  <td>Size of the buffer</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns a pointer to an
  <code><a href="datatype.htm#LDAPFiltDesc">LDAPFiltDesc</a></code> structure.
 <li>
  If unsuccessful (for example, if there is an error reading the
  file), returns a <code>NULL</code>.
</ul>

<p><strong>Example</strong></p>

<p>The following section of code copies the following filter
configuration to a buffer in memory.</p>

<pre>"ldap-example"
  "@"      " "    "(mail=%v)"            "email address"
            "(mail=%v*)"            "start of email address"</pre>

<p>The example uses this buffer to fill an
<code><a href="datatype.htm#LDAPFiltDesc">LDAPFiltDesc</a></code> structure.</p>

<p>
 <strong>Code Example 18-27 - ldap_init_getfilter() code example</strong>
</p>

<pre class="code>>#include &lt;ldap.h&gt;
...
LDAPFiltDesc *lfdp;
char filtbuf[ 1024 ];
...
/* Create the filter config buffer */
strcpy( filtbuf, "\"ldap-example\"\n" );
strcat( filtbuf, " \"@\"\t\" \"\t\"(mail=%v)\"\t\"email address\"\n" );
strcat( filtbuf, " \t\t\"(mail=%v*)\"\t\"start of email address\"\n" );
lfdp = ldap_init_getfilter( filtbuf, strlen( filtbuf ) );
...</pre>

<p><strong>See Also:</strong><br>
<
p><code><a href="function.htm#init-getfilter">ldap_init_getfilter()</a>,
<a href="function.htm#getfilter-free">ldap_getfilter_free()</a>.</code></p>

<h2 id="is-ldap-url">ldap_is_ldap_url()</h2>

<p>The <code>ldap_is_ldap_url()</code> function determines whether
or not a URL is an LDAP URL. An LDAP URL is a URL with the protocol
set to <code>ldap://</code> (or <code>ldaps://</code>, if the server
is communicating over an SSL connection).</p>

<p>For more information, see <a href="url.htm#determine_ldap_url">"Determining If
a URL is an LDAP URL."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_is_ldap_url( const char *url );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-72 - ldap_is_ldap_url() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>url</code></td>
  <td>The URL that you want to check.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>1</code> if the URL is an LDAP URL.
 <li><code>0</code> if the URL is not an LDAP URL.
</ul>

<p><strong>Example</strong></p>

<p>The following section of code determines if a URL is an LDAP URL.</p>

<p>
 <strong>Code Example 18-28 - ldap_is_ldap_url() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
char *my_url = "ldap://ldap.example.com/dc=example,dc=com";
...
if ( ldap_is_ldap_url( my_url ) != 0 ) {
  printf( "%s is an LDAP URL.\n", my_url );
} else {
  printf( "%s is not an LDAP URL.\n", my_url );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#url-parse">ldap_url_parse()</a>.</code></p>

<h2 id="memcache-destroy">ldap_memcache_destroy()</h2>

<p>Frees an <code><a href="datatype.htm#LDAPMemCache">LDAPMemCache</a></code>
structure from memory.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_memcache_destroy( LDAPMemCache *cache );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-73 - ldap_memcache_destroy() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>cache</code></td>
  <td>
   Pointer to the
   <code><a href="datatype.htm#LDAPMemCache">LDAPMemCache</a></code>
   structure that you want freed from memory.
  </td>
 </tr>
</table>

<p><strong>Description</strong></p>

<p>The <code>ldap_memcache_destroy()</code> function frees the
specified <code><a href="datatype.htm#LDAPMemCache">LDAPMemCache</a></code>
structure from memory. Call this function after you are done working
with a cache.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#memcache-init">ldap_memcache_init()</a>.</code></p>

<h2 id="memcache-flush">ldap_memcache_flush()</h2>

<p>Flushes items from the specified cache.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_memcache_flush( LDAPMemCache *cache, char *dn,
  int scope );</pre>

<p><strong>Parameters</strong></p>
<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-74 - ldap_memcache_flush() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>cache</code></td>
  <td>
   Pointer to the
   <code><a href="datatype.htm#LDAPMemCache">LDAPMemCache</a></code>
   structure that you want to flush entries from.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>
   Base DN identifying the search requests that you want flushed
   from the cache. If the base DN of a search request is within the
   scope specified by this DN and the <code>scope</code> argument,
   the search request is flushed from the cache.
   <p></p>
   If this argument is <code>NULL</code>, the entire cache is flushed.
  </td>
 </tr>
 <tr>
  <td><code>scope</code></td>
  <td>
   Scope that (together with the <code>dn</code> argument)
   identifies the search requests that you want flushed from the
   cache. If the base DN of the request is within the scope
   specified by this argument and the <code>dn</code> argument, the
   request is flushed from the cache.
   <p></p>
   This argument can have one of the following values:
   <p></p>
   <ul>
    <li><code>LDAP_SCOPE_BASE</code>
    <li><code>LDAP_SCOPE_ONELEVEL</code>
    <li><code>LDAP_SCOPE_SUBTREE</code>
   </ul>
  </td>
 </tr>
</table>

<p><strong>Description</strong></p>

<p>The <code>ldap_memcache_flush()</code> function flushes search
requests from the cache. If the base DN of a search request is
within the scope specified by the <code>dn</code> and
<code>scope</code> arguments, the search request is flushed from the
cache.</p>

<p>If no DN is specified, the entire cache is flushed.</p>

<h2 id="memcache-get">ldap_memcache_get()</h2>

<p>Gets the in-memory cache associated with an LDAP connection handle.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_memcache_get( LDAP *ld, LDAPMemCache **cachep );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-75 - ldap_memcache_get() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>cachep</code></td>
  <td>
   When you call this function, the function sets this parameter to
   the pointer to the
   <code><a href="datatype.htm#LDAPMemCache">LDAPMemCache</a></code>
   structure associated with the connection handle.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  <code>LDAP_SUCCESS</code> if the cache for the specified
  connection handle was retrieved successfully.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was
  passed to the function.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_memcache_get()</code> function gets the cache
associated with the specified connection handle
(<a href="datatype.htm#LDAP">LDAP</a> structure). This cache is
used by all search requests made through that connection.</p>

<p>You can call this function if you want to associate a cache with
multiple LDAP connection handles. For example, you can call this
function to get the cache associated with one connection, then you
can call the
<code><a href="function.htm#memcache-set">ldap_memcache_set()</a></code>
function to associate the cache with another connection.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#memcache-set">ldap_memcache_set()</a>.</code></p>

<h2 id="memcache-init">ldap_memcache_init()</h2>

<p>Creates an in-memory cache for your LDAP client that you can
associate with an LDAP connection.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_memcache_init( unsigned long ttl, unsigned long size,
  char **baseDNs, struct ldap_thread_fns *thread_fns,
  LDAPMemCache **cachep );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>
<p>
 <strong>Table 18-76 - ldap_memcache_init() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ttl</code></td>
  <td>
   The maximum amount of time (in seconds) that an item can be cached.
   <p></p>
   If <code>0</code>, there is no limit to the amount of time that
   an item can be cached.
  </td>
 </tr>
 <tr>
  <td><code>size</code></td>
  <td>
   Maximum amount of memory (in bytes) that the cache will consume.
   <p></p>
   If <code>0</code>, the cache has no size limit.
  </td>
 </tr>
 <tr>
  <td><code>baseDNs</code></td>
  <td>
   An array of the base DN strings representing the base DNs of the
   search requests you want cached.
   <p></p>
   <ul>
    <li>
     If not <code>NULL</code>, only the search requests with the
     specified base DNs will be cached.
    <li>If <code>NULL</code>, all search requests are cached.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>thread_fns</code></td>
  <td>
   An <code><a href="datatype.htm#ldap_thread_fns">ldap_thread_fns</a></code>
   structure specifying the functions that you want used to ensure
   that the cache is thread-safe.
   <p></p>
   You should specify this if you have multiple threads that are
   using the same connection handle and cache.
   <p></p>
   If you are not using multiple threads, pass <code>NULL</code> for
   this parameter.
  </td>
 </tr>
 <tr>
  <td><code>cachep</code></td>
  <td>
   When you call this function, the function sets this parameter to
   the pointer to the newly created
   <code><a href="datatype.htm#LDAPMemCache">LDAPMemCache</a></code> structure.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>
<ul>
 <li><code>LDAP_SUCCESS</code> if the cache was successfully created.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_SIZELIMIT_EXCEEDED</code> if the initial size of the
  cache (specified by the <code>size</code> argument) is too small.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_memcache_init()</code> function creates an
in-memory, client-side cache that you can use to cache search
requests.</p>

<p>The function passes back a pointer to an
<code><a href="datatype.htm#LDAPMemCache">LDAPMemCache</a></code> structure,
which represents the cache. You should call the
<code><a href="function.htm#memcache-set">ldap_memcache_set()</a></code>
function to associate this cache with an LDAP connection handle (an
<a href="datatype.htm#LDAP">LDAP</a> structure).</p>

<p>The cache uses search criteria as the key to cached items. When
you send a search request, the cache checks the search criteria to
determine if that request has been cached previously. If the request
was cached, the search results are read from the cache.</p>

<p>To flush the cache, call the
<code><a href="function.htm#memcache-flush">ldap_memcache_flush()</a></code>
function.</p>

<p>When you are done with the cache, you can free it from memory by
calling the
<code><a href="function.htm#memcache-destroy">ldap_memcache_destroy()</a></code>
function.</p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="datatype.htm#LDAPMemCache">LDAPMemCache</a>,
<a href="function.htm#memcache-set">ldap_memcache_set()</a>, ,
<a href="function.htm#memcache-update">ldap_memcache_update()</a>,
<a href="function.htm#memcache-flush">ldap_memcache_flush()</a>,
<a href="function.htm#memcache-destroy">ldap_memcache_destroy()</a>.</code></p>

<h2 id="memcache-set">ldap_memcache_set()</h2>

<p>Associates an in-memory cache with an LDAP connection handle.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_memcache_set( LDAP *ld, LDAPMemCache *cache );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-77 - ldap_memcache_set() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>cache</code></td>
  <td>
   Pointer to an
   <code><a href="datatype.htm#LDAPMemCache">LDAPMemCache</a></code>
   structure, which represents the cache that you want used for
   this connection.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  <code>LDAP_SUCCESS</code> if the cache was successfully associated
  with the connection handle.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function.
 <li>
  <code>LDAP_SIZELIMIT_EXCEEDED</code> if the size of the cache is
  too small.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_memcache_set()</code> function associates a cache
that you have created (by calling the
<code><a href="function.htm#memcache-init">ldap_memcache_init()</a></code>
function) with an LDAP connection handle.</p>

<p>After you call this function, search requests made over the
specified LDAP connection will use this cache. Note that calling the
<code><a href="function.htm#unbind">ldap_unbind()</a></code> function
or the <code><a href="function.htm#unbind">ldap_unbind()</a></code>
function will disassociate the cache from the LDAP connection handle.</p>

<p>You can call this function if you want to associate a cache with
multiple LDAP connection handles. For example, you can call the
<code><a href="function.htm#memcache-get">ldap_memcache_get()</a></code>
function to get the cache associated with one connection, then you
can call this function associate the cache with another connection.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#memcache-init">ldap_memcache_init()</a>,
<a href="function.htm#memcache-get">ldap_memcache_get()</a>.</code></p>

<h2 id="memcache-update">ldap_memcache_update()</h2>

<p>Checks the cache for items that have expired and removes them.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_memcache_update( LDAPMemCache *cache );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-78 - ldap_memcache_update() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>cache</code></td>
  <td>
   Pointer to an
   <code><a href="datatype.htm#LDAPMemCache">LDAPMemCache</a></code>
   structure, which represents the cache that you want to updated.
  </td>
 </tr>
</table>

<p><strong>Description</strong></p>

<p>The <code>ldap_memcache_update()</code> function checks the cache
for items that have expired and removes them. This check is
typically done as part of the way the cache normally works. You do
not need to call this function unless you want to update the cache
at this point in time.</p>

<p>This function is only useful in a multithreaded application,
since it will not return until the cache is destroyed.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#memcache-flush">ldap_memcache_flush()</a>.</code></p>

<h2 id="memfree">ldap_memfree()</h2>

<p><code>ldap_memfree()</code> frees memory allocated by an LDAP API
function call. For more information, see
<a href="using.htm#manage_memory">"Managing Memory."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_memfree( void *p );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-79 - ldap_memfree() function parameter</strong>
</p>

<table class="data">
 <tr>
  <td><code>p</code></td>
  <td>Pointer to memory used by the LDAP library.</td>
 </tr>
</table>

<p><strong>Example</strong></p>

<p>The following section of code frees the memory allocated by the
<code><a href="function.htm#get-dn">ldap_get_dn()</a></code> function.</p>

<p>
 <strong>Code Example 18-29 - ldap_memfree() code example</strong>
</p>

<pre class="code">...
LDAP *ld;
char *dn;
LDAPMessage *entry;
...
/* Get the distinguished name (DN) for an entry */
dn = ldap_get_dn( ld, entry );
...
/* When you are finished working with the DN, free the memory allocated for the DN */
ldap_memfree( dn );
...</pre>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#free-friendlymap">ldap_free_friendlymap()</a>,
<a href="function.htm#free-urldesc">ldap_free_urldesc()</a>,
<a href="function.htm#msgfree">ldap_msgfree()</a>,
<a href="function.htm#value-free">ldap_value_free()</a>,
<a href="function.htm#value-free-len">ldap_value_free_len()</a>.</code></p>

<h2 id="modify">ldap_modify()</h2>

<p>Modifies an existing entry in the directory asynchronously.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP client,
use <code><a href="function.htm#modify-ext">ldap_modify_ext()</a></code>
instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_modify( LDAP *ld, const char *dn, LDAPMod **mods );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-80 - ldap_modify() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry to modify.</td>
 </tr>
 <tr>
  <td><code>mods</code></td>
  <td>
   Pointer to a NULL-terminated array of pointers to
   <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures
   representing the attributes that you want to modify.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>Returns the message ID of the <code>ldap_modify()</code>
operation. To check the result of this operation, call
<code><a href="function.htm#result">ldap_result()</a></code> and
<code><a href="function.htm#result2error">ldap_result2error()</a></code>.
For a list of possible result codes for an LDAP modify operation,
see the result code documentation on the
<code><a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a></code>
function.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_modify()</code> function updates an entry in the
directory.</p>

<p>A newer version of this function,
<code><a href="function.htm#modify-ext">ldap_modify_ext()</a></code>, is
available in this release of the LDAP API.
<code>ldap_modify()</code> (the older version of the function) is
included only for backward-compatibility. If you are writing a new
LDAP client, use
<code><a href="function.htm#modify-ext">ldap_modify_ext()</a></code>
instead of <code>ldap_modify()</code>.</p>

<p>If you want more information on <code>ldap_modify()</code>, refer
to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following section of code uses the asynchronous
<code>ldap_modify()</code> function to modify the entry for "Barbara
Jensen" in the directory. The example makes the following changes to
the entry:</p>

<ol>
 <li>Adds the <code>homePhone</code> attribute.
 <li>Changes the <code>telephoneNumber</code> attribute.
 <li>Removes the <code>facsimileTelephoneNumber</code> attribute.
</ol>

<p>
 <strong>Code Example 18-30 - ldap_modify() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMod *list_of_attrs[4];
LDAPMod attribute1, attribute2, attribute3;
LDAPMessage *result;
int msgid, rc;
struct timeval tv;

/* Distinguished name of the entry that you want to modify. */
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";

/* Values to add or change */
char *homePhone_values[] = { "555-1212", NULL };
char *telephoneNumber_values[] = { "869-5309", NULL };

...
/* Specify each change in separate LDAPMod structures */
attribute1.mod_type = "homePhone";
attribute1.mod_op = LDAP_MOD_ADD;
attribute1.mod_values = homePhone_values;
attribute2.mod_type = "telephoneNumber";
attribute2.mod_op = LDAP_MOD_REPLACE;
attribute2.mod_values = telephoneNumber_values;
attribute3.mod_type = "facsimileTelephoneNumber";
attribute3.mod_op = LDAP_MOD_DELETE;
attribute3.mod_values = NULL;
/* NOTE: When removing entire attributes, you need to specify a NULL value for
the mod_values field. */

/* Add the pointers to these LDAPMod structures to an array */
list_of_attrs[0] = &amp;attribute1;
list_of_attrs[1] = &amp;attribute2;
list_of_attrs[2] = &amp;attribute3;
list_of_attrs[3] = NULL;
...
/* Set up the timeout period to wait for the "modify" operation */
tv.tv_sec = tv.tv_usec = 0;

/* Change the entry */
if ( ( msgid = ldap_modify( ld, dn, list_of_attrs ) ) == -1 ) {
  ldap_perror( ld, "ldap_modify" );
  return( 1 );
}

/* Check to see if the operation has completed */
while ( ( rc = ldap_result( ld, msgid, 0, &amp;tv, &amp;result ) ) == 0 ) {
  ...
  /* do other work while waiting for the operation to complete */
  ...
}

/* Check the result to see if any errors occurred */
ldap_result2error( ld, result, 1 );
ldap_perror( ld, "ldap_modify" );
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#modify-ext">ldap_modify_ext()</a>.</code></p>

<h2 id="modify-ext">ldap_modify_ext()</h2>

<p>Modifies an existing entry in the directory asynchronously.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_modify_ext( LDAP *ld, const char *dn, LDAPMod **mods,
  LDAPControl **serverctrls, LDAPControl **clientctrls,
  int *msgidp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-81 - ldap_modify_ext() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry to modify.</td>
 </tr>
 <tr>
  <td><code>mods</code></td>
  <td>
   Pointer to a <code>NULL</code>-terminated array of pointers to
   <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures
   representing the attributes that you want to modify.
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP client controls that apply to this
   LDAP operation. If you do not want to pass any client controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>msgidp</code></td>
  <td>
   Pointer to an integer that will be set to the message ID of the
   LDAP operation. To check the result of this operation, call
   <code><a href="function.htm#result">ldap_result()</a></code> and
   <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
   functions.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your
  request (for example, as a session preference) and your LDAP client
  does not specify that it is using the LDAPv3 protocol. Make sure
  that you set the version of your LDAP client to version 3 before
  calling this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_modify_ext()</code> modifies an entry in the
directory asynchronously.</p>

<p>This function is a new version of the
<code><a href="function.htm#modify">ldap_modify()</a></code> function.
If you are writing a new LDAP client, you should call this function
instead of <code><a href="function.htm#modify">ldap_modify()</a></code>.</p>

<p>To make changes to an entry to the directory, you need to specify
the following information:</p>

<ul>
 <li>
  A unique DN identifying the new entry. Use the <code>dn</code>
  argument to specify the DN of the entry that you want to modify.
 <li>
  A set of attributes for the new entry. Create an
  <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structure
  for change that you want to make to an attribute. Create an array
  of these <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code>
  structures and pass the array as the <code>mods</code> argument.
  <p></p>
  For information on using the
  <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structure to
  specify a change, see
  <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code>.
</ul>

<p>The function <code>ldap_modify_ext()</code> is asynchronous; it
does not directly return results. If you want the results to be
returned directly by the function, call the synchronous function
<code><a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>In order to get the results of the LDAP modify operation, you
need to call the
<code><a href="function.htm#result">ldap_result()</a></code> function
and the <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
function. (See <a href="using.htm#call_async_function">"Calling Asynchronous
Functions"</a> for details.) For a list of possible result codes for
an LDAP modify operation, see the result code documentation for the
<code><a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a></code>
function.</p>

<p>For more information on modifying entries in the directory, see
<a href="addmod.htm#modify-entry">"Modifying an Entry."</a></p>

<p><strong>Example</strong></p>

<p>See the example under <a href="addmod.htm#example-modify-entry-directory-async">"Example:
Modifying an Entry in the Directory (Asynchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a>,
<a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#parse-result">ldap_parse_result()</a>,
<a href="datatype.htm#LDAPMod">LDAPMod</a>.</code></p>

<h2 id="modify-ext-s">ldap_modify_ext_s()</h2>

<p>Modifies an existing entry in the directory synchronously.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_modify_ext_s( LDAP *ld, const char *dn, LDAPMod **mods,
  LDAPControl **serverctrls, LDAPControl **clientctrls );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-82 - ldap_modify_ext_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry to modify.</td>
 </tr>
 <tr>
  <td><code>mods</code></td>
  <td>
   Pointer to a NULL-terminated array of pointers to
   <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures
   for the attributes you want modified.
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP client controls that apply to this
   LDAP operation. If you do not want to pass any client controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_LOCAL_ERROR</code> if an error occurred when receiving
  the results from the server.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when decoding
  the BER-encoded results from the server.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your
  request (for example, as a session preference) and your LDAP
  client does not specify that it is using the LDAPv3 protocol. Make
  sure that you set the version of your LDAP client to version 3
  before calling this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
</ul>

<p>The following result codes can be returned by the Directory Server
when processing an LDAP modify request. Other LDAP servers may send
these result codes under different circumstances or may send
different result codes back to your LDAP client.</p>

<ul>
 <li>
  <code>LDAP_OPERATIONS_ERROR</code> may be sent by the Directory
  Server for general errors encountered by the server when processing
  the request.
 <li>
  <code>LDAP_PROTOCOL_ERROR</code> if the modify request did not
  comply with the LDAP protocol. The Directory Server may set this
  error code in the results for a variety of reasons. Some of these
  reasons include:
  <p></p>
  <ul>
   <li>
    The server encountered an error when decoding your client's
    BER-encoded request.
   <li>
    An unknown modification operator (other that
    <code>LDAP_MOD_ADD</code>, <code>LDAP_MOD_DELETE</code>, and
    <code>LDAP_MOD_REPLACE</code>) is specified in the request.
   <li>
    The modification operator is <code>LDAP_MOD_ADD</code> and no
    values are specified.
   <li>No modifications are specified.
  </ul>
  <p></p>
 <li>
  <code>LDAP_CONSTRAINT_VIOLATION</code> may be sent by the
  Directory Server if your client is attempting to modify the
  <code>userpassword</code> attribute in the following situations:
  <p></p>
  <ul>
   <li>
    The server is configured to require a minimum password length
    and the new value of the <code>userpassword</code> attribute is
    shorter than the minimum length.
   <li>
    The server is configured to keep track of previous passwords,
    and the new value of the <code>userpassword</code> attribute is
    the same as a previous value of that attribute.
   <li>
    The new value of the <code>userpassword</code> attribute is the
    same as the value of the <code>uid</code>, <code>cn</code>,
    <code>sn</code>, <code>givenname</code>, <code>ou</code>, or
    <code>mail</code> attributes. (Using a password that is the
    same as your user id or email address would make the password
    trivial and easy to crack.)
  </ul>
  <p></p>
 <li>
  <code>LDAP_UNWILLING_TO_PERFORM</code> may be sent by the Directory
  Server in the following situations:
  <p></p>
  <ul>
   <li>
    Your client is attempting to modify the <code>aci</code>
    attribute and an error occurs.
   <li>
    The value of the <code>userpassword</code> attribute needs to be
    changed. (The password has expired.)
   <li>
    Your client is attempting to add attributes to the configuration
    DSE (DSA-specific entry, where DSA stands for Directory-Specific
    Agent).
   <li>Your client is attempting to replace attributes in the schema DSE.
   <li>The server's database is read-only.
  </ul>
  <p></p>
 <li>
  <code>LDAP_REFERRAL</code> may be sent by the Directory Server if
  the DN specified by the <code>dn</code> argument identifies an
  entry not handled by the current server and if referral URLs
  identify a different server to handle the entry. (For example, if
  the DN is
  <code>uid=bjensen, ou=European Sales, dc=example,dc=com</code>,
  all entries under <code>ou=European Sales</code> might be handled
  by a different directory server.)
 <li>
  <code>LDAP_NO_SUCH_ATTRIBUTE</code> may be sent by the Directory
  Server if the attribute that you want to modify (add, replace, or
  delete) does not exist.
 <li>
  <code>LDAP_INVALID_SYNTAX</code> may be sent by the Directory
  Server if your client is modifying the schema DSE and no object
  class or attribute type is specified.
 <li>
  <code>LDAP_NO_SUCH_OBJECT</code> may be sent by the Directory
  Server if the entry that you want modified does not exist.
 <li>
  <code>LDAP_INSUFFICIENT_ACCESS</code> may be sent by the Directory
  Server if the DN that your client is authenticated as does not
  have the access rights to modify the entry.
 <li>
  <code>LDAP_TYPE_OR_VALUE_EXISTS</code> may be sent by the
  Directory Server if your client is attempting to add an attribute
  to an entry and the attribute values already exist in the entry.
 <li>
  <code>LDAP_OBJECT_CLASS_VIOLATION</code> may be sent by the
  Directory Server if the modified entry does not comply with the
  Directory Server schema (for example, if one or more required
  attributes are not specified).
 <li>
  <code>LDAP_NOT_ALLOWED_ON_RDN</code> may be sent by the Directory
  Server if the modified entry no longer contains attributes for
  each DN component.
</ul>

<p>Note that the Directory Server may send other result codes in
addition to the codes described here (for example, the server may
have loaded a custom plug-in that returns other result codes).</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_modify_ext_s()</code> modifies an entry in the
directory synchronously.</p>

<p>This function is a new version of the
<code><a href="function.htm#modify-s">ldap_modify_s()</a></code>
function. If you are writing a new LDAP client, you should call this
function instead of
<code><a href="function.htm#modify-s">ldap_modify_s()</a></code>.</p>

<p>To make changes to an entry to the directory, you need to specify
the following information:</p>

<ul>
 <li>
  A unique DN identifying the new entry.
  <p></p>
  Use the <code>dn</code> argument to specify the DN of the entry
  that you want to modify.
 <li>
  A set of attributes for the new entry.
  <p></p>
  Create an <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code>
  structure for change that you want to make to an attribute. Create
  an array of these
  <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures
  and pass the array as the <code>mods</code> argument.
  <p></p>
  For information on using the
  <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structure to
  specify a change, see
  <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code>.
</ul>

<p><code>ldap_modify_ext_s()</code> is a synchronous function, which
directly returns the results of the operation. If you want to
perform other operations while waiting for the results of this
operation, call the asynchronous function
<code><a href="function.htm#modify-ext">ldap_modify_ext()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>For more information on modifying entries in the directory, see
<a href="addmod.htm#modify-entry">"Modifying an Entry."</a></p>

<p><strong>Example</strong></p>

<p>See the example under <a href="addmod.htm#example-modify-entry-directory-sync">"Example:
Modifying an Entry in the Directory (Synchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#modify-ext">ldap_modify_ext()</a>,
<a href="datatype.htm#LDAPMod">LDAPMod</a>.</code></p>

<h2 id="modify-s">ldap_modify_s()</h2>

<p>Modifies an existing entry in the directory synchronously.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP
client, use
<code><a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a></code>
instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_modify_s( LDAP *ld, const char *dn, LDAPMod **mods );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-83 - ldap_modify_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry to modify.</td>
 </tr>
 <tr>
  <td><code>mods</code></td>
  <td>
   Pointer to a <code>NULL</code>-terminated array of pointers to
   <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures
   for the attributes you want modified.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>For a list of possible result codes for an LDAP modify operation,
see the result code documentation for the
<code><a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a></code>
function.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_modify_s()</code> function updates an entry in the
directory.</p>

<p>A newer version of this function,
<code><a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a></code>,
is available in this release of the LDAP API.
<code>ldap_modify_s()</code> (the older version of the function) is
included only for backward-compatibility. If you are writing a new
LDAP client, use
<code><a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a></code>
instead of <code>ldap_modify_s()</code>.</p>

<p>If you want more information on <code>ldap_modify_s()</code>,
refer to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following section of code uses the synchronous
<code>ldap_modify_s()</code> function to makes the following changes
to the "<code>Barbara Jensen</code>" entry:</p>

<ol>
 <li>Adds the <code>homePhone</code> attribute.
 <li>Changes the <code>telephoneNumber</code> attribute.
 <li>Removes the <code>facsimileTelephoneNumber</code> attribute.
</ol>

<p>
 <strong>Code Example 18-31 - ldap_modify_s() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMod *list_of_attrs[4];
LDAPMod attribute1, attribute2, attribute3;
LDAPControl **srvrctrls, **clntctrls;

/* Distinguished name of the entry that you want to modify. */
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";

/* Values to add or change */
char *homePhone_values[] = { "555-1212", NULL };
char *telephoneNumber_values[] = { "869-5309", NULL };

...
/* Specify each change in separate LDAPMod structures */
attribute1.mod_type = "homePhone";
attribute1.mod_op = LDAP_MOD_ADD;
attribute1.mod_values = homePhone_values;
attribute2.mod_type = "telephoneNumber";
attribute2.mod_op = LDAP_MOD_REPLACE;
attribute2.mod_values = telephoneNumber_values;
attribute3.mod_type = "facsimileTelephoneNumber";
attribute3.mod_op = LDAP_MOD_DELETE;
attribute3.mod_values = NULL;
/* NOTE: When removing entire attributes, you need to specify a NULL value for
   the mod_values or mod_bvalues field. */

/* Add the pointers to these LDAPMod structures to an array */
list_of_attrs[0] = &amp;attribute1;
list_of_attrs[1] = &amp;attribute2;
list_of_attrs[2] = &amp;attribute3;
list_of_attrs[3] = NULL;
...
/* Change the entry */
if ( ldap_modify_s( ld, dn, list_of_attrs ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_modify_s" );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a>.</code></p>

<h2 id="modrdn">ldap_modrdn()</h2>

<p>The <code>ldap_modrdn()</code> function is a deprecated function.
Use the <code><a href="function.htm#rename">ldap_rename()</a></code>
or <code><a href="function.htm#modrdn2">ldap_modrdn2()</a></code>
functions instead.</p>

<h2 id="modrdn-s">ldap_modrdn_s()</h2>

<p>The <code>ldap_modrdn_s()</code> function is a deprecated
function. Use the
<code><a href="function.htm#rename-s">ldap_rename_s()</a></code> or
<code><a href="function.htm#modrdn2-s">ldap_modrdn2_s()</a></code>
functions instead.</p>

<h2 id="modrdn2">ldap_modrdn2()</h2>

<p>Changes the relative distinguished name (RDN) of an entry in the
directory asynchronously.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP
client, use <code><a href="function.htm#rename">ldap_rename()</a></code>
instead.</p>

<pre>#include &lt;ldap.h&gt;
int ldap_modrdn2( LDAP *ld, const char *dn, const char *newrdn,
  int deleteoldrdn );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-84 - ldap_modrdn2() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry to modify.</td>
 </tr>
 <tr>
  <td><code>newrdn</code></td>
  <td>New relative distinguished name (RDN) to assign to the entry.</td>
 </tr>
 <tr>
  <td><code>deleteoldrdn</code></td>
  <td>
   If this is a non-zero value, the old RDN is not retained as a
   value in the modified entry. If <code>0</code>, the old RDN is
   retained as an attribute in the modified entry.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>Returns the message ID of the <code>ldap_modrdn2()</code>
operation. To check the result of this operation, call
<code><a href="function.htm#result">ldap_result()</a></code> and
<code><a href="function.htm#result2error">ldap_result2error()</a></code>.
For a list of possible result codes, see the result code
documentation for the
<code><a href="function.htm#rename-s">ldap_rename_s()</a></code>
function.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_modrdn2()</code> function modifies the relative
distinguished name (RDN) of an entry in a directory and lets you
specify whether or not the old RDN is retained as an attribute of
the entry.</p>

<p>A newer version of this function,
<code><a href="function.htm#rename">ldap_rename()</a></code>, is
available in this release of the LDAP API. <code>ldap_modrdn2()</code>
(the older version of the function) is included only for
backward-compatibility. If you are writing a new LDAP client, use
<code><a href="function.htm#rename">ldap_rename()</a></code> instead
of <code>ldap_modrdn2()</code>.</p>

<p>If you want more information on <code>ldap_modrdn2()</code>,
refer to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following section of code uses the asynchronous
<code>ldap_modrdn2()</code> function to change the RDN of an entry
from "<code>uid=bjensen</code>" to "<code>uid=babs</code>". The code
removes the existing RDN "<code>bjensen</code>" from the
<code>uid</code> attribute of the entry.</p>

<p>
 <strong>Code Example 18-32 - ldap_modrdn2() code example</strong>
</p>

<pre class="code">...
LDAP *ld;
LDAPMessage *result;
int msgid, rc;
struct timeval tv;

/* Distinguished name of the entry that you want to rename. */
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";

/* New relative distinguished name (RDN) of the entry */
char *rdn = "uid=babs";
...
/* Set up the timeout period to wait for the "modify RDN" operation */
tv.tv_sec = tv.tv_usec = 0;

/* Rename the entry */
if ( ( msgid = ldap_modrdn2( ld, dn, rdn, 1 ) ) == -1 ) {
  ldap_perror( ld, "ldap_modrdn2" );
  return( 1 );
}

/* Check to see if the operation has completed */
while ( ( rc = ldap_result( ld, msgid, 0, &amp;tv, &amp;result ) ) == 0 ) {
  ...
  /* do other work while waiting for the operation to complete */
  ...
}

/* Check the result to see if any errors occurred */
ldap_result2error( ld, result, 1 );
ldap_perror( ld, "ldap_modrdn2" );
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#rename">ldap_rename()</a>.</code></p>

<h2 id="modrdn2-s">ldap_modrdn2_s()</h2>

<p>Changes the relative distinguished name (RDN) of an entry in the
directory synchronously.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP client,
use <code><a href="function.htm#rename-s">ldap_rename_s()</a></code>
instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_modrdn2_s( LDAP *ld, const char *dn,
  const char *newrdn, int deleteoldrdn );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-85 - ldap_modrdn2_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry to modify.</td>
 </tr>
 <tr>
  <td><code>newrdn</code></td>
  <td>New relative distinguished name (RDN) to assign to the entry.</td>
 </tr>
 <tr>
  <td><code>deleteoldrdn</code></td>
  <td>
   If this is a non-zero value, the old RDN is not retained as a
   value in the modified entry. If <code>0</code>, the old RDN is
   retained as an attribute in the modified entry.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>For a list of possible result codes, see the result code
documentation for the
<code><a href="function.htm#rename-s">ldap_rename_s()</a></code>
function.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_modrdn2_s()</code> function modifies the relative
distinguished name (RDN) of an entry in a directory and lets you
specify whether or not the old RDN is retained as an attribute of
the entry.</p>

<p>A newer version of this function,
<code><a href="function.htm#rename-s">ldap_rename_s()</a></code>, is
available in this release of the LDAP API.
<code>ldap_modrdn2_s()</code> (the older version of the function) is
included only for backward-compatibility. If you are writing a new
LDAP client, use
<code><a href="function.htm#rename-s">ldap_rename_s()</a></code> instead
of <code>ldap_modrdn2_s()</code>.</p>

<p>If you want more information on <code>ldap_modrdn2_s()</code>,
refer to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following section of code uses the synchronous
<code>ldap_modrdn2_s()</code> function to change the RDN of an entry
from "<code>uid=bjensen</code>" to "<code>uid=babs</code>". The code
removes the existing RDN "<code>babs</code>" from the
<code>uid</code> attribute of the entry.</p>

<p>
 <strong>Code Example 18-33 - ldap_modrdn2_s() code example</strong>
</p>

<pre class="code">...
LDAP *ld;

/* Distinguished name of the entry that you want to rename. */
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";

/* New relative distinguished name (RDN) of the entry */
char *rdn = "uid=babs";
...
/* Rename the entry */
if ( ldap_modrdn2_s( ld, dn, rdn, 1 ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_modrdn2_s" );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#rename-s">ldap_rename_s()</a>.</code></p>

<h2 id="mods-free">ldap_mods_free()</h2>

<p>The <code>ldap_mods_free()</code> function frees the
<code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures
that you've allocated to add or modify entries. You need to call
this function only if you've allocated memory for these structures
yourself.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_mods_free( LDAPMod **mods, int freemods );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-86 - ldap_mods_free() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>mods</code></td>
  <td>
   Pointer to a NULL-terminated array of pointers to
   <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures.
  </td>
 </tr>
 <tr>
  <td><code>freemods</code></td>
  <td>
   If this is a non-zero value, frees the array of pointers as well
   as the <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code>
   structures. If 0, just frees the
   <code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures.
  </td>
 </tr>
</table>

<p><strong>Example</strong></p>

<p>The following example allocates memory for
<code><a href="datatype.htm#LDAPMod">LDAPMod</a></code> structures and
frees them when done.</p>

<p>
 <strong>Code Example 18-34 - ldap_mods_free() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
char *dn;
int i, msgid;
LDAPMod **mods;
...
/* Construct the array of values to add */
mods = ( LDAPMod ** ) malloc(( NMODS + 1 ) * sizeof( LDAPMod * ));
if ( mods == NULL ) {
  fprintf( stderr, "Cannot allocate memory for mods array\n" );
}
for ( i = 0; i &lt; NMODS; i++ ) {
  if (( mods[ i ] = ( LDAPMod * ) malloc( sizeof( LDAPMod ))) == NULL) {
    fprintf( stderr, "Cannot allocate memory for mods element\n" );
    exit( 1 );
  }
}
...
/* Code for filling the structures goes here. */
...
/* Initiate the add operation */
if (( msgid = ldap_add( ld, dn, mods )) &lt; 0 ) {
  ldap_perror( ld, "ldap_add" );
  ldap_mods_free( mods, 1 );
  return( 1 );
}
...</pre>

<h2 id="msgfree">ldap_msgfree()</h2>

<p>The <code>ldap_msgfree()</code> function frees the memory
allocated for a result by
<code><a href="function.htm#result">ldap_result()</a></code> or
<code><a href="function.htm#search-s">ldap_search_s()</a></code>. For
more information, see <a href="search.htm#c6-freeing-the-results-of-a-search">"Freeing the
Results of a Search."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_msgfree( LDAPMessage *lm );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-87 - ldap_msgfree() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>lm</code></td>
  <td>ID of the result to be freed from memory.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the type of result freed. Possible types of
  results are listed below.
  <p></p>
  <p>
   <strong>Table 18-88 - ldap_msgfree() return codes</strong>
  </p>
  <table class="data">
   <tr>
    <td><code>LDAP_RES_BIND</code></td>
    <td>Results from an LDAP bind operation.</td>
   </tr>
   <tr>
    <td><code>LDAP_RES_SEARCH_ENTRY</code></td>
    <td>Entry returned by an LDAP search operation.</td>
   </tr>
   <tr>
    <td><code>LDAP_RES_SEARCH_RESULT</code></td>
    <td>Results from an LDAP search operation.</td>
   </tr>
   <tr>
    <td><code>LDAP_RES_MODIFY</code></td>
    <td>Results from an LDAP modify operation.</td>
   </tr>
   <tr>
    <td><code>LDAP_RES_ADD</code></td>
    <td>Results from an LDAP add operation.</td>
   </tr>
   <tr>
    <td><code>LDAP_RES_DELETE</code></td>
    <td>Results from an LDAP delete operation.</td>
   </tr>
   <tr>
    <td><code>LDAP_RES_MODRDN, LDAP_RES_RENAME</code></td>
    <td>Results from an LDAP modify DN operation.</td>
   </tr>
   <tr>
    <td><code>LDAP_RES_COMPARE</code></td>
    <td>Results from an LDAP compare operation.</td>
   </tr>
   <tr>
    <td><code>LDAP_RES_SEARCH_REFERENCE</code></td>
    <td>Search reference returned by an LDAP search operation.</td>
   </tr>
   <tr>
    <td><code>LDAP_RES_EXTENDED</code></td>
    <td>Results from an LDAP extended operation.</td>
   </tr>
   <tr>
    <td><code>LDAP_RES_ANY</code></td>
    <td>Results from any asynchronous LDAP operation.</td>
   </tr>
  </table>
  <p></p>
 <li>
  If unsuccessful, returns the LDAP error code for the operation.
  (See <a href="error.htm">Chapter 19 "Result Codes</a>" for a
  complete listing.)
 <li>If the operation times out, returns <code>LDAP_SUCCESS</code>.
</ul>

<p><strong>Example</strong></p>

<p>The following example frees the results of a search.</p>

<p>
 <strong>Code Example 18-35 - ldap_msgfree() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result;
char *my_searchbase = "dc=example,dc=com";
char *my_filter = "(sn=Jensen)";
char *get_attr[] = { "cn", "mail", NULL };
...
/* Search the directory */
if ( ldap_search_s( ld, my_searchbase, LDAP_SCOPE_SUBTREE, my_filter, get_attr, 0, &amp;result ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_search_s" );
  return( 1 );
}
...
/* Free the results when done */
ldap_msgfree( result );
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#search-s">ldap_search_s()</a>.</code></p>

<h2 id="msgid">ldap_msgid()</h2>

<p>The <code>ldap_msgid()</code> function determines the message ID
of a result obtained by calling
<code><a href="function.htm#result">ldap_result()</a></code> or
<code><a href="function.htm#search-s">ldap_search_s()</a></code>.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_msgid( LDAPMessage *lm );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-89 - ldap_msgid() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>lm</code></td>
  <td>ID of the result to check.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>The message ID if successful.
 <li><code>-1</code> if unsuccessful.
</ul>

<p><strong>Example</strong></p>

<p>The following example prints the message ID from the result
obtained from a synchronous LDAP search operation.</p>

<p>
 <strong>Code Example 18-36 - ldap_msgid() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result;
...
/* Perform a search */
if ( ldap_search_s( ld, MY_SEARCHBASE, LDAP_SCOPE_SUBTREE, MY_FILTER,
    NULL, 0, &amp;result ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_search_s" );
  return( 1 );
}

/* Get and print the message ID */
if ( ldap_msgid( result ) != -1 ) {
  printf( "Message ID: %d\n" );
} else {
  printf( "An error occurred.\n" );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#msgtype">ldap_msgtype()</a>,
<a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#search-s">ldap_search_s()</a>.</code></p>

<h2 id="msgtype">ldap_msgtype()</h2>

<p>The <code>ldap_msgtype()</code> function determines the type of
result obtained by calling
<code><a href="function.htm#result">ldap_result()</a></code> or
<code><a href="function.htm#search-s">ldap_search_s()</a></code>.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_msgtype( LDAPMessage *lm );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-90 - ldap_msgtype() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>lm</code></td>
  <td>ID of the result to check.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  <code>LDAP_RES_BIND</code> indicates that the
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  contains the result of an LDAP bind operation.
 <li>
  <code>LDAP_RES_SEARCH_ENTRY</code> indicates that the
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  contains an entry found during an LDAP search operation.
 <li>
  <code>LDAP_RES_SEARCH_REFERENCE</code> indicates that the
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  contains an LDAPv3 search reference (a referral to another LDAP
  server) found during an LDAP search operation.
 <li>
  <code>LDAP_RES_SEARCH_RESULT</code> indicates that the
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  contains the result of an LDAP search operation.
 <li>
  <code>LDAP_RES_MODIFY</code> ndicates that the
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  contains the result of an LDAP modify operation.
 <li>
  <code>LDAP_RES_ADD</code> indicates that the
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  contains the result of an LDAP add operation.
 <li>
  <code>LDAP_RES_DELETE</code> indicates that the
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  contains the result of an LDAP delete operation.
 <li>
  <code>LDAP_RES_MODRDN</code> or <code>LDAP_RES_RENAME</code>
  indicates that the
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  contains the result of an LDAP modify DN operation.
 <li>
  <code>LDAP_RES_COMPARE</code> indicates that the
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  contains the result of an LDAP compare operation.
 <li>
  <code>LDAP_RES_EXTENDED</code> indicates that the
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  contains the result of an LDAPv3 extended operation.
 <li>
  -1 indicates that the <code>lm</code> argument is not a pointer to
  a valid <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
  structure.
</ul>

<p><strong>Example</strong></p>

<p>The following example prints the message type for a result
obtained from a synchronous LDAP search operation.</p>

<p>
 <strong>Code Example 18-37 - ldap_msgtype() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result;
int msgtype;
...
/* Perform a search */
if ( ldap_search_s( ld, MY_SEARCHBASE, LDAP_SCOPE_SUBTREE, MY_FILTER,
    NULL, 0, &amp;result ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_search_s" );
  return( 1 );
}

/* Get and print the message type */
msgtype = ldap_msgtype( result );
if ( msgtype != -1 ) {
  printf( "Message type: %d\n", msgtype );
} else {
  printf( "An error occurred.\n" );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#msgid">ldap_msgid()</a>,
<a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#search-s">ldap_search_s()</a>.</code></p>

<h2 id="multisort-entries">ldap_multisort_entries()</h2>

<p>The <code>ldap_multisort_entries()</code> function sorts a chain
of entries retrieved from an LDAP search call
(<code><a href="function.htm#search-s">ldap_search_s()</a></code> or
<code><a href="function.htm#result">ldap_result()</a></code>) by a
specified set of attributes in the entries (or by DN if you don't
specify a set of attributes).</p>

<p>For additional information, see
<a href="search.htm#c6-sorting-the-search-results">"Sorting the Search Results."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_multisort_entries( LDAP *ld, LDAPMessage **chain,
  char **attr, LDAP_CMP_CALLBACK *cmp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-91 - ldap_multisort_entries() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>chain</code></td>
  <td>
   Chain of entries returned by the
   <code><a href="function.htm#result">ldap_result()</a></code> or
   <code><a href="function.htm#search-s">ldap_search_s()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>attr</code></td>
  <td>
   Array of attributes to use when sorting the results. If
   <code>NULL</code>, results are sorted by distinguished name (DN).
  </td>
 </tr>
 <tr>
  <td><code>cmp</code></td>
  <td>Comparison function used when sorting the values.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>0</code> if successful.
 <li>
  <code>-1</code> if memory cannot be allocated by this function.
  (The error code <code>LDAP_NO_MEMORY</code> is set in the
  <code><a href="datatype.htm#LDAP">LDAP</a></code> structure. To
  get the error code, call the
  <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
  function.)
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function
</ul>

<p><strong>Example</strong></p>

<p>The following section of code sorts entries first by the
<code>roomNumber</code> attribute, then by the
<code>telephoneNumber</code> attribute.</p>

<p>
 <strong>Code Example 18-38 - ldap_multisort_entries() code example</strong>
</p>

<pre class="code">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result;
char *my_searchbase = "dc=example,dc=com";
char *my_filter = "(sn=Jensen)";
char *attrs[3];
attrs[0] = "roomNumber";
attrs[1] = "telephoneNumber";
attrs[2] = NULL;
...
/* Search the directory */
if ( ldap_search_s( ld, my_searchbase, LDAP_SCOPE_SUBTREE, my_filter, NULL, 0, &amp;result ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_search_s" );
  return( 1 );
}

/* Sort the results, using strcasecmp */
if ( ldap_multisort_entries( ld, &amp;result, attrs, strcasecmp ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_multisort_entries" );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#search-s">ldap_search_s()</a>,
<a href="function.htm#sort-entries">ldap_sort_entries()</a>.</code></p>

<h2 id="next-attribute">ldap_next_attribute()</h2>

<p>The <code>ldap_next_attribute()</code> function returns the name
of the next attribute in a entry returned by
<code><a href="function.htm#first-entry">ldap_first_entry()</a></code> or
<code><a href="function.htm#next-entry">ldap_next_entry()</a></code>.</p>

<p>The <code>ldap_first_attribute()</code> function returns a
pointer to a <code>BerElement</code>. You use this pointer with
<code>ldap_next_attribute()</code> to iterate through the list of
elements. After the last call to <code>ldap_next_element()</code>,
you should free the <code>BerElement</code> pointer using
<code>ldap_ber_free()</code>. When calling
<code><a href="function.htm#ldap-ber-free">ldap_ber_free()</a></code>, make
sure to specify that the buffer is not freed (pass <code>0</code>
for the <code>freebuf</code> parameter).</p>

<p>For more information, see <a href="search.htm#c6-getting-attributes-from-an-entry">"Getting
Attributes from an Entry."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
char * ldap_next_attribute( LDAP *ld, LDAPMessage *entry,
  BerElement *ber);</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-92 - ldap_next_attribute() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>entry</code></td>
  <td>
   Pointer to the
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure representing the entry returned by the
   <code><a href="function.htm#first-entry">ldap_first_entry()</a></code>
   or <code><a href="function.htm#next-entry">ldap_next_entry()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>ber</code></td>
  <td>
   A pointer to a
   <code><a href="datatype.htm#BerElement">BerElement</a></code> allocated
   to keep track of its current position. Pass this pointer to
   subsequent calls to
   <code><a href="function.htm#next-attribute">ldap_next_attribute()</a></code>
   to step through the entry's attributes.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the name of the next attribute in an entry.
  When you are done using this data, you should free the memory by
  calling the
  <code><a href="function.htm#memfree">ldap_memfree()</a></code>
  function.
 <li>If no more attributes exist in the entry, returns a NULL.
 <li>
  If unsuccessful, returns a <code>NULL</code> and sets the
  appropriate error code in the <a href="datatype.htm#LDAP">LDAP</a>
  structure. To get the error code, call the
  <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
  function. (See <a href="error.htm">Chapter 19 "Result Codes</a>"
  for a complete listing of error codes.)
</ul>

<p><strong>Example</strong></p>

<p>See the example under
<code><a href="function.htm#first-attribute">ldap_first_attribute()</a></code>.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#first-attribute">ldap_first_attribute()</a>,
<a href="function.htm#getfirstfilter">ldap_getfirstfilter()</a>,
<a href="function.htm#next-entry">ldap_next_entry()</a>.</code></p>

<h2 id="next-entry">ldap_next_entry()</h2>

<p>Returns a pointer to the
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
representing the next directory entry in a chain of search results.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
LDAPMessage * ldap_next_entry( LDAP *ld, LDAPMessage *entry );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-93 - ldap_next_entry() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>entry</code></td>
  <td>
   Pointer to an
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure in a chain of search results.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the pointer to the next
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  of the type <code>LDAP_RES_SEARCH_ENTRY</code> in a chain of
  search results.
 <li>
  If no more <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
  structures of the type <code>LDAP_RES_SEARCH_ENTRY</code> are in
  the chain or if the function is unsuccessful, returns a
  <code>NULLMSG</code>.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_next_entry()</code> function returns a pointer to
the <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
structure representing the next directory entry in a chain of search
results. Messages containing directory entries have the type
<code>LDAP_RES_SEARCH_ENTRY</code>.</p>

<p>You can use this function in conjunction with the
<code><a href="function.htm#first-entry">ldap_first_entry()</a></code>
function to iterate through the directory entries in a chain of
search results. These functions skip over any messages in the chain
that do not have the type <code>LDAP_RES_SEARCH_ENTRY</code>.</p>

<p>For more information, see <a href="search.htm#c6-iterating-through-a-chain-of-results">"Iterating
Through a Chain of Results."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#first-entry">ldap_first_entry()</a>.</code></p>

<h2 id="next-message">ldap_next_message()</h2>

<p>Returns a pointer to the next
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
in a chain of search results.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
LDAPMessage * ldap_next_message( LDAP *ld, LDAPMessage *msg );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-94 - ldap_next_message() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>msg</code></td>
  <td>
   Pointer to an
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure in a chain of search results.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the pointer to the next
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  in a chain of search results.
 <li>
  If no more <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
  structures are in the chain or if the function is unsuccessful,
  returns a <code>NULLMSG</code>.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_next_message()</code> function returns a pointer
to the next <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
structure in a chain of search results.</p>

<p>You can use this function in conjunction with the
<code><a href="function.htm#first-message">ldap_first_message()</a></code>
function to iterate through the chain of search results. You can
call the <code><a href="function.htm#msgtype">ldap_msgtype()</a></code>
function to determine if each message contains a matching entry (a
message of the type <code>LDAP_RES_SEARCH_ENTRY</code>) or a search
reference (a message of the type <code>LDAP_RES_SEARCH_REFERENCE</code>).</p>

<p>For more information, see <a href="search.htm#c6-iterating-through-a-chain-of-results">"Iterating
Through a Chain of Results."</a></p>

<p><strong>Example</strong></p>

<p>See the examples under <a href="search.htm#c6-example-searching-the-directory-synchronous">"Example:
Searching the Directory (Synchronous)"</a> and
<a href="search.htm#c6-example-searching-the-directory-asynchronous">"Example: Searching the Directory
(Asynchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#first-message">ldap_first_message()</a>.</code></p>

<h2 id="next-reference">ldap_next_reference()</h2>

<p>Returns a pointer to the
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
representing the next search reference in a chain of search results.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
LDAPMessage * ldap_next_reference( LDAP *ld, LDAPMessage *ref );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-95 - ldap_next_reference() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>msg</code></td>
  <td>
   Pointer to an
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure in a chain of search results.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the pointer to the next
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  of the type <code>LDAP_RES_SEARCH_REFERENCE</code> in a chain of
  search results.
 <li>
  If no more <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
  structures of the type <code>LDAP_RES_SEARCH_REFERENCE</code> are
  in the chain or if the function is unsuccessful, returns a
  <code>NULLMSG</code>.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_next_reference()</code> function returns a pointer
to the <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
structure representing the next search reference in a chain of
search results. Messages containing search references have the type
<code>LDAP_RES_SEARCH_REFERENCE</code>.</p>

<p>You can use this function in conjunction with the
<code><a href="function.htm#first-reference">ldap_first_reference()</a></code>
function to iterate through the search references in a chain of
search results. These functions skip over any messages in the chain
that do not have the type <code>LDAP_RES_SEARCH_REFERENCE</code>.</p>

<p>For more information, see <a href="search.htm#c6-iterating-through-a-chain-of-results">"Iterating
Through a Chain of Results."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#first-reference">ldap_first_reference()</a>.</code></p>

<h2 id="parse-entrychange-control">ldap_parse_entrychange_control()</h2>

<p>Examines a list of controls returned from a persistent search
operation, retrieves an entry change control, and parses that control
for information (such as the type of change made to the entry and the
change number).</p>

<p>This function implements an extension to the LDAPv3 protocol.
Entry change notification is an optional LDAP server feature; it may
not be supported on all LDAP servers. Call this function when
interacting with LDAP servers that support this LDAPv3 extension.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_parse_entrychange_control( LDAP *ld,
  LDAPControl **ctrls, int *chgtypep, char **prevdnp,
  int *chgnumpresentp, long *chgnump );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-96 - ldap_parse_entrychange_control() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>ctrlp</code></td>
  <td>
   An array of controls returned by the server. You obtain these
   controls by calling the
   <code><a href="function.htm#get-entry-controls">ldap_get_entry_controls()</a></code>
   function on an entry returned by the server.
  </td>
 </tr>
 <tr>
  <td><code>changetypes</code></td>
  <td>
   Pointer to an integer specifying the type of change made to the
   entry. This field can have one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_CHANGETYPE_ADD</code> specifies that the entry was
     added to the directory.
    <li>
     <code>LDAP_CHANGETYPE_DELETE</code> specifies that the entry
     was deleted from the directory.
    <li>
     <code>LDAP_CHANGETYPE_MODIFY</code> specifies that the entry
     was modified.
    <li>
     <code>LDAP_CHANGETYPE_MODDN</code> specifies that the DN or RDN
     of the entry was changed (a modify RDN or modify DN operation
     was performed).
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>prevdnp</code></td>
  <td>
   Pointer to the previous DN of the entry, if the
   <code>changetypes</code> argument is
   <code>LDAP_CHANGETYPE_MODDN</code>. (If the
   <code>changetypes</code> argument has a different value, this
   argument is set to <code>NULL</code>.)
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#memfree">ldap_memfree()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>chgnumpresentp</code></td>
  <td>
   Pointer to an integer specifying whether or not to the change
   number is included in the control. The parameter can have the
   following possible values:
   <p></p>
   <ul>
    <li><code>0</code> specifies that the change number is not included.
    <li>
     A non-zero value specifies that the change number is included
     and is available as the <code>chgnump</code> argument.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>chgnump</code></td>
  <td>
   Pointer to the change number identifying the change made to the
   entry, if <code>chgnumpresentp</code> points to a non-zero value.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when
  BER-decoding the control.
</ul>

<p><strong>Description</strong></p>

<p>Call the <code>ldap_parse_entrychange_control()</code> function
to parse an entry returned from a persistent search operation and
retrieve an entry change control.</p>

<p>Call this function after receiving an entry from a persistent
search and retrieving the controls from the entry (call
<code><a href="function.htm#get-entry-controls">ldap_get_entry_controls()</a></code>
to get the controls).</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#create-persistentsearch-control">ldap_create_persistentsearch_control()</a>,
<a href="function.htm#get-entry-controls">ldap_get_entry_controls()</a>.</code></p>

<h2 id="parse-extended-result">ldap_parse_extended_result()</h2>

<p>Parses the results of an LDAP extended operation and retrieves
the OID and data returned by the server.</p>

<p>This function implements an extension to the LDAPv3 protocol.
Extended operations might not be supported on all LDAP servers. Call
this function when interacting with LDAP servers that support this
LDAPv3 extension. See <a href="extendop.htm#determine_extendop_support">"Determining 
the Extended Operations Supported"</a> to determine if the server
supports extended operations.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_parse_extended_result( LDAP *ld, LDAPMessage *res,
  char **retoidp, struct berval **retdatap, int freeit );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-97 - ldap_parse_extended_result() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>res</code></td>
  <td>
   Pointer to the
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure containing the results of an LDAP operation.
  </td>
 </tr>
 <tr>
  <td><code>retoidp</code></td>
  <td>
   Pointer to the object identifier (OID) returned by the server
   after performing the extended operation.
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#memfree">ldap_memfree()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>retdatap</code></td>
  <td>
   Pointer to the pointer to a
   <a href="datatype.htm#berval">berval</a> structure containing the
   data returned by the server after performing the extended
   operation.
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#ber-bvfree">ber_bvfree()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>freeit</code></td>
  <td>
   Specifies whether or not to free the results of the operation
   (the <a href="datatype.htm#LDAPMessage">LDAPMessage</a> structure
   specified by the <code>res</code> argument). The parameter can
   have the following possible values:
   <p></p>
   <ul>
    <li><code>0</code> specifies that the result should not be freed.
    <li>A non-zero value specifies that the result should be freed.
   </ul>
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values, which indicates the result of parsing
the server's response (this value does not apply to the LDAP extended
operation itself):</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when
  decoding the BER-encoded results from the server.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if your LDAP client does not
  specify that it is using the LDAPv3 protocol. Make sure that you
  set the version of your LDAP client to version 3 before calling
  this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
</ul>

<p><strong>Description</strong></p>

<p>After you call the
<code><a href="function.htm#extended-operation">ldap_extended_operation()</a></code>
function and the
<code><a href="function.htm#result">ldap_result()</a></code> function,
you can pass the results to the
<code>ldap_parse_extended_result()</code> function.
<code>ldap_parse_extended_result()</code> parses the server's
response to an extended operation.</p>

<p>This function gets the following data from the server's response:</p>

<ul>
 <li>
  The extended operation OID received from the server is passed back
  as the <code>retoidp</code> argument.
 <li>
  The data received from the server is passed back in the
  <a href="datatype.htm#berval">berval</a> structure as the
  <code>retdatap</code> argument.
 <li>
  The LDAP result code for the LDAP extended operation is placed in
  the <code>ld</code> structure. You can get the result code by
  calling the
  <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
  function.
  <p></p>
  For a list of possible result codes for an LDAP extended operation,
  see the result code documentation for the
  <code><a href="function.htm#extended-operation-s">ldap_extended_operation_s()</a></code>
  function.
</ul>

<p>The LDAP server must support the extended operation. The Netscape
Directory Server supports a server plug-in interface that you can
use to add support for extended operations to the server. For
details, see the <em>Netscape Directory Server Programmer's Guide</em>.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#extended-operation">ldap_extended_operation()</a>,
<a href="function.htm#get-lderrno">ldap_get_lderrno()</a>.</code></p>

<h2 id="parse-reference">ldap_parse_reference()</h2>

<p>Parses search references from the results received from an LDAP
server.</p>

<p>Search references are part of the LDAPv3 protocol. When calling
this function, make sure that you are working with a server that
supports the LDAPv3 protocol.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_parse_reference( LDAP *ld, LDAPMessage *ref,
  char ***referralsp, LDAPControl ***serverctrlsp,
  int freeit );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-98 - ldap_parse_reference() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>ref</code></td>
  <td>
   Pointer to an
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure of the type <code>LDAP_RES_SEARCH_REFERENCE</code>.
  </td>
 </tr>
 <tr>
  <td><code>referralsp</code></td>
  <td>
   Pointer to an array of strings representing the referrals found
   by an LDAP search operation and returned by the server (applicable
   only if the LDAP operation was a search operation).
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#value-free">ldap_value_free()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>serverctrlsp</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures, which represent the LDAPv3 server controls returned
   by the server.
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#controls-free">ldap_controls_free()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>freeit</code></td>
  <td>
   Specifies whether or not to free the results of the operation
   (the <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure specified by the <code>res</code> argument). The
   parameter can have the following possible values:
   <p></p>
   <ul>
    <li>0 specifies that the result should not be freed.
    <li>A non-zero value specifies that the result should be freed.
   </ul>
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  <code>LDAP_SUCCESS</code> if the referral URLs were retrieved
  successfully.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when
  decoding the BER-encoded message.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_parse_reference()</code> function parses the
referral URLs from an
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
of the type <code>LDAP_RES_SEARCH_REFERENCE</code>.</p>

<h2 id="parse-result">ldap_parse_result()</h2>

<p>Parses the results of an LDAP operation received from an LDAP
server.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_parse_result( LDAP *ld, LDAPMessage *res,
  int *errcodep, char **matcheddnp, char **errmsgp,
  char ***referralsp, LDAPControl ***serverctrlsp, int freeit);</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-99 - ldap_parse_result() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>res</code></td>
  <td>
   Pointer to the
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure containing the results of an LDAP operation.
  </td>
 </tr>
 <tr>
  <td><code>errcodep</code></td>
  <td>
   Pointer to the LDAP result code specifying the result of the
   operation.
  </td>
 </tr>
 <tr>
  <td><code>matcheddnp</code></td>
  <td>
   Pointer to a string specifying the portion of a DN that finds an
   existing entry (in cases where the server cannot find the entry
   specified by a DN). See <a href="using.htm#receive_portion_dn_matching_entry">"Receiving the
   Portion of the DN Matching an Entry"</a> for details.
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#memfree">ldap_memfree()</a></code> function.
  </td>
 </tr>
 <tr>
  <td><code>errmsgp</code></td>
  <td>
   Pointer to an additional error message string sent from the server.
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#memfree">ldap_memfree()</a></code> function.
  </td>
 </tr>
 <tr>
  <td><code>referralsp</code></td>
  <td>
   Pointer to an array of strings representing the referrals
   returned by the server.
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#value-free">ldap_value_free()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>serverctrlsp</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures, which represent the LDAPv3 server controls returned
   by the server.
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#controls-free">ldap_controls_free()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>freeit</code></td>
  <td>
   Specifies whether or not to automatically free the results of the
   operation (the
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure specified by the <code>res</code> argument). The
   parameter can have the following possible values:
   <p></p>
   <ul>
    <li>0 specifies that the result should not be freed.
    <li>A non-zero value specifies that the result should be freed.
   </ul>
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if the results were parsed successfully.
 <li>
  <code>LDAP_NO_RESULTS_RETURNED</code> if the specified
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  does not contain the result of an LDAP operation (for example, if
  it contains an entry, search reference, or chain of search results
  instead of the result of an LDAP operation).
 <li>
  <code>LDAP_MORE_RESULTS_TO_RETURN</code> if the result in the
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure
  is part of a chain of results and the last result is not included.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when
  decoding the BER-encoded message.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_parse_result()</code> function parses the results
of an LDAP operation (received from an LDAP server) and retrieves
the following information:</p>

<ul>
 <li>
  The LDAP result code that indicates the result of the LDAP
  operation (<code>errcodep</code>).
 <li>
  An additional error message (optional) sent by the server
  (<code>errmsgp</code>).
 <li>
  The portion of the DN that finds an entry, if the server is unable
  to find an entry from a DN that you specify
  (<code>matcheddnp</code>) (see <a href="using.htm#receive_portion_dn_matching_entry">"Receiving
  the Portion of the DN Matching an Entry"</a> for details).
 <li>
  A set of referrals, if the server does not contain the entries
  that you've specified and if the server is configured to refer
  clients to other servers (<code>referralsp</code>).
 <li>
  a set of server response controls that are relevant to the
  operation (<code>serverctrlsp</code>).
</ul>

<p>Calling this function creates an array of
<code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structures
that you can pass to subsequent API functions (such as the
<code><a href="function.htm#parse-sort-control">ldap_parse_sort_control()</a></code>
function).</p>

<p>Note that this function is not intended to be used to parse
entries and search references. (Use the
<code><a href="function.htm#msgtype">ldap_msgtype()</a></code> function
to determine the type of result contained in the
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure.)</p>

<ul>
 <li>
  If the result is an entry returned as a search result, call the
  <code><a href="function.htm#first-entry">ldap_first_entry()</a></code>
  function to retrieve the entry.
 <li>
  If the result is a search reference, call the
  <code><a href="function.htm#parse-reference">ldap_parse_reference()</a></code>
  function to retrieve the reference.
</ul>

<p><strong>Example</strong></p>

<p>See the examples in the following sections:</p>

<ul>
 <li>
  For an example of parsing the results of an asynchronous LDAP add
  operation, see <a href="addmod.htm#example-add-entry-directory-async">"Example: Adding an
  Entry to the Directory (Asynchronous)."</a>
 <li>
  For an example of parsing the results of an asynchronous LDAP
  modify operation, see <a href="addmod.htm#example-modify-entry-directory-async">"Example:
  Modifying an Entry in the Directory (Asynchronous)."</a>
 <li>
  For an example of parsing the results of an asynchronous LDAP
  delete operation, see <a href="addmod.htm#example-delete-entry-directory-async">"Example:
  Deleting an Entry from the Directory (Asynchronous)."</a>
 <li>
  For an example of parsing the results of an asynchronous LDAP
  modify DN operation, see <a href="addmod.htm#example-rename-entry-directory-async">"Example:
  Renaming an Entry in the Directory (Asynchronous)."</a>
 <li>
  For an example of parsing the results of an asynchronous LDAP
  search operation, see <a href="search.htm#c6-example-searching-the-directory-asynchronous">"Example:
  Searching the Directory (Asynchronous)."</a>
 <li>
  For an example of parsing the results of an asynchronous LDAP bind
  operation, see <a href="writing.htm#perform_async_auth">"Performing an
  Asynchronous Authentication Operation."</a>
</ul>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#result">ldap_result()</a>.</code></p>

<h2 id="parse-sasl-bind-result">ldap_parse_sasl_bind_result()</h2>

<p>Parses the results of an LDAP SASL bind operation and retrieves
data (such as a challenge) returned by the server. This function
also gets the LDAP result code for the SASL bind operation and sets
it in the <code>ld</code> structure. (You can retrieve it by
calling the
<code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
function.)</p>

<p>SASL authentication is part of the LDAPv3 protocol. When calling
this function, make sure that you are working with a server that
supports the LDAPv3 protocol.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_parse_sasl_bind_result( LDAP *ld, LDAPMessage *res,
  struct berval **servercredp, int freeit );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-100 - ldap_parse_sals_bind_result() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>res</code></td>
  <td>
   Pointer to the
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure containing the results of an LDAP operation.
  </td>
 </tr>
 <tr>
  <td><code>servercredp</code></td>
  <td>
   Pointer to a pointer to an
   <code><a href="datatype.htm#berval">berval</a></code> structure
   containing any challenge or credentials returned by the server.
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#ber-bvfree">ber_bvfree()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>freeit</code></td>
  <td>
   Specifies whether or not to free the results of the operation
   (the <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code>
   structure specified by the <code>res</code> argument). The
   parameter can have the following possible values:
   <p></p>
   <ul>
    <li>0 specifies that the result should not be freed.
    <li>A non-zero value specifies that the result should be freed.
   </ul>
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values, which indicates the result of
parsing the server's response (this value does not apply to the SASL
bind operation itself):</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if the results were parsed successfully.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if your LDAP client does not
  specify that it is using the LDAPv3 protocol. Make sure that you
  set the version of your LDAP client to version 3 before calling
  this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when
  decoding the BER-encoded message.
</ul>

<p><strong>Description</strong></p>

<p>After you call the
<code><a href="function.htm#sasl-bind">ldap_sasl_bind()</a></code>
function and the
<code><a href="function.htm#result">ldap_result()</a></code>
function, you can pass the results to the
<code>ldap_parse_sasl_bind_result()</code> function parse the
results from the server.</p>

<p>This function gets the following data from the server's response:</p>

<ul>
 <li>
  The challenge or credentials sent back from the server are passed 
  back in the <a href="datatype.htm#berval">berval</a> structure as 
  the <code>servercredp</code> argument.
 <li>
  The LDAP result code for the SASL bind operation is placed in the
  <code>ld</code> structure. You can get the result code by calling
  the <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
  function.
  <p></p>
  For a list of possible result codes for an LDAP SASL bind
  operation, see the result code documentation for the
  <code><a href="function.htm#sasl-bind-s">ldap_sasl_bind_s()</a></code>
  function.
</ul>

<p>If the result code is <code>LDAP_SASL_BIND_IN_PROGRESS</code>,
you can call
<code><a href="function.htm#sasl-bind">ldap_sasl_bind()</a></code> again
to send a response to the server's challenge and call
<code><a href="function.htm#result">ldap_result()</a></code> and
<code>ldap_parse_sasl_bind_result()</code> again to get the next
challenge from the server.</p>

<p>The LDAP server must support authentication through SASL
mechanisms. The Netscape Directory Server supports a server plug-in
interface that you can use to add SASL support to the server. For
details, see the <em>Netscape Directory Server Programmer's Guide</em>.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#sasl-bind">ldap_sasl_bind()</a>,
<a href="function.htm#get-lderrno">ldap_get_lderrno()</a>.</code></p>

<h2 id="parse-sort-control">ldap_parse_sort_control()</h2>

<p>Parses the result returned from a search operation that used a
server control for sorting search results.</p>

<p>This function implements an extension to the LDAPv3 protocol.
Server-side sorting is an optional LDAP server feature; it may not
be supported on all LDAP servers. Call this function when
interacting with LDAP servers that support this LDAPv3 extension.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_parse_sort_control( LDAP *ld, LDAPControl **ctrls,
  unsigned long *result, char **attribute );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-101 - ldap_parse_sort_control() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>ctrls</code></td>
  <td>
   An array of controls returned by the server. You obtain these
   controls by calling the
   <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
   function on the set of results returned by the server.
  </td>
 </tr>
 <tr>
  <td><code>result</code></td>
  <td>Pointer to the sort control result code retrieved by this function.</td>
 </tr>
 <tr>
  <td><code>attribute</code></td>
  <td>
   If the sorting operation fails, the function sets this to point
   to the name of the attribute that caused the failure.
   <p></p>
   When done, you can free this by calling the
   <code><a href="function.htm#memfree">ldap_memfree()</a></code>
   function.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function (for example, if the LDAP connection is not valid).
 <li>
  <code>LDAP_NO_MEMORY</code> if memory cannot be allocated to
  decode the control returned by the server.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when
  BER-decoding the control.
 <li>
  <code>LDAP_CONTROL_NOT_FOUND</code> if no control can be found in
  the response returned from the server.
</ul>

<p><strong>Description</strong></p>

<p>Call the <code>ldap_parse_sort_control()</code> function as part 
of the process of retrieving sorted search results from a server.</p>

<p>Call this function after receiving the results (call 
<code><a href="function.htm#result">ldap_result()</a></code> to get 
the results) and parsing the server controls from the results (call 
<code><a href="function.htm#parse-result">ldap_parse_result()</a></code> to 
get the controls from the results).</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#create-sort-control">ldap_create_sort_control()</a>.</code></p>

<h2 id="parse-virtuallist-control">ldap_parse_virtuallist_control()</h2>

<p>Parses the result returned from a search operation that used a 
server control for virtual list views.</p>

<p>This function implements an extension to the LDAPv3 protocol. A 
virtual list view is an optional LDAP server feature; it may not be 
supported on all LDAP servers. Call this function when interacting 
with LDAP servers that support this LDAPv3 extension.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_parse_virtuallist_control( LDAP *ld,
  LDAPControl **ctrls, unsigned long *target_posp,
  unsigned long *list_sizep, int *errcodep );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-102 - ldap_parse_virtuallist_control() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an 
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure 
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>ctrls</code></td>
  <td>
   An array of controls returned by the server. You obtain these 
   controls by calling the 
   <code><a href="function.htm#parse-result">ldap_parse_result()</a></code> 
   function on the set of results returned by the server.
  </td>
 </tr>
 <tr>
  <td><code>target_posp</code></td>
  <td>
   Pointer to an unsigned long that is set by the function. The 
   function sets this to the index or offset of the selected entry 
   in the list of entries.
  </td>
 </tr>
 <tr>
  <td><code>list_sizep</code></td>
  <td>
   Pointer to an unsigned long that is set by the function. The 
   function sets this to the number of entries in the total number 
   of entries in the entire list (not just the subset).
  </td>
 </tr>
 <tr>
  <td><code>errcodep</code></td>
  <td>Pointer to the sort control result code retrieved by this function.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed 
  to the function (for example, if the LDAP connection is not valid).
 <li>
  <code>LDAP_NO_MEMORY</code> if memory cannot be allocated to 
  decode the control returned by the server.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when 
  BER-decoding the control.
 <li>
  <code>LDAP_CONTROL_NOT_FOUND</code> if no control can be found in 
  the response returned from the server.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if your LDAP client does not 
  specify that it is using the LDAPv3 protocol. Make sure that you 
  set the version of your LDAP client to version 3 before calling this 
  function. (For details, see <a href="writing.htm#spec_client_version">"Specifying 
  the LDAP Version of Your Client."</a>)
</ul>

<p><strong>Description</strong></p>

<p>Call the <code>ldap_parse_virtuallist_control()</code> function 
as part of the process of retrieving a subset of entries from a list 
when working with a virtual list view box.</p>

<p>Call this function after receiving the results (call 
<code><a href="function.htm#result">ldap_result()</a></code> to get 
the results) and parsing the server controls from the results (call 
<code><a href="function.htm#parse-result">ldap_parse_result()</a></code> to 
get the controls from the results).</p>

<p>This function implements an extension to the LDAPv3 protocol. 
This control is supported by the Netscape Directory Server, version 
4.0 and later. For information on determining if a server supports 
this or other LDAPv3 controls, see 
<a href="srvrinfo.htm#determine_server_support">"Determining If the Server Supports 
LDAPv3"</a>.</p>

<p>For more information about this control, see 
<a href="controls.htm#use_virtual_list">"Using the Virtual List View Control."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#create-virtuallist-control">ldap_create_virtuallist_control()</a>.</code></p>

<h2 id="perror">ldap_perror()</h2>

<p>The <code>ldap_perror()</code> function prints the last LDAP 
error message to standard output. The routine precedes this error 
message with the text you supply as the <code>s</code> parameter. 
For more information, see <a href="using.htm#print_error_message">"Printing Out 
Error Messages."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_perror( LDAP *ld, const char *s );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-103 - ldap_perror() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an 
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure 
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>s</code></td>
  <td>Text to print out before printing the error message.</td>
 </tr>
</table>

<p><strong>Example</strong></p>

<p>The following section of code prints out an error message if the 
search operation cannot complete successfully.</p>

<p>
 <strong>Code Example 18-39 - ldap_perror() code example</strong>
</p>

<pre class="code">if ( ldap_search_s( ld, my_searchbase, LDAP_SCOPE_SUBTREE, my_filter,
  get_attr, 0, &amp;result ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_search_s" );
  return( 1 );
...</pre>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#get-lderrno">ldap_get_lderrno()</a>, 
<a href="function.htm#err2string">ldap_err2string()</a>, 
<a href="function.htm#result2error">ldap_result2error()</a>,
<a href="function.htm#set-lderrno">ldap_set_lderrno()</a>.</code></p>

<h2 id="rename">ldap_rename()</h2>

<p>Changes the DN of an entry in the directory asynchronously.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_rename( LDAP *ld, const char *dn, const char *newrdn,
  const char *newparent, int deleteoldrdn,
  LDAPControl **serverctrls, LDAPControl **clientctrls,
  int *msgidp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-104 - ldap_rename() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an 
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure 
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry to rename.</td>
 </tr>
 <tr>
  <td><code>newrdn</code></td>
  <td>New relative distinguished name (RDN) to assign to the entry.</td>
 </tr>
 <tr>
  <td><code>newparent</code></td>
  <td>
   DN of the new parent entry you want to move the entry under. Pass 
   <code>NULL</code> if you do not want to move the entry to a 
   different location in the directory tree.
  </td>
 </tr>
 <tr>
  <td><code>deleteoldrdn</code></td>
  <td>
   If this is a non-zero value, the old RDN is not retained as a 
   value in the entry. If 0, the old RDN is retained as an attribute 
   in the entry.
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of 
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> 
   structures representing LDAP server controls that apply to this 
   LDAP operation. If you do not want to pass any server controls, 
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of 
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> 
   structures representing LDAP client controls that apply to this 
   LDAP operation. If you do not want to pass any client controls, 
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>msgidp</code></td>
  <td>
   Pointer to an integer that will be set to the message ID of the 
   LDAP operation.Pointer to an integer that will be set to the 
   message ID of the LDAP operation. To check the result of this 
   operation, call the 
   <code><a href="function.htm#result">ldap_result()</a></code> and 
   <code><a href="function.htm#parse-result">ldap_parse_result()</a></code> 
   functions.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when 
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive 
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your 
  request (for example, as a session preference) and your LDAP client 
  does not specify that it is using the LDAPv3 protocol. Make sure 
  that you set the version of your LDAP client to version 3 before 
  calling this function. (For details, see 
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your 
  Client."</a>)
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_rename()</code> changes the distinguished name 
(DN) of an entry in the directory asynchronously and allows you to 
move the entry under a different parent entry in the directory tree.</p>

<p>This function is a new version of the 
<code><a href="function.htm#modrdn2">ldap_modrdn2()</a></code> 
function. If you are writing a new LDAP client, you should call this 
function instead of 
<code><a href="function.htm#modrdn2">ldap_modrdn2()</a></code>.</p>

<p>You can specify whether or not the old RDN is retained as an 
attribute of the entry. Use the <code>deleteoldrdn</code> argument 
to do this. Suppose an entry has the following values for the 
<code>cn</code> attribute:</p>

<pre>cn: Barbara Jensen
cn: Babs Jensen</pre>

<p>If you change the RDN to "<code>cn=Barbie Jensen</code>" and pass 
"<code>1</code>" as <code>deleteoldrdn</code>, the resulting entry 
has the following values:</p>

<pre>cn: Barbie Jensen
cn: Babs Jensen</pre>

<p>If instead you pass <code>0</code> as <code>deleteoldrdn</code>, 
the "Barbara Jensen" value is not removed from the entry:</p>

<pre>cn: Barbie Jensen
cn: Babs Jensen
cn: Barbara Jensen</pre>

<p><code>ldap_rename()</code> is an asynchronous function; it does 
not directly return results. If you want the results to be returned 
directly by the function, call the synchronous function 
<code><a href="function.htm#rename-s">ldap_rename_s()</a></code> 
instead. (For more information on asynchronous and synchronous 
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and 
Asynchronous Functions."</a>)</p>

<p>In order to get the results of the LDAP rename operation, you 
need to call the 
<code><a href="function.htm#result">ldap_result()</a></code> function 
and the 
<code><a href="function.htm#parse-result">ldap_parse_result()</a></code> 
function. (See <a href="using.htm#call_async_function">"Calling Asynchronous 
Functions"</a> for details.) For a list of possible result codes for 
an LDAP rename operation, see the result code documentation for the 
<code><a href="function.htm#rename-s">ldap_rename_s()</a></code> 
function.</p>

<p>For more information on changing the DN of an entry, see 
<a href="addmod.htm#change-dn-entry">"Changing the DN of an Entry."</a></p>

<p><strong>Example</strong></p>

<p>See the example under <a href="addmod.htm#example-rename-entry-directory-async">"Example: 
Renaming an Entry in the Directory (Asynchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#rename-s">ldap_rename_s()</a>, 
<a href="function.htm#result">ldap_result()</a>, 
<a href="function.htm#parse-result">ldap_parse_result()</a>.</code></p>

<h2 id="rename-s">ldap_rename_s()</h2>

<p>Changes the DN of an entry in the directory synchronously.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_rename_s( LDAP *ld, const char *dn, const char *newrdn,
  const char *newparent, int deleteoldrdn,
  LDAPControl **serverctrls, LDAPControl **clientctrls );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-105 - ldap_rename_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an 
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure 
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>Distinguished name (DN) of the entry to modify.</td>
 </tr>
 <tr>
  <td><code>newrdn</code></td>
  <td>New relative distinguished name (RDN) to assign to the entry.</td>
 </tr>
 <tr>
  <td><code>newparent</code></td>
  <td>
   DN of the new parent entry you want to move the entry under. Pass 
   <code>NULL</code> if you do not want to move the entry to a 
   different location in the directory tree.
  </td>
 </tr>
 <tr>
  <td><code>deleteoldrdn</code></td>
  <td>
   If this is a non-zero value, the old RDN is not retained as a 
   value in the modified entry. If 0, the old RDN is retained as an 
   attribute in the modified entry.
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of 
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> 
   structures representing LDAP server controls that apply to this 
   LDAP operation. If you do not want to pass any server controls, 
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of 
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> 
   structures representing LDAP client controls that apply to this 
   LDAP operation. If you do not want to pass any client controls, 
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when 
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive 
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_LOCAL_ERROR</code> if an error occurred when receiving 
  the results from the server.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when 
  decoding the BER-encoded results from the server.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if your LDAP client does not 
  specify that it is using the LDAPv3 protocol. Make sure that you 
  set the version of your LDAP client to version 3 before calling 
  this function. (For details, see 
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your 
  Client."</a>)
</ul>

<p>The following result codes can be returned by the Directory 
Server when processing an LDAP modify DN request. Other LDAP servers 
may send these result codes under different circumstances or may send 
different result codes back to your LDAP client.</p>

<ul>
 <li>
  <code>LDAP_OPERATIONS_ERROR</code> may be sent by the Directory 
  Server for general errors encountered by the server when 
  processing the request.
 <li>
  <code>LDAP_PROTOCOL_ERROR</code> if the modify RDN request did not 
  comply with the LDAP protocol. The Directory Server may set this 
  error code in the results for a variety of reasons. Some of these 
  reasons include:
  <p></p>
  <ul>
   <li>
    The server encountered an error when decoding your client's 
    BER-encoded request.
   <li>
    The RDN specified by the <code>newrdn</code> argument is not a 
    valid RDN.
   <li>
    Your LDAP client has not specified that it is using the LDAPv3 
    protocol. Make sure that you set the version of your LDAP client 
    to version 3 before calling this function. (For details, see 
    <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your 
    Client."</a>)
   <li>
    The DN specified by the <code>newparent</code> argument is not a 
    valid DN.
  </ul>
  <p></p>
 <li>
  <code>LDAP_UNWILLING_TO_PERFORM</code> may be sent by the Directory 
  Server in the following situations:
  <p></p>
  <ul>
   <li>
    The entry to be renamed is a DSE (DSA-specific entry, where DSA 
    is the Directory Server Agent).
   <li>
    You have specified a value for the <code>newparent</code> 
    argument and the server does not support the ability to move an 
    entry under another parent entry in the directory tree.
   <li>The server's database is read-only.
  </ul>
  <p></p>
 <li>
  <code>LDAP_NO_SUCH_OBJECT</code> may be sent by the Directory 
  Server if the entry that you want modified does not exist and if 
  no referral URLs are available.
 <li>
  <code>LDAP_REFERRAL</code> may be sent by the Directory Server if 
  the DN specified by the <code>dn</code> argument identifies an 
  entry not handled by the current server and if referral URLs 
  identify a different server to handle the entry. (For example, if 
  the DN is 
  <code>uid=bjensen, ou=European Sales, dc=example,dc=com</code>, 
  all entries under <code>ou=European Sales</code> might be handled 
  by a different directory server.)
 <li>
  <code>LDAP_NOT_ALLOWED_ON_NONLEAF</code> may be sent by the 
  Directory Server if the entry that you want renamed has entries 
  beneath it in the directory tree (in other words, if this entry is 
  a parent entry to other entries).
 <li>
  <code>LDAP_INSUFFICIENT_ACCESS</code> may be sent by the Directory 
  Server if the DN that your client is authenticated as does not 
  have the access rights to write to the entry.
 <li>
  <code>LDAP_ALREADY_EXISTS</code> may be sent by the Directory 
  Server if the new DN identifies an entry that already exists in 
  the directory (for example, if you want to change the DN of an 
  entry to <code>uid=bjensen, ou=People, dc=example,dc=com</code> 
  but an entry with that DN already exists).
</ul>

<p>Note that the Directory Server may send other result codes in 
addition to the codes described here (for example, the server may 
have loaded a custom plug-in that returns other result codes).</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_rename_s()</code> changes the DN of an entry in 
the directory synchronously and allows you to move the entry under 
a different parent entry in the directory tree.</p>

<p>This function is a new version of the 
<code><a href="function.htm#modrdn2-s">ldap_modrdn2_s()</a></code> 
function. If you are writing a new LDAP client, you should call this 
function instead of 
<code><a href="function.htm#modrdn2-s">ldap_modrdn2_s()</a></code>.</p>

<p>You can specify whether or not the old RDN is retained as an 
attribute of the entry. Use the <code>deleteoldrdn</code> argument 
to do this. Suppose an entry has the following values for the 
<code>cn</code> attribute:</p>

<pre>cn: Barbara Jensen
cn: Babs Jensen</pre>

<p>If you change the RDN to <code>cn=Barbie Jensen</code> and pass 
<code>1</code> as <code>deleteoldrdn</code>, the resulting entry has 
the following values:</p>

<pre>cn: Barbie Jensen
cn: Babs Jensen</pre>

<p>If instead you pass <code>0</code> as <code>deleteoldrdn</code>, 
the "Barbara Jensen" value is not removed from the entry:</p>

<pre>cn: Barbie Jensen
cn: Babs Jensen
cn: Barbara Jensen</pre>

<p>The function <code>ldap_rename_s()</code> is synchronous; it 
directly returns the results of the operation. If you want to perform 
other operations while waiting for the results of this operation, 
call the asynchronous function 
<code><a href="function.htm#rename">ldap_rename()</a></code> instead. 
(For more information on asynchronous and synchronous functions, see 
<a href="using.htm#call_sync_async_function">"Calling Synchronous and Asynchronous 
Functions."</a>)</p>

<p>For more information on changing the DN of an entry, see 
<a href="addmod.htm#change-dn-entry">"Changing the DN of an Entry."</a></p>

<p><strong>Example</strong></p>

<p>See the example under <a href="addmod.htm#example-rename-entry-directory-sync">"Example: 
Renaming an Entry in the Directory (Synchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#rename">ldap_rename()</a>.</code></p>

<h2 id="result">ldap_result()</h2>

<p>The function <code>ldap_result()</code> waits for and returns the 
result of an LDAP operation initiated by one of the asynchronous 
LDAP API functions (for example, 
<code><a href="function.htm#search">ldap_search()</a></code>, 
<code><a href="function.htm#add">ldap_add()</a></code>, 
<code><a href="function.htm#modify">ldap_modify()</a></code>).</p>

<p>To identify the operation that you want to check, pass the 
message ID of the operation. (Asynchronous functions return a unique 
message ID that you can pass to the <code>ldap_result()</code> function.)</p>

<p>For more information, see <a href="using.htm#get_server_response">"Getting the 
Server Response."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_result( LDAP *ld, int msgid, int all,
  struct timeval *timeout, LDAPMessage **result );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-106 - ldap_result() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an 
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure 
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>msgid</code></td>
  <td>
   Message ID of the operation for which you want the results. To 
   check any operation, pass <code>LDAP_RES_ANY</code> as the value 
   of this parameter.
  </td>
 </tr>
 <tr>
  <td><code>all</code></td>
  <td>
   Specifies how the results of a search are returned. This parameter 
   can have the following values:
   <p></p>
   <ul>
    <li>
     <code>0</code> specifies that the results are returned one entry 
     at a time, using separate calls to <code>ldap_result()</code>.
    <li>
     A non-zero value specifies that all results are returned at the 
     same time (after the final search result is obtained by the 
     library).
    </ul>
  </td>
 </tr>
 <tr>
  <td><code>timeout</code></td>
  <td>
   Specifies a maximum interval to wait for the selection to 
   complete. If timeout is a <code>NULL</code> pointer, the select 
   blocks indefinitely. To effect a poll, the timeout parameter 
   should be a non-<code>NULL</code> pointer, pointing to a 
   zero-valued <code>timeval</code> structure.
  </td>
 </tr>
 <tr>
  <td><code>result</code></td>
  <td>
   Result of the operation. To interpret the results, pass this to 
   the LDAP parsing routines, such as 
   <code><a href="function.htm#result2error">ldap_result2error()</a></code>, 
   <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>, 
   and <code><a href="function.htm#first-entry">ldap_first_entry()</a></code>.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  <code>LDAP_RES_BIND</code> indicates that the 
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure 
  contains the result of an LDAP bind operation.
 <li>
  <code>LDAP_RES_SEARCH_ENTRY</code> indicates that the 
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure 
  contains an entry found during an LDAP search operation.
 <li>
  <code>LDAP_RES_SEARCH_REFERENCE</code> indicates that the 
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure 
  contains an LDAPv3 search reference (a referral to another LDAP 
  server) found during an LDAP search operation.
 <li>
  <code>LDAP_RES_SEARCH_RESULT</code> indicates that the 
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure 
  contains the result of an LDAP search operation.
 <li>
  <code>LDAP_RES_MODIFY</code> indicates that the 
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure 
  contains the result of an LDAP modify operation.
 <li>
  <code>LDAP_RES_ADD</code> indicates that the 
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure 
  contains the result of an LDAP add operation.
 <li>
  <code>LDAP_RES_DELETE</code> indicates that the 
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure 
  contains the result of an LDAP delete operation.
 <li>
  <code>LDAP_RES_MODDN</code> or <code>LDAP_RES_RENAME</code> 
  indicates that the 
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure 
  contains the result of an LDAP modify DN operation.
 <li>
  <code>LDAP_RES_COMPARE</code> indicates that the 
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure 
  contains the result of an LDAP compare operation.
 <li>
  <code>LDAP_RES_EXTENDED</code> indicates that the 
  <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure 
  contains the result of an LDAPv3 extended operation.
 <li>
  <code>-1</code> indicates that an error occurred. The error code is 
  set in the <code><a href="datatype.htm#LDAP">LDAP</a></code> 
  structure. To get the error code, call the 
  <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code> 
  function. (See <a href="error.htm">Chapter 19 -Result Codes</a> 
  for a complete listing of error codes.)
 <li><code>0</code> indicates that the operation has timed out.
</ul>

<p><strong>Example</strong></p>

<p>See the examples in the following sections:</p>

<ul>
 <li>
  For an example of getting the results of an asynchronous LDAP add 
  operation, see <a href="addmod.htm#example-add-entry-directory-async">"Example: Adding an 
  Entry to the Directory (Asynchronous)."</a>
 <li>
  For an example of getting the results of an asynchronous LDAP 
  modify operation, see <a href="addmod.htm#example-modify-entry-directory-async">"Example: 
  Modifying an Entry in the Directory (Asynchronous)."</a>
 <li>
  For an example of getting the results of an asynchronous LDAP 
  delete operation, see <a href="addmod.htm#example-delete-entry-directory-async">"Example: Deleting 
  an Entry from the Directory (Asynchronous)."</a>
 <li>
  For an example of getting the results of an asynchronous LDAP 
  modify DN operation, see <a href="addmod.htm#example-rename-entry-directory-async">"Example: 
  Renaming an Entry in the Directory (Asynchronous)."</a>
 <li>
  For an example of getting the results of an asynchronous LDAP 
  search operation, see <a href="search.htm#c6-example-searching-the-directory-asynchronous">"Example: 
  Searching the Directory (Asynchronous)."</a>
 <li>
  For an example of getting the results of an asynchronous LDAP bind 
  operation, see <a href="writing.htm#perform_async_auth">"Performing an 
  Asynchronous Authentication Operation."</a>
</ul>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#add-ext">ldap_add_ext()</a>, 
<a href="function.htm#compare-ext">ldap_compare_ext()</a>, 
<a href="function.htm#delete-ext">ldap_delete_ext()</a>,
<a href="function.htm#modify-ext">ldap_modify_ext()</a>, 
<a href="function.htm#rename">ldap_rename()</a>, 
<a href="function.htm#simple-bind">ldap_simple_bind()</a>,
<a href="function.htm#url-search">ldap_url_search()</a>.</code></p>

<h2 id="result2error">ldap_result2error()</h2>

<p>This function is deprecated and is supported and documented in 
this release for backward compatibility only. In its place, you should 
use <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>.</p>

<p><code>ldap_result2error()</code> returns the corresponding error 
code for a result produced by the 
<code><a href="function.htm#result">ldap_result()</a></code> and 
<code><a href="function.htm#search-s">ldap_search_s()</a></code> 
functions.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_result2error( LDAP *ld, LDAPMessage *r, int freeit );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-107 - ldap_result2error() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an 
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure 
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>r</code></td>
  <td>
   Pointer to the 
   <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> 
   structure representing the results returned by the 
   <code><a href="function.htm#result">ldap_result()</a></code> or 
   <code><a href="function.htm#search">ldap_search()</a></code> 
   function.
  </td>
 </tr>
 <tr>
  <td><code>freeit</code></td>
  <td>
   Specifies whether or not the result should be freed after the 
   error code is extracted. The parameter can have the following 
   possible values:
   <p></p>
   <ul>
    <li>0 specifies that the result should not be freed.
    <li>A non-zero value specifies that the result should be freed.
   </ul>
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, sets the error code and other error information in 
  the <a href="datatype.htm#LDAP">LDAP</a> structure and returns the 
  error code. (See <a href="error.htm">Chapter 19 - Result Codes</a> 
  for a complete listing of error codes.)
 <li>If unsuccessful, returns <code>LDAP_PARAM_ERROR</code>.
</ul>

<p><strong>Example</strong></p>

<p>See the example under <code><a href="function.htm#result">ldap_result()</a></code>.</p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#parse-result">ldap_parse_result()</a>, 
<a href="function.htm#get-lderrno">ldap_get_lderrno()</a>, 
<a href="function.htm#err2string">ldap_err2string()</a>,
<a href="function.htm#result">ldap_result()</a>, 
<a href="function.htm#set-lderrno">ldap_set_lderrno()</a>.</code></p>

<h2 id="sasl-bind">ldap_sasl_bind()</h2>

<p>Authenticates your client to an LDAP server using an SASL (Simple 
Authentication and Security Layer) mechanism. The LDAP server must 
support that SASL mechanism for authentication.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_sasl_bind( LDAP *ld, const char *dn,
  const char *mechanism, const struct berval *cred,
  LDAPControl **serverctrls, LDAPControl **clientctrls,
    int *msgidp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-108 - ldap_sasl_bind() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an 
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure 
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>
   Distinguished name (DN) of the user who wants to authenticate. 
   For anonymous authentication, set this to NULL.
  </td>
 </tr>
 <tr>
  <td><code>mechanism</code></td>
  <td>Name of the SASL mechanism that you want to use for authentication.</td>
 </tr>
 <tr>
  <td><code>cred</code></td>
  <td>
   Pointer to the 
   <code><a href="datatype.htm#berval">berval</a></code> structure 
   containing the credentials that you want to use for authentication.
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of 
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> 
   structures representing LDAP server controls that apply to this 
   LDAP operation. If you do not want to pass any server controls, 
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of 
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> 
   structures representing LDAP client controls that apply to this 
   LDAP operation. If you do not want to pass any client controls, 
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>msgidp</code></td>
  <td>
   Pointer to an integer that will be set to the message ID of the 
   LDAP operation. To check the result of this operation, call 
   <code><a href="function.htm#result">ldap_result()</a></code> and 
   <code><a href="function.htm#parse-sasl-bind-result">ldap_parse_sasl_bind_result()</a></code> 
   functions.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  <code>LDAP_SUCCESS</code> if the SASL bind request was sent 
  successfully.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed 
  to the function.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if your LDAP client does not 
  specify that it is using the LDAPv3 protocol. Make sure that you 
  set the version of your LDAP client to version 3 before calling 
  this function. (For details, see 
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your 
  Client."</a>)
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when 
  BER-encoding the request to send to the server.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive 
  the request or if the connection to the server was lost.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_sasl_bind()</code> function authenticates your 
client to an LDAP server by using a specified SASL mechanism. The 
LDAP server must support authentication through that SASL mechanism. 
(The Netscape Directory Server supports a server plug-in interface 
that you can use to add SASL support to the server. For details, see 
the <em>Netscape Directory Server Plug-in Programmer's Guide</em>.)</p>

<p><code>ldap_sasl_bind()</code> is an asynchronous function; it 
does not directly return results. If you want the results to be 
returned directly by the function, call the synchronous function 
<code><a href="function.htm#sasl-bind-s">ldap_sasl_bind_s()</a></code> 
instead. (For more information on asynchronous and synchronous 
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and 
Asynchronous Functions."</a>)</p>

<p>In order to get the results of the LDAP SASL bind operation, you 
need to call the 
<code><a href="function.htm#result">ldap_result()</a></code> function, 
the <code><a href="function.htm#parse-sasl-bind-result">ldap_parse_sasl_bind_result()</a></code> 
function, and the 
<code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code> 
function. (See <a href="sasl.htm#async_sasl_bind">"Performing an Asynchronous 
SASL Bind Operation"</a> for details.) For a list of possible result 
codes for an LDAP SASL bind operation, see the result code 
documentation for the 
<code><a href="function.htm#sasl-bind-s">ldap_sasl_bind_s()</a></code> 
function.</p>

<p>For additional information on authenticating through SASL 
mechanisms, see <a href="sasl.htm">Chapter 13 - Using SASL 
Authentication</a>.</p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#result">ldap_result()</a>, 
<a href="function.htm#parse-sasl-bind-result">ldap_parse_sasl_bind_result()</a>, 
<a href="function.htm#get-lderrno">ldap_get_lderrno()</a>,
<a href="function.htm#sasl-bind-s">ldap_sasl_bind_s()</a>.</code></p>

<h2 id="sasl-bind-s">ldap_sasl_bind_s()</h2>

<p>Authenticates your client to an LDAP server synchronously using 
an SASL (Simple Authentication and Security Layer) mechanism. The 
LDAP server must support that SASL mechanism for authentication.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_sasl_bind_s( LDAP *ld, const char *dn,
  const char *mechanism, const struct berval *cred,
  LDAPControl **serverctrls, LDAPControl **clientctrls,
  struct berval **servercredp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-109 - ldap_sasl_bind_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an 
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure 
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>dn</code></td>
  <td>
   Distinguished name (DN) of the user who wants to authenticate. 
   For anonymous authentication, set this to NULL.
  </td>
 </tr>
 <tr>
  <td><code>mechanism</code></td>
  <td>Name of the SASL mechanism that you want to use for authentication.</td>
 </tr>
 <tr>
  <td><code>cred</code></td>
  <td>
   Pointer to the <code><a href="datatype.htm#berval">berval</a></code> 
   structure containing the credentials that you want to use for 
   authentication.
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of 
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> 
   structures representing LDAP server controls that apply to this 
   LDAP operation. If you do not want to pass any server controls, 
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of 
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> 
   structures representing LDAP client controls that apply to this 
   LDAP operation. If you do not want to pass any client controls, 
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>servercredp</code></td>
  <td>
   Pointer to a pointer to an 
   <code><a href="datatype.htm#berval">berval</a></code> structure 
   containing any credentials returned by the server. When done, you 
   can free this by calling the 
   <code><a href="function.htm#ber-bvfree">ber_bvfree()</a></code> function.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  <code>LDAP_SUCCESS</code> if your client authenticated
  successfully to the server.
 <li>
  <code>LDAP_PARAM_ERROR</code> if an invalid parameter was passed
  to the function.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if your LDAP client does not
  specify that it is using the LDAPv3 protocol. Make sure that you
  set the version of your LDAP client to version 3 before calling
  this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request to send to the server.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when the
  LDAP API library was decoding the BER-encoded results received
  from the server.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li>
  <code>LDAP_LOCAL_ERROR</code> if an error occurred when receiving
  the results from the server.
</ul>

<p>The following result codes can be returned by the Directory
Server when processing an LDAP SASL bind request. Other LDAP servers
may send these result codes under different circumstances or may
send different result codes back to your LDAP client.</p>

<ul>
 <li>
  <code>LDAP_OPERATIONS_ERROR</code> may be sent by the Directory
  Server if the server cannot parse the LDAP controls that you are
  passing as arguments.
 <li>
  <code>LDAP_UNAVAILABLE_CRITICAL_EXTENSION</code> may be sent by
  the Directory Server if you specify a critical LDAP control that
  is not supported by the server.
 <li>
  <code>LDAP_AUTH_METHOD_NOT_SUPPORTED</code> can be set by the
  Directory Server if the SASL mechanism that you specify is not
  supported by the server (or if you specify an empty string as the
  SASL mechanism).
 <li>
  <code>LDAP_PROTOCOL_ERROR</code> if the bind request sent by this
  function did not comply with the LDAP protocol. The Directory
  Server may set this error code in the results for a variety of
  reasons. Some of these reasons include:
  <p></p>
  <ul>
   <li>
    The server encountered an error when decoding your client's
    BER-encoded request.
   <li>
    Your LDAP client has not specified that it is using the LDAPv3
    protocol. Make sure that you set the version of your LDAP client
    to version 3 before sending a SASL bind request. (For details, see
    <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
    Client."</a>)
  </ul>
</ul>

<p>Note that the Netscape Directory Server may send other result
codes in addition to the codes described here (for example,
<code>LDAP_NO_SUCH_OBJECT</code> if the DN in the original bind
request does not exist or <code>LDAP_INVALID_CREDENTIALS</code> if
the credentials in the original bind request were incorrect). In the
Directory Server, the people deploying the server are responsible for
implementing the authentication mechanisms for SASL authentication.
Check with your server administrator for additional result codes
returned to the client.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_sasl_bind_s()</code> function authenticates your
client to an LDAP server by using a specified SASL mechanism. The
LDAP server must support authentication through that SASL mechanism.
(The Netscape Directory Server supports a server plug-in interface
that you can use to add SASL support to the server. For details, see
the <em>Netscape Directory Server Plug-In Programmer's Guide</em>.)</p>

<p>After authenticating a client through SASL, an LDAP server can
return a set of credentials in the results. The
<code>servercredp</code> argument points to this value.</p>

<p><code>ldap_sasl_bind_s()</code> is a synchronous function, which
directly returns the results of the operation. If you want to
perform other operations while waiting for the results of this
operation, call the asynchronous function
<code><a href="function.htm#sasl-bind">ldap_sasl_bind()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>For additional information on authenticating through SASL
mechanisms, see <a href="sasl.htm">Chapter 13 - Using SASL
Authentication</a>.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#sasl-bind">ldap_sasl_bind()</a>.</code></p>

<h2 id="search">ldap_search()</h2>

<p>Searches the directory asynchronously.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP
client, use
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code>
instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_search( LDAP *ld, const char *base, int scope,
  const char* filter, char **attrs, int attrsonly );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-110 - ldap_search() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>base</code></td>
  <td>
   Distinguished name (DN) of the entry that serves as the starting
   point for the search. For example, setting <code>base</code> to
   <code>"dc=example,dc=com"</code> restricts the search to entries
   at example.com.
  </td>
 </tr>
 <tr>
  <td><code>scope</code></td>
  <td>
   Scope of the search, which can be one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_SCOPE_BASE</code> searches the entry specified by
     <code>base</code>.
    <li>
     <code>LDAP_SCOPE_ONELEVEL</code> searches all entries one level
     beneath the entry specified by <code>base</code>.
    <li>
     <code>LDAP_SCOPE_SUBTREE</code> searches the entry specified by
     <code>base</code> and all entries at all levels beneath the
     entry specified by <code>base</code>.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>filter</code></td>
  <td>
   String representation of the filter to apply in the search. You
   can specify simple filters with the following syntax:
   <p></p>
   <ul>
    <li>
     <code>(attributetype=attributevalue)</code>
   </ul>
   <p></p>
   For details on the syntax for filters, see
   <a href="search.htm#c6-specifying-a-search-filter">"Specifying a Search Filter."</a>
  </td>
 </tr>
 <tr>
  <td><code>attrs</code></td>
  <td>
   A <code>NULL</code>-terminated array of attribute types to return
   from entries that match filter. If you specify a
   <code>NULL</code>, all attributes will be returned.
  </td>
 </tr>
 <tr>
  <td><code>attrsonly</code></td>
  <td>
   Specifies whether or not attribute values are returned along with
   the attribute types. This parameter can have the following values:
   <p></p>
   <ul>
    <li>
     <code>0</code> specifies that both attribute types and
     attribute values are returned.
    <li><code>1</code> specifies that only attribute types are returned.
   </ul>
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>Returns the message ID of the <code>ldap_search()</code>
operation. To check the result of this operation, call
<code><a href="function.htm#result">ldap_result()</a></code> and
<code><a href="function.htm#result2error">ldap_result2error()</a></code>
for a list of possible result codes for an LDAP search operation,
see the result code documentation for the
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>
function.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_search()</code> function searches the directory
asynchronously.</p>

<p>A newer version of this function,
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code>, is
available in this release of the LDAP API. <code>ldap_search()</code>
(the older version of the function) is included only for
backward-compatibility. If you are writing a new LDAP client, use
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code>
instead of <code>ldap_search()</code>.</p>

<p>If you want more information on <code>ldap_search()</code>, refer
to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following section of code searches the directory.</p>

<p>
 <strong>Code Example 18-40 - ldap_search() code example</strong>
</p>

<pre class="code">#include "examples.h"

static void do_other_work();
unsigned long global_counter = 0;

int
main( int argc, char **argv )
{
  LDAP *ld;
  LDAPMessage *result, *e;
  BerElement *ber;
  char *a, *dn;
  char **vals;
  int i, rc, finished, msgid;
  int num_entries = 0;
  struct timeval zerotime;

  zerotime.tv_sec = zerotime.tv_usec = 0L;

/* get a handle to an LDAP connection */
if ( (ld = ldap_init( MY_HOST, MY_PORT )) == NULL ) {
  perror( "ldap_init" );
  return( 1 );
}
/* authenticate to the directory as nobody */
if ( ldap_simple_bind_s( ld, NULL, NULL ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_simple_bind_s" );
  return( 1 );
}
/* search for all entries with surname of Jensen */
if (( msgid = ldap_search( ld, MY_SEARCHBASE, LDAP_SCOPE_SUBTREE,
    MY_FILTER, NULL, 0 )) == -1 ) {
  ldap_perror( ld, "ldap_search" );
  return( 1 );
}

/* Loop, polling for results until finished */
finished = 0;
while ( !finished ) {
  /*
  * Poll for results.  We call ldap_result with the "all" parameter
  * set to zero. This causes ldap_result() to return exactly one
  * entry if at least one entry is available. This allows us to
  * display the entries as they are received.
  */
  result = NULL;
  rc = ldap_result( ld, msgid, 0, &amp;zerotime, &amp;result );
  switch ( rc ) {
  case -1:
    /* some error occurred */
    ldap_perror( ld, "ldap_result" );
    return( 1 );
  case 0:
  /* Timeout was exceeded. No entries are ready for retrieval. */
    if ( result != NULL ) {
      ldap_msgfree( result );
    }
    break;
  default:
  /*
  * Either an entry is ready for retrieval, or all entries have
  * been retrieved.
  */
    if (( e = ldap_first_entry( ld, result )) == NULL ) {
      /* All done */
      finished = 1;
      if ( result != NULL ) {
        ldap_msgfree( result );
      }
      continue;
    }
    /* for each entry print out name + all attrs and values */
    num_entries++;
    if (( dn = ldap_get_dn( ld, e )) != NULL ) {
      printf( "dn: %s\n", dn );
      ldap_memfree( dn );
    }
    for ( a = ldap_first_attribute( ld, e, &amp;ber );
     a != NULL; a = ldap_next_attribute( ld, e, ber ) ) {
      if (( vals = ldap_get_values( ld, e, a )) != NULL ) {
        for ( i = 0; vals[ i ] != NULL; i++ ) {
          printf( "%s: %s\n", a, vals[ i ] );
        }
      ldap_value_free( vals );
      }
      ldap_memfree( a );
    }
    if ( ber != NULL ) {
      ldap_ber_free( ber, 0 );
    }
    printf( "\n" );
    ldap_msgfree( result );
  }
  /* Do other work here while you are waiting... */
  do_other_work();
}

/* All done. Print a summary. */
printf( "%d entries retrieved. I counted to %ld "
    "while waiting.\n", num_entries, global_counter );
ldap_unbind( ld );
return( 0 );
}

/*
 * Perform other work while polling for results. */
static void
do_other_work()
{
  global_counter++;
}</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#search-ext">ldap_search_ext()</a>.</code></p>

<h2 id="search-ext">ldap_search_ext()</h2>

<p>Searches the directory asynchronously.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_search_ext( LDAP *ld, const char *base, int scope,
  const char *filter, char **attrs, int attrsonly,
  LDAPControl **serverctrls, LDAPControl **clientctrls,
  struct timeval *timeoutp, int sizelimit, int *msgidp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-111 - ldap_sort_ext() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>base</code></td>
  <td>
   Distinguished name (DN) of the entry that serves as the starting
   point for the search. For example, setting <code>base</code> to
   <code>"dc=example,dc=com"</code> restricts the search to entries
   at <code>example.com</code>.
  </td>
 </tr>
 <tr>
  <td><code>scope</code></td>
  <td>
   Scope of the search, which can be one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_SCOPE_BASE</code> searches the entry specified by
     <code>base</code>.
    <li>
     <code>LDAP_SCOPE_ONELEVEL</code> searches all entries one level
     beneath the entry specified by <code>base</code>.
    <li>
     <code>LDAP_SCOPE_SUBTREE</code> searches the entry specified by
     <code>base</code> and all entries at all levels beneath the
     entry specified by <code>base</code>.
   </ul>
  </td>
 </tr>
 <tr>
  <td>><code>filter</code></td>
  <td>
   String representation of the filter to apply in the search. You
   can specify simple filters with the following syntax:
   <p></p>
   <ul>
    <li><code>(attributetype=attributevalue)</code>
   </ul>
   <p></p>
   For details on the syntax for filters, see
   <a href="search.htm#c6-specifying-a-search-filter">"Specifying a Search Filter."</a>
  </td>
 </tr>
 <tr>
  <td><code>attrs</code></td>
  <td>
   A <code>NULL</code>-terminated array of attribute types to return
   from entries that match filter. If you specify a
   <code>NULL</code>, all attributes will be returned.
  </td>
 </tr>
 <tr>
  <td><code>attrsonly</code></td>
  <td>
   Specifies whether or not attribute values are returned along with
   the attribute types. This parameter can have the following values:
   <p></p>
   <ul>
    <li>
     <code>0</code> specifies that both attribute types and
     attribute values are returned.
    <li><code>1</code> specifies that only attribute types are returned.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP client controls that apply to this
   LDAP operation. If you do not want to pass any client controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>timeoutp</code></td>
  <td>
   Pointer to a <code>timeval</code> structure specifying the maximum
   time to wait for the results of the search. Pass <code>NULL</code>
   to use the default time limit for the current connection. To
   specify an infinite time limit, set the <code>tv_sec</code> and
   <code>tv_usec</code> fields in the <code>timeval</code> structure
   to 0.
  </td>
 </tr>
 <tr>
  <td><code>sizelimit</code></td>
  <td>
   Maximum number of results to return in the search. Pass
   <code>-1</code> to use the default size limit for the current
   connection.
  </td>
 </tr>
 <tr>
  <td><code>msgidp</code></td>
  <td>
   Pointer to an integer that will be set to the message ID of the
   LDAP operation. To check the result of this operation, call the
   <code><a href="function.htm#result">ldap_result()</a></code> and
   <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
   functions.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your
  request (for example, as a session preference) and your LDAP client
  does not specify that it is using the LDAPv3 protocol. Make sure
  that you set the version of your LDAP client to version 3 before
  calling this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_search_ext()</code> function searches the directory
for matching entries asynchronously.</p>

<p>This function is a new version of the
<code><a href="function.htm#search">ldap_search()</a></code> function.
If you are writing a new LDAP client, you should call this function
instead of <code><a href="function.htm#search">ldap_search()</a></code>.</p>

<p>You can use this function to pass LDAP server controls to the
server if you want the server to sort the results or if you want to
request a persistent search. (See
<code><a href="function.htm#create-sort-control">ldap_create_sort_control()</a></code>
and <code><a href="function.htm#create-persistentsearch-control">ldap_create_persistentsearch_control()</a></code>
for more information.)</p>

<p><code>ldap_search_ext()</code> is an asynchronous function; it
does not directly return results. If you want the results to be
returned directly by the function, call the synchronous function
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling 
Synchronous and Asynchronous Functions."</a>)</p>

<p>In order to get the results of the LDAP search operation, you
need to call the
<code><a href="function.htm#result">ldap_result()</a></code> function
and the <code><a href="function.htm#parse-result">ldap_parse_result()</a></code>
function. (See <a href="search.htm#c6-getting-results-asynchronously">"Getting 
Results Asynchronously"</a> for details.) For a list of possible result
codes for an LDAP search operation, see the result code documentation
for the <code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>
function.</p>

<p>For more information on searching the directory, see
<a href="search.htm">Chapter 6 - Searching the Directory</a>.</p>

<p><strong>Example</strong></p>

<p>See the example under <a href="search.htm#c6-example-searching-the-directory-asynchronous">"Example:
Searching the Directory (Asynchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a>,
<a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#parse-result">ldap_parse_result()</a>.</code></p>

<h2 id="search-ext-s">ldap_search_ext_s()</h2>

<p>Searches the directory synchronously.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_search_ext_s( LDAP *ld, const char *base, int scope,
  const char *filter, char **attrs, int attrsonly,
  LDAPControl **serverctrls, LDAPControl **clientctrls,
  struct timeval *timeoutp, int sizelimit, LDAPMessage **res );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-112 - ldap_search_ext_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>base</code></td>
  <td>
   Distinguished name (DN) of the entry that serves as the starting
   point for the search. For example, setting <code>base</code> to
   <code>"dc=example,dc=com"</code> restricts the search to entries
   at <code>example.com</code>.
  </td>
 </tr>
 <tr>
  <td>><code>scope</code></td>
  <td>
   Scope of the search, which can be one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_SCOPE_BASE</code> searches the entry specified by
     <code>base</code>.
    <li>
     <code>LDAP_SCOPE_ONELEVEL</code> searches all entries one level
     beneath the entry specified by <code>base</code>.
    <li>
     <code>LDAP_SCOPE_SUBTREE</code> searches all entries at all
     levels beneath the entry specified by <code>base</code>.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>filter</code></td>
  <td>
   String representation of the filter to apply in the search. You
   can specify simple filters with the following syntax:
   <p></p>
   <ul>
    <li>
     <code>(attributetype=attributevalue)</code>
   </ul>
   <p></p>
   For details on the syntax for filters, see
   <a href="search.htm#c6-specifying-a-search-filter">"Specifying a 
   Search Filter."</a>
  </td>
 </tr>
 <tr>
  <td><code>attrs</code></td>
  <td>
   A <code>NULL</code>-terminated array of attribute types to return
   from entries that match filter. If you specify a <code>NULL</code>,
   all attributes will be returned.
  </td>
 </tr>
 <tr>
  <td><code>attrsonly</code></td>
  <td>
   Specifies whether or not attribute values are returned along with
   the attribute types. This parameter can have the following values:
   <p></p>
   <ul>
    <li>
     <code>0</code> specifies that both attribute types and attribute
     values are returned.
    <li><code>1</code> specifies that only attribute types are returned.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP server controls that apply to this
   LDAP operation. If you do not want to pass any server controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing LDAP client controls that apply to this
   LDAP operation. If you do not want to pass any client controls,
   specify <code>NULL</code> for this argument.
  </td>
 </tr>
 <tr>
  <td><code>timeoutp</code></td>
  <td>
   Pointer to a <code>timeval</code> structure specifying the maximum
   time to wait for the results of the search.
  </td>
 </tr>
 <tr>
  <td><code>sizelimit</code></td>
  <td>Maximum number of results to return in the search.</td>
 </tr>
 <tr>
  <td><code>res</code></td>
  <td>Results of the search (when the call is completed).</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_LOCAL_ERROR</code> if an error occurred when receiving
  the results from the server.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when decoding
  the BER-encoded results from the server.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your
  request (for example, as a session preference) and your LDAP client
  does not specify that it is using the LDAPv3 protocol. Make sure
  that you set the version of your LDAP client to version 3 before
  calling this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>)
 <li>
  <code>LDAP_FILTER_ERROR</code> if an error occurred when parsing
  and BER-encoding the search filter specified by the
  <code>filter</code> argument.
 <li>
  <code>LDAP_TIMEOUT</code> if the search exceeded the time specified
  by the <code>timeoutp</code> argument.
</ul>

<p>The following result codes can be returned by the Netscape
Directory Server when processing an LDAP search request. Other LDAP
servers may send these result codes under different circumstances or
may send different result codes back to your LDAP client.</p>

<ul>
 <li>
  <code>LDAP_OPERATIONS_ERROR</code> may be sent by the Directory
  Server for general errors encountered by the server when
  processing the request.
 <li>
  <code>LDAP_PROTOCOL_ERROR</code> if the search request did not
  comply with the LDAP protocol. The Directory Server may set this
  error code in the results for a variety of reasons. Some of these
  reasons include:
  <p></p>
  <ul>
   <li>
    The server encountered an error when decoding your client's
    BER-encoded request.
   <li>
    The search request received by the server specifies an unknown
    search scope or filter type.
   <li>
    Your LDAP client attempts to use an extensible search filter and
    has not specified that it is using the LDAPv3 protocol. Make sure
    that you set the version of your LDAP client to version 3 before
    sending the request. (For details, see
    <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
    Client."</a>)
   <li>
    The server encountered an error when attempting to sort the
    search results or when attempting to send sorted results.
  </ul>
  <p></p>
 <li>
  <code>LDAP_INVALID_SYNTAX</code> may be sent by the Directory
  Server if your LDAP client specified a substring filter containing
  no value for comparison.
 <li>
  <code>LDAP_NO_SUCH_OBJECT</code> may be sent by the Directory
  Server if the entry specified by the <code>base</code> argument
  does not exist and if no referral URLs are available.
 <li>
  <code>LDAP_REFERRAL</code> may be sent by the Directory Server if
  the entry specified by the <code>base</code> argument is not
  handled by the current server and if referral URLs identify a
  different server to handle the entry. (For example, if the DN is
  <code>uid=bjensen, ou=European Sales, dc=example,dc=com</code>,
  all entries under <code>ou=European Sales</code> might be handled
  by a different directory server.)
 <li>
  <code>LDAP_TIMELIMIT_EXCEEDED</code> may be sent by the Directory
  Server if the search exceeded the maximum time specified by the
  <code>timeoutp</code> argument.
 <li>
  <code>LDAP_SIZELIMIT_EXCEEDED</code> may be sent by the Directory
  Server if the search found more results than the maximum number of
  results specified by the <code>sizelimit</code> argument.
 <li>
  <code>LDAP_ADMINLIMIT_EXCEEDED</code> may be sent by the Directory
  Server if the search found more results than the limit specified
  by the <code>lookthroughlimit</code> directive in the
  <code>slapd.conf</code> configuration file. (If not specified in
  the configuration file, the limit is 5000.)
</ul>

<p>Note that the Directory Server may send other result codes in
addition to the codes described here (for example, the server may
have loaded a custom plug-in that returns other result codes).</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_search_ext_s()</code> searches the directory for
matching entries synchronously.</p>

<p>You can use this function to pass LDAP server controls to the
server if you want the server to sort the results or if you want to
request a persistent search. (See
<code><a href="function.htm#create-sort-control">ldap_create_sort_control()</a></code>
and <code><a href="function.htm#create-persistentsearch-control">ldap_create_persistentsearch_control()</a></code>
for more information.)</p>

<p>This function is a new version of the
<code><a href="function.htm#search-s">ldap_search_s()</a></code>
function. If you are writing a new LDAP client, you should call this
function instead of
<code><a href="function.htm#search-s">ldap_search_s()</a></code>.</p>

<p>The function <code>ldap_search_ext_s()</code> is synchronous; it
directly returns the results of the operation. If you want to perform
other operations while waiting for the results of this operation,
call the asynchronous function
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>For more information on searching the directory, see
<a href="search.htm">Chapter 6 - Searching the Directory</a>.</p>

<p><strong>Example</strong></p>

<p>See the example under <a href="search.htm#c6-example-searching-the-directory-synchronous">"Example:
Searching the Directory (Synchronous)."</a></p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#search-ext">ldap_search_ext()</a>.</code></p>

<h2 id="search-s">ldap_search_s()</h2>

<p>Searches the directory synchronously.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP client,
use <code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>
instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_search_s( LDAP *ld, const char *base, int scope,
  const char* filter, char **attrs, int attrsonly,
  LDAPMessage **res );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-113 - ldap_search_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>base</code></td>
  <td>
   Distinguished name (DN) of the entry that serves as the starting
   point for the search. For example, setting <code>base</code> to
   <code>"dc=example,dc=com"</code> restricts the search to entries
   at <code>example.com</code>.
  </td>
 </tr>
 <tr>
  <td><code>scope</code></td>
  <td>
   Scope of the search, which can be one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_SCOPE_BASE</code> searches the entry specified by
     <code>base</code>.
    <li>
     <code>LDAP_SCOPE_ONELEVEL</code> searches all entries one level
     beneath the entry specified by <code>base</code>.
    <li>
     <code>LDAP_SCOPE_SUBTREE</code> searches all entries at all
     levels beneath the entry specified by <code>base</code>.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>filter</code></td>
  <td>
   String representation of the filter to apply in the search. You
   can specify simple filters with the following syntax:
   <p></p>
   <ul>
    <li>
     <code>(attributetype=attributevalue)</code>
   </ul>
   <p></p>
   For details on the syntax for filters, see
   <a href="search.htm#c6-specifying-a-search-filter">"Specifying a Search Filter."</a>
  </td>
 </tr>
 <tr>
  <td><code>attrs</code></td>
  <td>
   A <code>NULL</code>-terminated array of attribute types to return
   from entries that match filter. If you specify a
   <code>NULL</code>, all attributes will be returned.
  </td>
 </tr>
 <tr>
  <td><code>attrsonly</code></td>
  <td>
   Specifies whether or not attribute values are returned along with
   the attribute types. This parameter can have the following values:
   <p></p>
   <ul>
    <li>
     <code>0</code> specifies that both attribute types and
     attribute values are returned.
    <li><code>1</code> specifies that only attribute types are returned.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>res</code></td>
  <td>Results of the search (when the call is completed).</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>For a list of possible result codes for an LDAP search operation,
see the result code documentation for the
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>
function.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_search_s()</code> function searches the directory
for matching entries.</p>

<p>A newer version of this function,
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>,
is available in this release of the LDAP API.
<code>ldap_search_s()</code> (the older version of the function) is
included only for backward-compatibility. If you are writing a new
LDAP client, use
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>
instead of <code>ldap_search_s()</code>.</p>

<p>If you want more information on <code>ldap_search_s()</code>,
refer to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>Example</strong></p>

<p>The following section of code searches the directory for all
people whose surname (last name) is "<code>Jensen</code>".</p>

<p>
 <strong>Code Example 18-41 - ldap_search_s() code example</strong>
</p>

<pre class="code">#include "examples.h"

int main( int argc, char **argv )
{
  LDAP *ld;
  LDAPMessage *result, *e;
  BerElement *ber;
  char *a, *dn;
  char **vals;
  int i;
  /* get a handle to an LDAP connection */
  if ( (ld = ldap_init( MY_HOST, MY_PORT )) == NULL ) {
    perror( "ldap_init" );
    return( 1 );
  }
  /* authenticate to the directory as nobody */
  if ( ldap_simple_bind_s( ld, NULL, NULL ) != LDAP_SUCCESS ) {
    ldap_perror( ld, "ldap_simple_bind_s" );
    return( 1 );
  }
  /* search for all entries with surname of Jensen */
  if ( ldap_search_s( ld, MY_SEARCHBASE, LDAP_SCOPE_SUBTREE,
    MY_FILTER, NULL, 0, &amp;result ) != LDAP_SUCCESS ) {
    ldap_perror( ld, "ldap_search_s" );
    return( 1 );
  }
  /* for each entry print out name + all attrs and values */
  for ( e = ldap_first_entry( ld, result ); e != NULL;
   e = ldap_next_entry( ld, e ) ) {
    if ( (dn = ldap_get_dn( ld, e )) != NULL ) {
      printf( "dn: %s\n", dn );
      ldap_memfree( dn );
    }
    for ( a = ldap_first_attribute( ld, e, &amp;ber );
     a != NULL; a = ldap_next_attribute( ld, e, ber ) ) {
      if ((vals = ldap_get_values( ld, e, a)) != NULL ) {
        for ( i = 0; vals[i] != NULL; i++ ) {
          printf( "%s: %s\n", a, vals[i] );
        }
        ldap_value_free( vals );
      }
      ldap_memfree( a );
    }
    if ( ber != NULL ) {
      ldap_ber_free( ber, 0 );
    }
    printf( "\n" );
  }
  ldap_msgfree( result );
  ldap_unbind( ld );
  return( 0 );
}</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a>.</code></p>

<h2 id="search-st">ldap_search_st()</h2>

<p>Searches the directory synchronously within a specified time limit.</p>

<p>Note that this is an older function that is included in the LDAP
API for backward-compatibility. If you are writing a new LDAP
client, use
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code> instead.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_search_st( LDAP *ld, const char *base, int scope,
  const char* filter, char **attrs, int attrsonly,
  struct timeval *timeout, LDAPMessage **res );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-114 - ldap_search_st() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>base</code></td>
  <td>
   Distinguished name (DN) of the entry that serves as the starting
   point for the search. For example, setting <code>base</code> to
   <code>"dc=example,dc=com"</code> restricts the search to entries
   at <code>example.com</code>.
  </td>
 </tr>
 <tr>
  <td><code>scope</code></td>
  <td>
   Scope of the search, which can be one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_SCOPE_BASE</code> searches the entry specified by
     <code>base</code>.
    <li>
     <code>LDAP_SCOPE_ONELEVEL</code> searches all entries one level
     beneath the entry specified by <code>base</code>.
    <li>
     <code>LDAP_SCOPE_SUBTREE</code> searches all entries at all
     levels beneath the entry specified by <code>base</code>.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>filter</code></td>
  <td>
   String representation of the filter to apply in the search. You
   can specify simple filters with the following syntax:
   <p></p>
   <ul>
    <li>
     <code>(attributetype=attributevalue)</code>
   </ul>
   <p></p>
   For details on the syntax for filters, see
   <a href="search.htm#c6-specifying-a-search-filter">"Specifying a Search Filter."</a>
  </td>
 </tr>
 <tr>
  <td><code>attrs</code></td>
  <td>
   A <code>NULL</code>-terminated array of attribute types to return
   from entries that match filter. If you specify a
   <code>NULL</code>, all attributes will be returned.
  </td>
 </tr>
 <tr>
  <td><code>attrsonly</code></td>
  <td>
   Specifies whether or not attribute values are returned along with
   the attribute types. This parameter can have the following values:
   <p></p>
   <ul>
    <li>
     <code>0</code> specifies that both attribute types and
     attribute values are returned.
    <li><code>1</code> specifies that only attribute types are returned.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>timeout</code></td>
  <td>Maximum time to wait for the results of the search.</td>
 </tr>
 <tr>
  <td><code>res</code></td>
  <td>Results of the search (when the call is completed).</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>For a list of possible result codes for an LDAP search operation,
see the result code documentation for the
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>
function.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_search_st()</code> function searches the directory
for matching entries. The <code>ldap_search_st()</code> function
works like the
<code><a href="function.htm#search-s">ldap_search_s()</a></code>
function and lets you set a timeout period for the search.</p>

<p>A newer version of this function,
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>,
is available in this release of the LDAP API.
<code>ldap_search_st()</code> (the older version of the function) is
included only for backward-compatibility. If you are writing a new
LDAP client, use
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>
instead of <code>ldap_search_st()</code>.</p>

<p>If you want more information on <code>ldap_search_st()</code>,
refer to the <em>LDAP C SDK 1.0 Programmer's Guide</em>.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a>.</code></p>

<h2 id="set-filter-additions">ldap_set_filter_additions()</h2>

<p>The <code>ldap_set_filter_additions()</code> function sets a
prefix to be prepended and a suffix to be appended to all filters
returned by the
<code><a href="function.htm#getfirstfilter">ldap_getfirstfilter()</a></code>
and <code><a href="function.htm#getnextfilter">ldap_getnextfilter()</a></code>
function calls.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_set_filter_additions( LDAPFiltDesc *lfdp, char *prefix,
  char *suffix );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-115 - ldap_set_filter_additions() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>lfdp</code></td>
  <td>
   Pointer to an
   <code><a href="datatype.htm#LDAPFiltDesc">LDAPFiltDesc</a></code> structure.
  </td>
 </tr>
 <tr>
  <td><code>prefix</code></td>
  <td>
   Prefix to prepend to all filters. If <code>NULL</code>, no prefix
   is prepended.
  </td>
 </tr>
 <tr>
  <td><code>suffix</code></td>
  <td>
   Suffix to append to all filters. If <code>NULL</code>, no suffix
   is appended.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  If unsuccessful, returns an LDAP error code. (See
  <a href="error.htm">Chapter 19 - Result Codes</a> for a complete
  listing.)
</ul>

<p><strong>Example</strong></p>

<p>The following section of code loads the filter configuration file
named <code>myfilters.conf</code> into memory and adds the prefix
"<code>(&amp;(objectClass=person)</code>" and the suffix ")" to each
filter retrieved:</p>

<p>
 <strong>Code Example 18-42 - ldap_set_filter_additions() code example</strong>
</p>

<pre class="code">...
LDAPFiltDesc *lfdp;
char *filter_file = "myfilters.conf";
char *prefix = "(&amp;(objectClass=person)";
char *suffix = ")";
int rc;
...
lfdp = ldap_init_getfilter( filter_file );
rc = ldap_set_filter_additions( ldfp, prefix, suffix );
if ( rc != LDAP_SUCCESS ) {
  printf( "Error setting filter prefix and suffix\n");
  return( rc );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#getfirstfilter">ldap_getfirstfilter()</a>,
<a href="function.htm#getnextfilter">ldap_getnextfilter()</a>.</code></p>

<h2 id="setfilteraffixes">ldap_setfilteraffixes()</h2>

<p>The <code>ldap_setfilteraffixes()</code> function is a deprecated
function. Use the
<code><a href="function.htm#set-filter-additions">ldap_set_filter_additions()</a></code>
function instead.</p>

<h2 id="set-lderrno">ldap_set_lderrno()</h2>

<p>The <code>ldap_set_lderrno()</code> function sets an error code
and information about an error in an
<a href="datatype.htm#LDAP">LDAP</a> structure. You can call this
function to set error information that will be retrieved by
subsequent <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>
function calls.</p>

<p>For more information, see
<a href="using.htm#set_error_code">"Setting Error Codes."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_set_lderrno( LDAP *ld, int e, char *m, char *s );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-116 - ldap_set_lderrno() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>e</code></td>
  <td>The error code that you want to set.</td>
 </tr>
 <tr>
  <td><code>m</code></td>
  <td>
   In the event that an entry for a specified DN cannot be found,
   you should set this parameter to the portion of the DN that
   identifies an existing entry. (See
   <a href="using.htm#receive_portion_dn_matching_entry">"Receiving the Portion of the DN
   Matching an Entry"</a> for details.)
  </td>
 </tr>
 <tr>
  <td><code>s</code></td>
  <td>
   The text of the error message that you want associated with this
   error code.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  If unsuccessful, returns an LDAP error code. (See
  <a href="error.htm">Chapter 19 - Result Codes</a> for a complete
  listing.)
</ul>

<p><strong>Example</strong></p>

<p>The following section of code attempts to perform an operation.
If the operation fails, the <code>LDAP_PARAM_ERROR</code> error code
is placed in the <code>LDAP</code> structure.</p>

<p>
 <strong>Code Example 18-43 - ldap_set_lderrno() code example</strong>
</p>

<pre class="code">int rc;
char *errmsg = "Invalid parameter";
...
if ( ldap_my_function() != LDAP_SUCCESS ) {
  rc = ldap_set_lderrno( ld, LDAP_PARAM_ERROR, NULL, errmsg );
  if ( rc != LDAP_SUCCESS ) {
    printf( "Error: %d\nError code could not be set.\n", rc );
  }
  return( rc );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#err2string">ldap_err2string()</a>,
<a href="function.htm#perror">ldap_perror()</a>,
<a href="function.htm#result2error">ldap_result2error()</a>.</code></p>

<h2 id="set-option">ldap_set_option()</h2>

<p>The function <code>ldap_set_option()</code> sets session
preferences in the <code><a href="datatype.htm#LDAP">LDAP</a></code>
structure. For more information on the options you can set, see
<a href="writing.htm#set_pref">"Setting Preferences."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_set_option( LDAP *ld, int option, const void *optdata );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p id="table-18-117-set-option-parameter">
 <strong>Table 18-117 - ldap_set_option() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
   <p></p>
   If <code>NULL</code>, you are setting the default options that
   will apply to any new LDAP connection handles that are
   subsequently created.
  </td>
 </tr>
 <tr>
  <td><code>option</code></td>
  <td>Option that you want to set.</td>
 </tr>
 <tr>
  <td><code>optdata</code></td>
  <td>Pointer to the value of the option that you want to set.</td>
 </tr>
</table>

<p>The option parameter can have one of the following values:</p>

<p>
 <strong>Table 18-118 - Options for ldap_set_option() function</strong>
</p>

<table class="data">
 <tr>
  <td><code>LDAP_OPT_CLIENT_CONTROLS</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing the LDAPv3 client controls you want sent
   with every request by default.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(LDAPControl ***)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_DEREF</code></td>
  <td>
   Determines how aliases are handled during a search.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   <code>optdata</code> can be one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_DEREF_NEVER</code> specifies that aliases are never
     dereferenced.
    <li>
     <code>LDAP_DEREF_SEARCHING</code> specifies that aliases are
     dereferenced when searching under the base object (but not when
     finding the base object).
    <li>
     <code>LDAP_DEREF_FINDING</code> specifies that aliases are
     dereferenced when finding the base object (but not when
     searching under the base object).
    <li>
     <code>LDAP_DEREF_ALWAYS</code> specifies that aliases are
     always dereferenced when finding the base object and searching
     under the base object.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_DNS_FN_PTRS</code></td>
  <td>
   Lets you use alternate DNS functions for getting the host entry
   of an LDAP server.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(struct <a href="datatype.htm#ldap_dns_fns">ldap_dns_fns</a> *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_EXTRA_THREAD_FN_PTRS</code></td>
  <td>
   Lets you specify the locking and semaphore functions called when
   getting results from the server. (See
   <a href="threaded.htm">Chapter 16 - Writing Multithreaded
   Clients</a> for details.)
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(struct <a href="datatype.htm#ldap_extra_thread_fns">ldap_extra_thread_fns</a> *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_IO_FN_PTRS</code></td>
  <td>
   Lets you use alternate communication stacks.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(struct <a href="datatype.htm#ldap_io_fns">ldap_io_fns</a> *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_MEMALLOC_FNS_PTRS</code></td>
  <td>
   Lets you replace the standard function used for memory management
   (for example <code>malloc()</code>, <code>calloc()</code>,
   <code>realloc()</code>, and <code>free()</code>) with your own
   function. See the prototype for the <code>ldap_memalloc_fns</code>
   callback structure for the details on the structure that you can set.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_PROTOCOL_VERSION</code></td>
  <td>
   Version of the protocol supported by your client.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   You can specify either <code>LDAP_VERSION2</code> or
   <code>LDAP_VERSION3</code>. If no version is set, the default is
   <code>LDAP_VERSION2</code>.
   <p></p>
   In order to use LDAPv3 features, you need to set the protocol
   version to <code>LDAP_VERSION3</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_REBIND_ARG</code></td>
  <td>
   Lets you set the last argument passed to the routine specified
   by <code>LDAP_OPT_REBIND_FN</code>.
   <p></p>
   You can also set this option by calling the
   <code><a href="function.htm#set-rebind-proc">ldap_set_rebind_proc()</a></code>
   function.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(void *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_REBIND_FN</code></td>
  <td>
   Lets you set the routine to be called when you need to
   authenticate a connection with another LDAP server (for example,
   during the course of a referral).
   <p></p>
   You can also set this option by calling the
   <code><a href="function.htm#set-rebind-proc">ldap_set_rebind_proc()</a></code>
   function.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(LDAP_REBINDPROC_CALLBACK *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_RECONNECT</code></td>
  <td>
   If the connection to the server is lost, determines whether or
   not the same connection handle should be used to reconnect to
   the server.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   <code>optdata</code> can be one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_OPT_ON</code> specifies that the same connection
     handle can be used to reconnect to the server.
    <li>
     <code>LDAP_OPT_OFF</code> specifies that you want to create a
     new connection handle to connect to the server.
   </ul>
   <p></p>
   By default, this option is off.
   <p></p>
   For details, see <a href="using.htm#handle_failover">"Handling Failover."</a>
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_REFERRALS</code></td>
  <td>
   Determines whether or not the client should follow referrals.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   <code>optdata</code> can be one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAP_OPT_ON</code> specifies that the client should
     follow referrals.
    <li>
     <code>LDAP_OPT_OFF</code> specifies that the client should not
     follow referrals.
   </ul>
   <p></p>
   By default, the client follows referrals.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_REFERRAL_HOP_LIMIT</code></td>
  <td>
   Maximum number of referrals the client should follow in a sequence
   (in other words, the client can only be referred this number of
   times before it gives up).
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   By default, the maximum number of referrals that the client can
   follow in a sequence is 5 for the initial connection.
   <p></p>
   Note that this limit does not apply to individual requests that
   generate multiple referrals in parallel.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_RESTART</code></td>
  <td>
   If there is a fatal error on connection, this option resets the
   connection to an initial unconnected known state.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_SERVER_CONTROLS</code></td>
  <td>
   Pointer to an array of
   <code><a href="datatype.htm#LDAPControl">LDAPControl</a></code>
   structures representing the LDAPv3 server controls you want sent
   with every request by default.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(LDAPControl ***)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_SIZELIMIT</code></td>
  <td>
   Maximum number of entries that should be returned by the server
   in search results.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_SSL</code></td>
  <td>
   Determines whether or not SSL is enabled.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
   <p></p>
   <code>optdata</code> can be one of the following values:
   <ul>
    <li><code>LDAP_OPT_ON</code> specifies that SSL is enabled.
    <li><code>LDAP_OPT_OFF</code> specifies that SSL is disabled.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_THREAD_FN_PTRS</code></td>
  <td>
   Lets you specify the thread function pointers. See
   <a href="threaded.htm">Chapter 16 - Writing Multithreaded
   Clients</a> for details.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(struct <a href="datatype.htm#ldap_thread_fns">ldap_thread_fns</a> *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_OPT_TIMELIMIT</code></td>
  <td>
   Maximum number of seconds that should be spent by the server when
   answering a search request.
   <p></p>
   The data type for the <code>optdata</code> parameter is
   <code>(int *)</code>.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_X_OPT_EXTIO_FN_PTRS</code></td>
  <td>
   Lets you specify the extended I/O callback functions which were
   introduced with version 4.0 of the LDAP C SDK.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>-1</code> if unsuccessful.
</ul>

<p><strong>Example</strong></p>

<p>The following section of code sets the maximum number of entries
returned in a search.</p>

<p>
 <strong>Code Example 18-44 - ldap_set_option() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
int max_ret = 100, max_tim = 30;
char *host = "ldap.example.com";
...
/* Initialize a session with the LDAP server ldap.example.com:389 */
if ( ( ld = ldap_init( host, LDAP_PORT ) ) == NULL ) {
  perror( "ldap_init" );
  return( 1 );
}

/* Set the maximum number of entries returned */
if (ldap_set_option( ld, LDAP_OPT_SIZELIMIT, &amp;max_ret) != LDAP_SUCCESS) {
  ldap_perror( ld, "ldap_set_option" );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#init">ldap_init()</a>,
<a href="function.htm#get-option">ldap_get_option()</a>.</code></p>

<h2 id="set-rebind-proc">ldap_set_rebind_proc()</h2>

<p>Sets the rebind function, which is the function called by your
client to obtain authentication credentials when following a referral.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_set_rebind_proc( LDAP *ld,
  LDAP_REBINDPROC_CALLBACK *rebindproc, void *arg );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-119 - ldap_set_rebind_proc() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>rebindproc</code></td>
  <td>Name of the rebind function.</td>
 </tr>
 <tr>
  <td><code>arg</code></td>
  <td>
   Pointer to an additional argument that you want to pass to the
   rebind function.
  </td>
 </tr>
</table>

<p><strong>Description</strong></p>

<p>Call <code>ldap_set_rebind_proc()</code> to specify the rebind
function (the function called by the LDAP client when following a
referral to a new LDAP server). This rebind function is responsible
for obtaining the credentials used to authenticate to the new LDAP
server.</p>

<p>For example, suppose LDAP server A sends a referral to your
client. The referral points your client to LDAP server B. When
automatically following the referral, your client calls the rebind
function to obtain a DN and credentials; your client uses these to
authenticate to server B.</p>

<p>By default, if you do not call <code>ldap_set_rebind_proc()</code>
or if you pass NULL for the <code>rebindproc</code> argument, your
client authenticates anonymously when following referrals.</p>

<p>The rebind function that you specify with
<code>ldap_set_rebind_proc()</code> should have the following
prototype:</p>

<pre>int LDAP_CALL LDAP_CALLBACK rebindproc( LDAP *ld, char **dnp,
  char **passwdp, int *authmethodp, int freeit, void *arg );</pre

<p>(<code>LDAP_CALL</code> and <code>LDAP_CALLBACK</code> are used
to set up calling conventions, such as Pascal calling conventions
on Windows. These are defined in the <code>lber.h</code> header
file.)</p>

<p>LDAP clients that are built with the Mozilla LDAP C SDK use this
procedure when following referrals (the procedure explains what the
rebind function is expected to do):</p>

<ol>
 <li>The LDAP server sends a referral back to the client.
 <li>
  The client calls the rebind function, passing <code>0</code> as
  the <code>freeit</code> argument.
 <li>
  The rebind function sets the <code>dnp</code>, <code>passwdp</code>,
  and <code>authmethodp</code> arguments to point to the following
  information:
  <p></p>
  <ul>
   <li>
    The <code>dnp</code> argument is set to point to the DN to be
    used to authenticate to the new LDAP server.
   <li>
    The <code>passwdp</code> argument is set to point to the
    credentials for this DN.
   <li>
    The <code>authmethodp</code> argument is set to point to the
    method of authentication used (for example,
    <code>LDAP_AUTH_SIMPLE</code>).
  </ul>
  <p></p>
 <li>
  If successful, the rebind function returns <code>LDAP_SUCCESS</code>,
  and referral processing continues. (If any other value is returned,
  referral processing stops, and that value is returned as the result
  code for the original LDAP request.)
 <li>
  The client gets the DN, credentials, and authentication method
  from the arguments of the rebind function and uses this information
  to authenticate to the new LDAP server.
 <li>
  The client calls the rebind function again, passing <code>1</code>
  as the <code>freeit</code> argument.
 <li>
  The rebind function frees any memory allocated earlier to specify
  the DN and credentials.
</ol>

<p>You need to write a rebind function that does the following:</p>

<ul>
 <li>If <code>freeit</code> is <code>0</code>, set the following pointers:
  <p></p>
  <ul>
   <li>Set <code>dnp</code> to point to the DN to be used for authentication.
   <li>
    Set <code>passwdp</code> to point to the credentials to be used
    for authentication.
   <li>
    Set <code>authmethodp</code> to point to the method of
    authentication used (for example, <code>LDAP_AUTH_SIMPLE</code>).
  </ul>
  <p></p>
  You can make use of the <code>arg</code> argument, which is a
  pointer to the argument specified in the
  <code>ldap_set_rebind_proc()</code> function.
  <p></p>
  If successful, return <code>LDAP_SUCCESS</code>. Otherwise, return
  the appropriate LDAP error code.
 <li>
  If <code>freeit</code> is <code>1</code>, free any memory that you
  allocated to create the DN and credentials.
</ul>

<p>After you have defined this function, pass the function name to
<code>ldap_set_rebind_proc()</code> to register your rebind function.</p>

<p>Note that in order to use the rebind function, the
<code>LDAP_OPT_REFERRALS</code> option must be set to
<code>LDAP_OPT_ON</code>, so that your client automatically follows
referrals. This option is already set to <code>LDAP_OPT_ON</code> by
default.</p>

<p><strong>Example</strong></p>

<p>The following example demonstrates how to write and register a
rebind function.</p>

<p>
 <strong>Code Example 18-45 - ldap_set_rebind_proc() code example</strong>
</p>

<pre class="code">...
/* Declare your rebind function */
int rebindproc( LDAP *ld, char **dnp, char **passwdp, int *authmethodp, int freeit, void *arg );
...
int main( int argc, char **argv )
{
  LDAP *ld;
  /* Additional argument to be passed to the rebind function */
  char *testarg = "cn=Directory Manager";
  /* Get a handle to an LDAP connection */
  if ( (ld = ldap_init( "directory.myhost.com", 389 )) == NULL ) {
    perror( "ldap_init" );
    return( 1 );
  }
  /* Specify the function used for reauthentication on referrals */
  ldap_set_rebind_proc( ld, rebindproc, (void *)testarg );
  /* Authenticate */
  if ( ldap_simple_bind_s( ld, "uid=bjensen,ou=People,dc=example,dc=com",
      "hifalutin" ) != LDAP_SUCCESS ) {
    ldap_perror( ld, "ldap_simple_bind_s" );
    return( 1 );
  }
  ...
  /* Your code to interact with the LDAP server */
  ...
}
...
/* rebindproc is the rebind function responsible for providing the DN,
  credentials, and authentication method used for authenticating the
  client to other Directory Servers.
  The function should set the following arguments:
  - dnp should point to the DN that will be used for authentication.
  - passwdp should point to the credentials used for authentication.
  - authmethodp should point to the method of authentication to be used
  (for example, LDAP_AUTH_SIMPLE).
  The function should return LDAP_SUCCESS if successful or an LDAP
  error code if an error occurs.
  In order to demonstrate how the freeit argument works, this example
  uses strdup() to copy the DN and password. You can also just copy
  string pointers if the DN and password are already available as
  global variables.
*/
int LDAP_CALL LDAP_CALLBACK rebindproc( LDAP *ld, char **dnp, char **passwdp, int *authmethodp, int freeit, void *arg )
{
  printf( "Rebind function called.\n" );
  switch ( freeit ) {
  /* Your client calls the rebind function with freeit==1 when it needs
    to free any memory you've allocated. */
  case 1:
    printf( "\tFreeing memory.\n" );
    if ( dnp &amp;&amp; *dnp ) {
      free( *dnp );
    }
    if ( passwdp &amp;&amp; *passwdp ) {
      free( *passwdp );
    }
    break;
  /* Your client calls the rebind function with freeit==0 when it needs
  to get the DN, credentials, and authentication method. */
  case 0:
    printf( "\tGetting DN and credentials.\n" );
    *dnp = strdup( "uid=username,o=OtherServerSuffix" );
    *passwdp = strdup( "23skidoo" );
    *authmethodp = LDAP_AUTH_SIMPLE;
    break;
  default:
    printf( "\tUnknown value of freeit argument: %d\n", freeit );
    break;
  }
  /* If you successfully set the DN and credentials, you should return
    LDAP_SUCCESS. (Any other return code will stop the client from
    automatically following the referral. */
  return LDAP_SUCCESS;
}</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#simple-bind">ldap_simple_bind()</a>,
<a href="function.htm#simple-bind-s">ldap_simple_bind_s()</a>.</code></p>

<h2 id="simple-bind">ldap_simple_bind()</h2>

<p>Asynchronously authenticates your client to the LDAP server using
a DN and a password.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_simple_bind(LDAP *ld, const char *who,
  const char *passwd);</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-120 - ldap_simple_bind() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>who</code></td>
  <td>
   Distinguished name (DN) of the user who wants to authenticate.
   For anonymous authentication, set this or the <code>passwd</code>
   argument to <code>NULL</code>.
  </td>
 </tr>
 <tr>
  <td><code>passwd</code></td>
  <td>
   Password of the user who wants to authenticate. For anonymous
   authentication, set this or the <code>who</code> argument to
   <code>NULL</code>.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>Returns the message ID of the <code>ldap_simple_bind()</code>
operation. To check the result of this operation, call
<code><a href="function.htm#result">ldap_result()</a></code> and
<code><a href="function.htm#result2error">ldap_result2error()</a></code>.</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_simple_bind()</code> function authenticates to the
LDAP server. The function verifies that the password supplied for
authentication matches the <code>userPassword</code> attribute of
the given entry.</p>

<p><code>ldap_simple_bind()</code> is an asynchronous function; it
does not directly return results. If you want the results to be
returned directly by the function, call the synchronous function
<code><a href="function.htm#simple-bind-s">ldap_simple_bind_s()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>Note that if you specify a DN but no password, your client will
bind to the server anonymously. If you want a <code>NULL</code>
password to be rejected as an incorrect password, you need to write
code to perform the check before you call the
<code>ldap_simple_bind()</code> function.</p>

<p>For additional information on authenticating to the LDAP server,
see <a href="writing.htm#bind_auth_server">"Binding and Authenticating to an
LDAP Server."</a></p>

<p><strong>Example</strong></p>

<p>The following section of code calls <code>ldap_simple_bind()</code>
to authenticate the user "Barbara Jensen" to the directory.</p>

<p>
 <strong>Code Example 18-46 - ldap_simple_bind() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
char *host = "ldap.example.com";
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";
char *pw = "hifalutin";
struct timeval zerotime;
zerotime.tv_sec = zerotime.tv_usec = 0L;
...
/* Initialize a session with the LDAP server ldap.example.com:389 */
if ( ( ld = ldap_init( host, LDAP_PORT ) ) == NULL ) {
  perror( "ldap_init" );
  return( 1 );
}
/* Attempt to bind with the LDAP server */
msgid = ldap_simple_bind( ld, dn, pw );

/* Initialize the value returned by ldap_result() */
rc = 0;

/* While the operation is still running, do this: */
while ( rc == 0 ) {
  ... /* do other work while waiting */...

  /* Check the status of the LDAP operation */
  rc = ldap_result( ld, msgid, NULL, &amp;zerotime, &amp;result );
  switch( rc ) {
    /* If -1 was returned, an error occurred */
    case -1:
      ldap_perror( ld, "Error in results: " );
      return( 1 );
    /* If 0 was returned, the operation is still in progress */
    case 0:
      continue;
    /* If any other value is returned, assume we are done */
    default:
      /* Check if the "bind" operation was successful */
      if ( ldap_result2error( result ) != LDAP_SUCCESS ) {
        ldap_perror( ld, "Error binding to server: " );
        return( 1 );
        }
  }
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#simple-bind-s">ldap_simple_bind_s()</a>.</code></p>

<h2 id="simple-bind-s">ldap_simple_bind_s()</h2>

<p>Synchronously authenticates your client to the LDAP server using
a DN and a password.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_simple_bind_s( LDAP *ld, const char *who,
  const char *passwd );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-121 - ldap_simple_bind_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>who</code></td>
  <td>
   Distinguished name (DN) of the user who wants to authenticate.
   For anonymous authentication, set this or the <code>passwd</code>
   argument to <code>NULL</code>.
  </td>
 </tr>
 <tr>
  <td><code>passwd</code></td>
  <td>
   Password of the user who wants to authenticate. For anonymous
   authentication, set this or the <code>who</code> argument to
   <code>NULL</code>.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li><code>LDAP_PARAM_ERROR</code> if any of the arguments are invalid.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_LOCAL_ERROR</code> if an error occurred when receiving
  the results from the server.
 <li>
  <code>LDAP_DECODING_ERROR</code> if an error occurred when decoding
  the BER-encoded results from the server.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your
  request (for example, as a session preference) and your LDAP client
  does not specify that it is using the LDAPv3 protocol. Make sure
  that you set the version of your LDAP client to version 3 before
  calling this function. For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>
</ul>

<p>The following result codes can be returned by the Netscape
Directory Server when processing an LDAP search request. Other LDAP
servers may send these result codes under different circumstances or
may send different result codes back to your LDAP client.</p>

<ul>
 <li>
  <code>LDAP_OPERATIONS_ERROR</code> may be sent by the Directory
  Server for general errors encountered by the server when
  processing the request.
 <li>
  <code>LDAP_PROTOCOL_ERROR</code> if the search request did not
  comply with the LDAP protocol. The Directory Server may set this
  error code in the results for a variety of reasons. Some of these
  reasons include:
  <ul>
   <li>
    The server encountered an error when decoding your client's
    BER-encoded request.
   <li>
    The search request received by the server specifies an unknown
    search scope or filter type.
   <li>
    Your LDAP client attempts to use an extensible search filter and
    has not specified that it is using the LDAPv3 protocol. Make
    sure that you set the version of your LDAP client to version 3
    before sending the request. For details, see
    <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of
    Your Client."</a>
   <li>
    The server encountered an error when attempting to sort the
    search results or when attempting to send sorted results.
  </ul>
 <li>
  <code>LDAP_INVALID_SYNTAX</code> may be sent by the Directory
  Server if your LDAP client specified a substring filter containing
  no value for comparison.
 <li>
  <code>LDAP_NO_SUCH_OBJECT</code> may be sent by the Directory
  Server if the entry specified by the <code>base</code> argument
  does not exist and if no referral URLs are available.
 <li>
  <code>LDAP_REFERRAL</code> may be sent by the Directory Server if
  the entry specified by the <code>base</code> argument is not
  handled by the current server and if referral URLs identify a
  different server to handle the entry. (For example, if the DN is
  <code>uid=bjensen, ou=European Sales, dc=example,dc=com</code>,
  all entries under <code>ou=European Sales</code> might be handled
  by a different directory server.)
 <li>
  <code>LDAP_TIMELIMIT_EXCEEDED</code> may be sent by the Directory
  Server if the search exceeded the maximum time specified by the
  <code>timeoutp</code> argument.
 <li>
  <code>LDAP_SIZELIMIT_EXCEEDED</code> may be sent by the Directory
  Server if the search found more results than the maximum number of
  results specified by the <code>sizelimit</code> argument.
 <li>
  <code>LDAP_ADMINLIMIT_EXCEEDED</code> may be sent by the Directory
  Server if the search found more results than the limit specified
  by the <code>lookthroughlimit</code> directive in the
  <code>slapd.conf</code> configuration file. (If not specified in
  the configuration file, the limit is 5000.)
</ul>

<p>Note that the Netscape Directory Server may send other result
codes in addition to the codes described here (for example, the
server may have loaded a custom plug-in that returns other result
codes).</p>

<p><strong>Description</strong></p>

<p>The <code>ldap_simple_bind_s()</code> function authenticates to
the LDAP server. The function verifies that the password supplied
for authentication matches the <code>userPassword</code> attribute
of the given entry.</p>

<p><code>ldap_simple_bind_s()</code> is a synchronous function,
which directly returns the results of the operation. If you want to
perform other operations while waiting for the results of this
operation, call the asynchronous function
<code><a href="function.htm#simple-bind">ldap_simple_bind()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>Note that if you specify a DN but no password, your client will
bind to the server anonymously. If you want a <code>NULL</code>
password to be rejected as an incorrect password, you need to write
code to perform the check before you call the
<code>ldap_simple_bind_s()</code> function.</p>

<p>For additional information on authenticating to the LDAP server,
see <a href="writing.htm#bind_auth_server">"Binding and Authenticating to an
LDAP Server."</a></p>

<p><strong>Example</strong></p>

<p>The following section of code uses the synchronous
<code>ldap_simple_bind_s()</code> function to authenticate to the
directory as the user "<code>Barbara Jensen</code>".</p>

<p>
 <strong>Code Example 18-47 - ldap_simple_bind_s() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
char *host = "ldap.example.com";
char *dn = "uid=bjensen, ou=People, dc=example,dc=com";
char *pw = "hifalutin";
...
/* Initialize a session with the LDAP server ldap.example.com:389 */
if ( ( ld = ldap_init( host, LDAP_PORT ) ) == NULL ) {
  perror( "ldap_init" );
  return( 1 );
}
/* Attempt to bind with the LDAP server */
if ( ldap_simple_bind_s( ld, dn, pw ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "Authentication failed: " );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#simple-bind">ldap_simple_bind()</a>.</code></p>

<h2 id="sort-entries">ldap_sort_entries()</h2>

<p>The <code>ldap_sort_entries()</code> function sorts a chain of
entries retrieved from an LDAP search call
(<code><a href="function.htm#search-s">ldap_search_s()</a></code> or
<code><a href="function.htm#result">ldap_result()</a></code>) either
by distinguished name (DN) or by a specified attribute in the entries.</p>

<p>For additional information, see <a href="search.htm#c6-sorting-the-search-results">"Sorting
the Search Results."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_sort_entries( LDAP *ld, LDAPMessage *chain, char *attr,
  LDAP_CMP_CALLBACK *cmp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-122 - ldap_sort_entires() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>chain</code></td>
  <td>
   Chain of entries returned by the
   <code><a href="function.htm#result">ldap_result()</a></code> or
   <code><a href="function.htm#search-s">ldap_search_s()</a></code>
   function.
  </td>
 </tr>
 <tr>
  <td><code>attr</code></td>
  <td>
   Attribute to use when sorting the results. To sort by
   distinguished name instead of by attribute, use <code>NULL</code>.
  </td>
 </tr>
 <tr>
  <td><code>cmp</code></td>
  <td>
   Comparison function used when sorting the values. For details, see 
   <a href="search.htm#c6-sorting-entries-by-an-attribute">"Sorting 
   Entries by an Attribute."</a>
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  If unsuccessful, returns a <code>NULL</code> and sets the
  appropriate error code in the <a href="datatype.htm#LDAP">LDAP</a>
  structure. To get the error code, call
  <code><a href="function.htm#get-lderrno">ldap_get_lderrno()</a></code>.
  (See <a href="error.htm">Chapter 19 - Result Codes</a> for a
  complete listing of error codes.)
</ul>

<p><strong>Example</strong></p>

<p>The following section of code sorts entries by the
<code>roomNumber</code> attribute.</p>

<p>
 <strong>Code Example 18-48 - ldap_sort_entries() code example</strong>
</p>

<pre class="code">#include &lt;string.h&gt;
#include &lt;ldap.h&gt;
LDAP *ld;
LDAPMessage *result;
char *my_searchbase = "dc=example,dc=com";
char *my_filter = "(sn=Jensen)";
char *sortby = "roomNumber";
...
/* Search the directory */
if ( ldap_search_s( ld, my_searchbase, LDAP_SCOPE_SUBTREE, my_filter, NULL, 0, &amp;result ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_search_s" );
  return( 1 );
}
/* Sort the results by room number, using strcasecmp */
if ( ldap_sort_entries( ld, &amp;result, sortby, strcasecmp ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_sort_entries" );
  return( 1 );
}
... </pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#multisort-entries">ldap_multisort_entries()</a>,
<a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#search-s">ldap_search_s()</a>.</code></p>

<h2 id="sort-values">ldap_sort_values()</h2>

<p>The <code>ldap_sort_values()</code> function sorts an array of
values retrieved from an
<code><a href="function.htm#get-values">ldap_get_values()</a></code> call.</p>

<p>For additional information, see <a href="search.htm#c6-sorting-the-search-results">"Sorting
the Search Results."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_sort_values( LDAP *ld, char **vals,
  LDAP_VALCMP_CALLBACK cmp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-123 - ldap_sort_values() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>vals</code></td>
  <td>The array of values to sort.</td>
 </tr>
 <tr>
  <td><code>cmp</code></td>
  <td>
   Comparison function used when sorting the values.
   <p></p>
   In the <code>ldap_sort_values()</code> function, the comparison
   function must pass <code>(char **)</code> parameters. Because of
   this, you need to use the
   <code><a href="function.htm#sort-strcasecmp">ldap_sort_strcasecmp()</a></code>
   function, rather than a function like <code>strcasecmp()</code>.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  If unsuccessful, returns an LDAP error code. (See
  <a href="error.htm">Chapter 19 "Result Codes</a>" for a complete
  listing of error codes.)
</ul>

<p><strong>Example</strong></p>

<p>The following section of code sorts the values of attributes
before printing them.</p>

<p>
 <strong>Code Example 18-49 - ldap_sort_values() code example</strong>
</p>

<pre class="code">#include &lt;string.h&gt;
#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result, *e;
BerElement *ber;
char *a, *dn;
char **vals;
int i;
char *my_searchbase = "dc=example,dc=com";
char *my_filter = "(sn=Jensen)";
...
    if ( ( vals = ldap_get_values( ld, e, a ) ) != NULL ) {
      /* Sort the values of the attribute */
      if ( ldap_sort_values( ld, vals, strcasecmp ) ) != LDAP_SUCCESS ) {
        ldap_perror( ld, "ldap_sort_values" );
        return( 1 );
      }
      /* Print the values of the attribute */
      for ( i = 0; vals[i] != NULL; i++ ) {
        printf( "%s: %s\n", a, vals[i] );
      }
      /* Free the values from memory */
      ldap_value_free( vals );
    }
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#get-values">ldap_get_values()</a>,
<a href="function.htm#sort-strcasecmp">ldap_sort_strcasecmp()</a>.</code></p>

<h2 id="sort-strcasecmp">ldap_sort_strcasecmp()</h2>

<p>The <code>ldap_sort_strcasecmp()</code> routine compares two
strings and ignores any differences in case when comparing uppercase
and lowercase characters. This function is similar to the C function
<code>strcasecmp()</code>.</p>

<p>When sorting attribute values with <code>ldap_sort_values()</code>,
call this function to compare the attribute values.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_sort_strcasecmp( const char **a, const char **b );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-124 - ldap_sort_strcasecmp() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>a</code></td>
  <td>Pointer to first string to compare</td>
 </tr>
 <tr>
  <td><code>b</code></td>
  <td>Pointer to second string to compare</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If <code>a</code> is greater than <code>b</code>, returns a value
  greater than 0.
 <li>If <code>a</code> is equal to <code>b</code>, returns <code>0</code>.
 <li>
  If <code>a</code> is less than <code>b</code>, returns a value
  less than 0.
</ul>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#sort-values">ldap_sort_values()</a>.</code></p>

<h2 id="unbind">ldap_unbind()</h2>

<p>The <code>ldap_unbind()</code> function unbinds from the
directory, terminates the current association, and frees the
resources contained in the
<code><a href="datatype.htm#LDAP">LDAP</a></code> structure.</p>

<p>The <code>ldap_unbind()</code> routine works the same as
<code><a href="function.htm#unbind-s">ldap_unbind_s()</a></code>; both
routines are synchronous. This function is provided so that the
function <code>ldap_simple_bind()</code> has a corresponding unbind
function. For additional information, see
<a href="writing.htm#close_connection_server">"Closing the Connection to the Server."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_unbind( LDAP *ld );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-125 - ldap_unbind() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>For a list of possible result codes for an LDAP unbind operation,
see the result code documentation for the
<code><a href="function.htm#unbind-s">ldap_unbind_s()</a></code> function.</p>

<p><strong>Example</strong></p>

<p>The following code closes the current connection with the LDAP
server:</p>

<p>
 <strong>Code Example 18-50 - ldap_unbind() code example</strong>
</p>

<pre class="code">...
LDAP *ld;
...
/* After completing your LDAP operations with the server, close the
connection. */
if ( ldap_unbind( ld ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "Error while unbinding from the directory" );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#unbind-s">ldap_unbind_s()</a>,
<a href="function.htm#unbind-ext">ldap_unbind_ext()</a>.</code></p>

<h2 id="unbind-s">ldap_unbind_s()</h2>

<p>The <code>ldap_unbind_s()</code> function unbinds from the
directory, terminates the current association, and frees the
resources contained in the
<code><a href="datatype.htm#LDAP">LDAP</a></code> structure.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_unbind_s( LDAP *ld );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-126 - ldap_unbind_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>
<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
</ul>

<p><strong>Description</strong></p>

<p>The three unbind functions (<code>ldap_unbind_ext()</code>,
<code>ldap_unbind()</code> and <code>ldap_unbind_s())</code> all
work synchronously in the sense that they send an unbind request to
the server, close all open connections associated with the LDAP
session handle, and dispose of all resources associated with the
session handle before returning.</p>

<p>Note that there is no server response to an LDAP unbind
operation. All three of the unbind functions return
<code>LDAP_SUCCESS</code> (or another LDAP error code if the request
cannot be sent to the LDAP server). After a call to one of the
unbind functions, the session handle <code>ld</code> is invalid and
it is illegal to make any further LDAP API calls using
<code>ld</code>. For additional information, see
<a href="writing.htm#close_connection_server">"Closing the Connection to the Server."</a></p>

<p><strong>Example</strong></p>

<p>The following code closes the current connection with the LDAP server:</p>

<p>
 <strong>Code Example 18-51 - ldap_unbind_s() code example</strong>
</p>

<pre class="code">...
LDAP *ld;
...
/* After completing your LDAP operations with the server, close the connection. */
if ( ldap_unbind_s( ld ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "Error while unbinding from the directory" );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#unbind">ldap_unbind()</a>,
<a href="function.htm#unbind-ext">ldap_unbind_ext()</a>.</code></p>

<h2 id="unbind-ext">ldap_unbind_ext()</h2>

<p>The <code>ldap_unbind_ext()</code> function unbinds from the
directory, terminates the current association, and frees the
resources contained in the
<code><a href="datatype.htm#LDAP">LDAP</a></code> structure.</p>

<p>Unlike the other two unbind functions,
<code>ldap_unbind_ext()</code> allows you to explicitly include both
server and client controls in your unbind request. However, since
there is no server response to an unbind request, there is no way to
receive a response from a server control that is included with your
unbind request.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_unbind_ext( LDAP *ld, LDAPControl **serverctrls,
LDAPControl **clientctrls );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-127 - ldap_unbind_ext() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>serverctrls</code></td>
  <td>List of LDAP server controls.</td>
 </tr>
 <tr>
  <td><code>clientctrls</code></td>
  <td>List of client controls.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  <code>LDAP_ENCODING_ERROR</code> if an error occurred when
  BER-encoding the request.
 <li>
  <code>LDAP_SERVER_DOWN</code> if the LDAP server did not receive
  the request or if the connection to the server was lost.
 <li><code>LDAP_NO_MEMORY</code> if memory cannot be allocated.
 <li>
  <code>LDAP_NOT_SUPPORTED</code> if controls are included in your
  request (for example, as a session preference) and your LDAP
  client does not specify that it is using the LDAPv3 protocol. Make
  sure that you set the version of your LDAP client to version 3
  before calling this function. (For details, see
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your
  Client."</a>).
</ul>

<p><strong>Description</strong></p>

<p>The three unbind functions (<code>ldap_unbind_ext()</code>,
<code>ldap_unbind()</code> and <code>ldap_unbind_s())</code> all
work synchronously in the sense that they send an unbind request to
the server, close all open connections associated with the LDAP
session handle, and dispose of all resources associated with the
session handle before returning.</p>

<p>Note that there is no server response to an LDAP unbind
operation. All three of the unbind functions return
<code>LDAP_SUCCESS</code> (or another LDAP error code if the request
cannot be sent to the LDAP server). After a call to one of the
unbind functions, the session handle <code>ld</code> is invalid and
it is illegal to make any further LDAP API calls using
<code>ld</code>. For additional information, see
<a href="writing.htm#close_connection_server">"Closing the Connection to the Server."</a></p>

<p><strong>Example</strong></p>

<p>The following code closes the current connection with the LDAP server:</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#unbind">ldap_unbind()</a>,
<a href="function.htm#unbind-s">ldap_unbind_s()</a>.</code></p>

<h2 id="url-parse">ldap_url_parse()</h2>

<p>The <code>ldap_url_parse()</code> function parses an LDAP URL
into its components. For more information, see
<a href="url.htm#get_components_ldap_url">"Getting the Components of an LDAP URL."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_url_parse( const char *url, LDAPURLDesc **ludpp );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-128 - ldap_url_parse() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>url</code></td>
  <td>The URL that you want to check.</td>
 </tr>
 <tr>
  <td><code>ludpp</code></td>
  <td>Pointer to a structure containing the components of the URL.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  <code>LDAP_URL_ERR_NOTLDAP</code> if the URL does not begin with
  the "<code>ldap://</code>" or "<code>ldaps://</code>" prefix.
 <li>
  <code>LDAP_URL_ERR_NODN</code> if the URL missing trailing slash
  after host or port.
 <li>
  <code>LDAP_URL_ERR_BADSCOPE</code> if the scope within the URL
  is invalid.
 <li>
  <code>LDAP_URL_ERR_MEM</code> if not enough free memory is
  available for this operation.
 <li>
  <code>LDAP_URL_ERR_PARAM</code> if an invalid argument was passed
  to the function.
</ul>

<p><strong>Example</strong></p>

<p>The following section of code parses an LDAP URL and prints out
each component of the URL.</p>

<p>
 <strong>Code Example 18-52 - ldap_url_parse() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
char *my_url = "ldap://ldap.example.com:5000/dc=example,dc=com?cn,mail,telephoneNumber?sub?(sn=Jensen)";
LDAPURLDesc *ludpp;
int res, i;
...
if ( ( res = ldap_url_parse( my_url, &amp;ludpp ) ) != 0 ) {
  switch( res ){
    case LDAP_URL_ERR_NOTLDAP:
      printf( "URL does not begin with \"ldap://\"\n" );
      break;
    case LDAP_URL_ERR_NODN:
      printf( "URL missing trailing slash after host or port\n" );
      break;
    case LDAP_URL_ERR_BADSCOPE:
      printf( "URL contains an invalid scope\n" );
      break;
    case LDAP_URL_ERR_MEM:
      printf( "Not enough memory\n" );
      break;
    default:
      printf( "Unknown error\n" );
  }
  return( 1 );
}
printf( "Components of the URL:\n" );
printf( "Host name: %s\n", ludpp-&gt;lud_host );
printf( "Port number: %d\n", ludpp-&gt;lud_port );
if ( ludpp-&gt;lud_dn != NULL ) {
  printf( "Base entry: %s\n", ludpp-&gt;lud_dn );
} else {
  printf( "Base entry: Root DN\n" );
}
if ( ludpp-&gt;lud_attrs != NULL ) {
  printf( "Attributes returned: \n" );
  for ( i=0; ludpp-&gt;lud_attrs[i] != NULL; i++ ) {
    printf( "\t%s\n", ludpp-&gt;lud_attrs[i] );
}
} else {
    printf( "No attributes returned.\n" );
}
printf( "Scope of the search: " );
switch( ludpp-&gt;lud_scope ) {
  case LDAP_SCOPE_BASE:
    printf( "base\n" );
    break;
  case LDAP_SCOPE_ONELEVEL:
    printf( "one\n" );
    break;
  case LDAP_SCOPE_SUBTREE:
    printf( "sub\n" );
    break;
  default:
    printf( "Unknown scope\n" );
}
printf( "Filter: %s\n", ludpp-&gt;lud_filter );
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#free-urldesc">ldap_free_urldesc()</a>.</code></p>

<h2 id="url-search">ldap_url_search()</h2>

<p>The <code>ldap_url_search()</code> function searches the
directory for matching entries, based on the contents of the URL.</p>

<p><code>ldap_url_search()</code> is an asynchronous function; it
does not directly return results. If you want the results to be
returned directly by the function, call the synchronous function
<code><a href="function.htm#url-search-s">ldap_url_search_s()</a></code>
instead. For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a></p>

<p>For more information on processing LDAP searches specified as
URLs, see <a href="url.htm#process_ldap_url">"Processing an LDAP URL."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_url_search( LDAP *ld, const char *url, int attrsonly );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-129 - ldap_url_search() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>url</code></td>
  <td>LDAP URL specifying a search of the directory.</td>
 </tr>
 <tr>
  <td>
  <td>
   Specifies whether or not attribute values are returned along with
   the attribute types. This parameter can have the following values:
   <p></p>
   <ul>
    <li>
     <code>0</code> specifies that both attribute types and
     attribute values are returned.
    <li><code>1</code> specifies that only attribute types are returned.
   </ul>
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>Returns the message ID of the <code>ldap_url_search()</code>
operation. To check the result of this operation, call
<code><a href="function.htm#result">ldap_result()</a></code> and
<code><a href="function.htm#result2error">ldap_result2error()</a></code>.</p>

<p><strong>Example</strong></p>

<p>
 <strong>Code Example 18-53 - ldap_url_search() code example</strong>
</p>

<pre class="code">static void do_other_work();
unsigned long global_counter = 0;int
main( int argc, char **argv )
{
  char *my_url = "ldap://ldap.example.com/dc=example,dc=com?cn,mail,telephoneNumber?sub?(sn=Jensen)";
  LDAP *ld;
  LDAPMessage *result, *e;
  BerElement *ber;
  char *a, *dn;
  char **vals;
  int i, rc, finished, msgid;
  int num_entries = 0;
  struct timeval zerotime;  zerotime.tv_sec = zerotime.tv_usec = 0L;/* get a handle to an LDAP connection */
if ( (ld = ldap_init( MY_HOST, MY_PORT )) == NULL ) {
  perror( "ldap_init" );
  return( 1 );
}
/* authenticate to the directory as nobody */
if ( ldap_simple_bind_s( ld, NULL, NULL ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_simple_bind_s" );
  return( 1 );
}
/* search for all entries with surname of Jensen */
if (( msgid = ldap_url_search( ld, my_url, 0 )) == -1 ) {
  ldap_perror( ld, "ldap_url_search" );
  return( 1 );
}/* Loop, polling for results until finished */
finished = 0;
while ( !finished ) {
  /*
  * Poll for results.  We call ldap_result with the "all" parameter
  * set to zero. This causes ldap_result() to return exactly one
  * entry if at least one entry is available. This allows us to
  * display the entries as they are received.
  */
  result = NULL;
  rc = ldap_result( ld, msgid, 0, &amp;zerotime, &amp;result );
  switch ( rc ) {
  case -1:
    /* some error occurred */
    ldap_perror( ld, "ldap_result" );
    return( 1 );
  case 0:
  /* Timeout was exceeded. No entries are ready for retrieval. */
    if ( result != NULL ) {
      ldap_msgfree( result );
    }
    break;
  default:
  /*
  * Either an entry is ready for retrieval, or all entries have
  * been retrieved.
  */
    if (( e = ldap_first_entry( ld, result )) == NULL ) {
      /* All done */
      finished = 1;
      if ( result != NULL ) {
        ldap_msgfree( result );
      }
      continue;
    }
    /* for each entry print out name + all attrs and values */
    num_entries++;
    if (( dn = ldap_get_dn( ld, e )) != NULL ) {
      printf( "dn: %s\n", dn );
      ldap_memfree( dn );
    }
    for ( a = ldap_first_attribute( ld, e, &amp;ber );
     a != NULL; a = ldap_next_attribute( ld, e, ber ) ) {
      if (( vals = ldap_get_values( ld, e, a )) != NULL ) {
        for ( i = 0; vals[ i ] != NULL; i++ ) {
          printf( "%s: %s\n", a, vals[ i ] );
        }
      ldap_value_free( vals );
      }
      ldap_memfree( a );
    }
    if ( ber != NULL ) {
      ldap_ber_free( ber, 0 );
    }
    printf( "\n" );
    ldap_msgfree( result );
  }
  /* Do other work here while you are waiting... */
  do_other_work();
}/* All done. Print a summary. */
printf( "%d entries retrieved. I counted to %ld "
    "while I was waiting.\n", num_entries,
    global_counter );
ldap_unbind( ld );
return( 0 );
}/*
 * Perform other work while polling for results. */
static void
do_other_work()
{
  global_counter++;
}</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#url-search-s">ldap_url_search_s()</a>,
<a href="function.htm#result">ldap_result()</a>,
<a href="function.htm#result2error">ldap_result2error()</a>.</code></p>

<h2 id="url-search-s">ldap_url_search_s()</h2>

<p>The <code>ldap_url_search_s()</code> function searches the
directory for matching entries, based on the contents of the URL.</p>

<p><code>ldap_url_search_s()</code> is a synchronous function, which
directly returns the results of the operation. If you want to
perform other operations while waiting for the results of this
operation, call the asynchronous function
<code><a href="function.htm#url-search">ldap_url_search()</a></code>
instead. (For more information on asynchronous and synchronous
functions, see <a href="using.htm#call_sync_async_function">"Calling Synchronous and
Asynchronous Functions."</a>)</p>

<p>For more information on processing LDAP searches specified as
URLs, see <a href="url.htm#process_ldap_url">"Processing an LDAP URL."</a></p>

<p><strong>Syntax</strong></p><pre>#include &lt;ldap.h&gt;
int ldap_url_search_s( LDAP *ld, const char *url,
  int attrsonly, LDAPMessage **res );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-130 - ldap_url_search_s() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>url</code></td>
  <td>LDAP URL specifying a search of the directory.</td>
 </tr>
 <tr>
  <td><code>attrsonly</code></td>
  <td>
   Specifies whether or not attribute values are returned along with
   the attribute types. This parameter can have the following values:
   <p></p>
   <ul>
    <li>
     <code>0</code> specifies that both attribute types and attribute
     values are returned.
    <li><code>1</code> specifies that only attribute types are returned.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>res</code></td>
  <td>Results of the search (when the call is completed).</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  If unsuccessful, returns the LDAP error code for the operation.
  See <a href="error.htm">Chapter 19 - Result Codes</a> for a
  complete listing.
</ul>

<p><strong>Example</strong></p>

<p>The following example processes a search request from an LDAP URL.</p>

<p>
 <strong>Code Example 18-54 - ldap_url_search_s() code example</strong>
</p>

<pre class="code">#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result;
char *my_url = "ldap://ldap.example.com/dc=example,dc=com?cn,mail,telephoneNumber?sub?(sn=Jensen)";
...
/* Process the search request in the URL */
if ( ldap_url_search_s( ld, my_url, 0, &amp;result ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_url_search_s" );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#search">ldap_search()</a>,
<a href="function.htm#search-st">ldap_search_st()</a>.</code></p>

<h2 id="url-search-st">ldap_url_search_st()</h2>

<p>The <code>ldap_url_search_st()</code> function searches the
directory for matching entries, based on the contents of the URL.
This function works like
<code><a href="function.htm#url-search-s">ldap_url_search_s()</a></code>
and lets you specify a timeout period for the search.</p>

<p>For more information, see <a href="url.htm#process_ldap_url">"Processing
an LDAP URL."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_url_search_st( LDAP *ld, const char *url, int attrsonly,
  struct timeval *timeout, LDAPMessage **res );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-131 - ldap_url_search_st() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>url</code></td>
  <td>LDAP URL specifying a search of the directory.</td>
 </tr>
 <tr>
  <td><code>attrsonly</code></td>
  <td>
   Specifies whether or not attribute values are returned along with
   the attribute types. This parameter can have the following values:
   <p></p>
   <ul>
    <li>
     0 specifies that both attribute types and attribute values
     are returned.
    <li>1 specifies that only attribute types are returned.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>timeout</code></td>
  <td>Maximum time to wait for the results of the search.</td>
 </tr>
 <tr>
  <td><code>res</code></td>
  <td>Results of the search (when the call is completed).</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>LDAP_SUCCESS</code> if successful.
 <li>
  If unsuccessful, returns the LDAP error code for the operation.
  See <a href="error.htm">Chapter 19 "Result Codes</a>" for
  a complete listing.
</ul>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#search">ldap_search()</a>,
<a href="function.htm#search-s">ldap_search_s()</a>.</code></p>

<h2 id="value-free">ldap_value_free()</h2>

<p>The <code>ldap_value_free()</code> function frees an array of
values from memory. Use the
<code><a href="function.htm#value-free-len">ldap_value_free_len()</a></code>
function instead of this function if the values are
<code><a href="datatype.htm#berval">berval</a></code> structures.</p>

<p>For additional information, see
<a href="search.htm#c6-getting-the-values-of-an-attribute">"Getting the Values of an Attribute."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_value_free( char **values );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-132 - ldap_value_free() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>values</code></td>
  <td>Array of values.</td>
 </tr>
</table>

<p><strong>Example</strong></p>

<p>See the example under
<code><a href="function.htm#get-values">ldap_get_values()</a></code>.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#get-values">ldap_get_values()</a>,
<a href="function.htm#value-free-len">ldap_value_free_len()</a>.</code></p>

<h2 id="value-free-len">ldap_value_free_len()</h2>

<p>The <code>ldap_value_free_len()</code> function frees an array of
<a href="datatype.htm#berval">berval</a> structures from memory. Use
the <code><a href="function.htm#value-free">ldap_value_free()</a></code>
function instead of this function if the values are string values.</p>

<p>For additional information, see
<a href="search.htm#c6-getting-the-values-of-an-attribute">"Getting the Values of an Attribute."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
void ldap_value_free_len( struct berval **values );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-133 - ldap_value_free_len() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>values</code></td>
  <td>
   Array of <code><a href="datatype.htm#berval">berval</a></code>
   structures.
  </td>
 </tr>
</table>

<p><strong>Example</strong></p>

<p>See the example under
<code><a href="function.htm#get-values-len">ldap_get_values_len()</a></code>.</p>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#get-values">ldap_get_values()</a>,
<a href="function.htm#get-values-len">ldap_get_values_len()</a>.</code></p>

<h2 id="version">ldap_version()</h2>

<p>This function has been deprecated; you should use the function
<code><a href="function.htm#get-option">ldap_get_option()</a></code> in
its place (it is documented here for backward compatibility only).</p>

<p>Gets version information about the LDAP C SDK libraries. The
version information is returned in an
<code><a href="datatype.htm#LDPVersion">LDAPVersion</a></code> structure.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap.h&gt;
int ldap_version( LDAPVersion *ver );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-134 - ldap_version() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ver</code></td>
  <td>
   <code>LDAPVersion</code> structure returning version information.
   If you only want the SDK version, you can pass <code>NULL</code>
   for this parameter.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>The version number of the LDAP C SDK, multiplied by 100. For
example, for version 1.0 of the LDAP C SDK, the function returns 100.</p>

<h2 id="ssl-advclientauth-init">ldapssl_advclientauth_init()</h2>

<p>Initializes your client application to connect to a secure LDAP
server over SSL and to use certificate-based client authentication.</p>

<p><strong>Note: This function is not multithread safe.</strong> It
needs to be called only once per process, and does not, for example,
need to be called again after ldap_unbind() is called.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap_ssl.h&gt;
int LDAP_CALL ldapssl_advclientauth_init( char *certdbpath,
  void *certdbhandle, int needkeydb, char *keydbpath,
  void *keydbhandle, int needsecmoddb, char *secmodpath,
  const int sslstrength);</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-135 - ldapssl_advclientauth_init() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>certdbpath</code></td>
  <td>
   Path to the database containing certificates for your client. The
   database must be the <code>cert7.db</code> certificate database
   used by a Netscape or Mozilla client.<em>x</em>.
   <p></p>
   Note the following:
   <p></p>
   <ul>
    <li>
     You can include the database filename in the path (for example,
     <code>/usr/mozilla/cert7.db</code>).
    <li>
     If you specify the path to the directory containing the
     certificate database (for example, <code>/usr/mozilla</code>),
     the function assumes that the database file is named
     <code>cert7.db</code>.
    <li>
     If you pass <code>NULL</code> for this parameter, the function
     looks for the certificate database used by Netscape Communicator
     (for example, <code>~/.netscape/cert7.db</code> on UNIX).
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>certdbhandle</code></td>
  <td>
   Pass a <code>NULL</code> value for this. (This parameter is not
   used currently.)
  </td>
 </tr>
 <tr>
  <td><code>needkeydb</code></td>
  <td>
   Specifies whether or not the private key database needs to be
   opened for use. This parameter can have one of the following
   values:
   <p></p>
   <ul>
    <li>
     If it is a non-zero value, the function opens the private key
     database, which is identified by the <code>keydbpath</code>
     argument.
    <li>
     If <code>0</code>, the function does not open the private
     key database.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>keydbpath</code></td>
  <td>
   Path to the database containing the private key certified by your
   certificate. The database must be the <code>key3.db</code>
   private key database used by a Mozilla or Netscape client.<em>x</em>.
   <p></p>
   Note the following:
   <p></p>
   <ul>
    <li>
     You can include the database filename in the path (for example,
     <code>/usr/mozilla/key3.db</code>).
    <li>
     If you specify the path to the directory containing the private
     key database (for example, <code>/usr/mozilla</code>), the
     function assumes that the database file is named
     <code>key3.db</code>.
    <li>
     If you pass <code>NULL</code> for this parameter, the function
     looks for the private key database used by Netscape Communicator
     (for example, <code>~/.netscape/key3.db</code> on UNIX).
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>certdbhandle</code></td>
  <td>
   Pass a <code>NULL</code> value for this. (This parameter is not
   used currently.)
  </td>
 </tr>
 <tr>
  <td><code>needsecmoddb</code></td>
  <td>
   Specifies whether or not the security module database file needs
   to be opened for use. This parameter can have one of the
   following values:
   <p></p>
   <ul>
    <li>
     If it is a non-zero value, the function opens the security
     module database, which is identified by the
     <code>keydbpath</code> argument.
    <li>
     If <code>0</code>, the function does not open the security
     modules database.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>secmodpath</code></td>
  <td>
   Path to the database containing security modules. The database
   must be the <code>secmod.db</code> private key database used by a
   Netscape or Mozilla client.<em>x</em>.
   <p></p>
   Note the following:
   <p></p>
   <ul>
    <li>
     You can include the database filename in the path (for example,
     <code>/usr/mozilla/secmod.db</code>).
    <li>
     If you specify the path to the directory containing the
     security module database (for example,
     <code>/usr/mozilla</code>), the function assumes that the
     database file is named <code>secmod.db</code>.
    <li>
     If you pass <code>NULL</code> for this parameter, the function
     looks for the security module database used by Netscape
     Communicator (for example, <code>~/.netscape/secmod.db</code>
     on UNIX).
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>sslstrength</code></td>
  <td>
   Specifies how the server certificate is evaluated. You can
   specify one of the following values:
   <p></p>
   <ul>
    <li>
     <code>LDAPSSL_AUTH_WEAK</code> indicates that you accept the
     server's certificate without checking the CA who issued the
     certificate.
    <li>
     <code>LDAPSSL_AUTH_CERT</code> indicates that you accept the
     server's certificate only if you trust the CA who issued the
     certificate.
    <li>
     <code>LDAPSSL_AUTH_CNCHECK</code> indicates that you accept the
     server's certificate only if you trust the CA who issued the
     certificate and if the value of the cn attribute is the DNS
     hostname of the server.
   </ul>
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>0</code> if successful.
 <li><code>-1</code> if unsuccessful.
</ul>

<p><strong>Description</strong></p>

<p>You can call the <code>ldapssl_advclientauth_init()</code>
function to initialize your client application for SSL and for
certificate-based client authentication.</p>

<p>This function is similar to
<code><a href="function.htm#ssl-clientauth-init">ldapssl_clientauth_init()</a></code>
and allows you to do the following:</p>

<ul>
 <li>Specify the name and path of a security module database.
 <li>Specify the method used to verify the server's certificate.
</ul>

<p>You must call this function before calling the
<code><a href="function.htm#ssl-init">ldapssl_init()</a></code>
function to connect to the server. For details, see
<a href="ssl.htm">Chapter 12 - Connecting Over SSL</a>.</p>

<p><strong>Example</strong></p>

<p>The following example initializes a client before connecting with
a secure LDAP server.</p>

<p>
 <strong>Code Example 18-55 - ldapssl_advclientauth_init() code example</strong>
</p>

<pre class="code">#include &lt;ldap_ssl.h&gt;
#include &lt;stdio.h&gt;
...
/* Initialize client, using mozilla's certificate database */
if ( ldapssl_advclientauth_init( "/home/bjensen/.mozilla/bjensen/8vlmm76q.slt/cert8.db",
  NULL, 1, "/home/bjensen/.mozilla/bjensen/8vlmm76q.slt/key3.db", NULL , 1,
  "/home/bjensen/.mozilla/bjensen/8vlmm76q.slt/secmod.db", LDAPSSL_AUTH_CNCHECK) &lt; 0 ) {
  perror( "ldap_advclientauth_init" );
    return( 1 );
  }
}
...</pre>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#init">ldap_init()</a>,
<a href="function.htm#ssl-clientauth-init">ldapssl_clientauth_init()</a>,
<a href="function.htm#ssl-init">ldapssl_init()</a>,
<a href="function.htm#ssl-install-routines">ldapssl_install_routines()</a>.</code></p>

<h2 id="ssl-client-init">ldapssl_client_init()</h2>

<p>Initializes your client application to connect to a secure LDAP
server over SSL.</p>

<p><strong>Note: This function is not multithread safe.</strong> It
needs to be called only once per process, and does not, for example,
need to be called again after ldap_unbind() is called.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap_ssl.h&gt;
int ldapssl_client_init( const char *certdbpath, void *certdbhandle );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-136 - ldapssl_client_init() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>certdbpath</code></td>
  <td>
   Path to the database containing certificates for your client. The
   database must be the <code>cert7.db</code> certificate database
   used by a Mozilla or Netscape client.<em>x</em>.
   <p></p>
   You can either specify the path to the directory containing the
   certificate database (in which case the function assumes that the
   database file is named <code>cert7.db</code>) or you can include
   the database filename in the path.
   <p></p>
   If you pass <code>NULL</code> for this parameter, the function
   looks for the certificate database used by Netscape Communicator
   (for example, <code>~/.netscape/cert7.db</code> on UNIX).
  </td>
 </tr>
 <tr>
  <td><code>certdbhandle</code></td>
  <td>
   Pass a <code>NULL</code> value for this. (This parameter is not
   used currently.)
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>0</code> if successful.
 <li><code>-1</code> if unsuccessful.
</ul>

<p><strong>Description</strong></p>

<p>You can call the <code>ldapssl_client_init()</code> function to
initialize your client application for SSL.</p>

<p>If you plan to use certificate-based authentication, you should
call the
<code><a href="function.htm#ssl-clientauth-init">ldapssl_clientauth_init()</a></code>
or <code><a href="function.htm#ssl-advclientauth-init">ldapssl_advclientauth_init()</a></code>
function instead of this function.</p>

<p>You must call this function before calling the
<code><a href="function.htm#ssl-init">ldapssl_init()</a></code>
function to connect to the server. For details, see
<a href="ssl.htm">Chapter 12 - Connecting Over SSL</a>.</p>

<p><strong>Example</strong></p>

<p>The following example initializes a client before connecting with
a secure LDAP server.</p>

<p>
 <strong>Code Example 18-56 - ldapssl_client_init() code example</strong>
</p>

<pre class="code">#include &lt;ldap_ssl.h&gt;
#include &lt;stdio.h&gt;
...
/* Initialize client, using mozilla's certificate database */
if ( ldapssl_client_init( "/home/bjensen/.mozilla/bjensen/8vlmm76q.slt/cert8.db", NULL ) &lt; 0) {
  printf( "Failed to initialize SSL client...\n" );
  return( 1 );
}
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#init">ldap_init()</a>,
<a href="function.htm#ssl-init">ldapssl_init()</a>,
<a href="function.htm#ssl-install-routines">ldapssl_install_routines()</a>.</code></p>

<h2 id="ssl-clientauth-init">ldapssl_clientauth_init()</h2>

<p>Initializes your client application to connect to a secure LDAP
server over SSL and to use certificate-based client authentication.</p>

<p><strong>Note: This function is not multithread safe.</strong> It
needs to be called only once per process, and does not, for example,
need to be called again after ldap_unbind() is called.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap_ssl.h&gt;
int ldapssl_clientauth_init( char *certdbpath, void *certdbhandle,
  int needkeydb, char *keydbpath, void *keydbhandle );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-137 - ldapssl_clientauth_init() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>certdbpath</code></td>
  <td>
   Path to the database containing certificates for your client. The
   database must be the <code>cert7.db</code> certificate database
   used by a Mozilla or Netscape client.<em>x</em>.
   <p></p>
   You can either specify the path to the directory containing the
   certificate database (in which case the function assumes that the
   database file is named <code>cert7.db</code>) or you can include
   the database filename in the path.
   <p></p>
   If you pass <code>NULL</code> for this parameter, the function
   looks for the certificate database used by Netscape Communicator
   (for example, <code>~/.netscape/cert7.db</code> on UNIX).
  </td>
 </tr>
 <tr>
  <td><code>certdbhandle</code></td>
  <td>
   Pass a <code>NULL</code> value for this. (This parameter is not
   used currently.)
  </td>
 </tr>
 <tr>
  <td><code>needkeydb</code></td>
  <td>
   Specifies whether or not the private key database needs to be
   opened for use. This parameter can have one of the following
   values:
   <p></p>
   <ul>
    <li>
     If it is a non-zero value, the function opens the private key
     database, which is identified by the <code>keydbpath</code>
     argument.
    <li>
     If <code>0</code>, the function does not open the private
     key database.
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>keydbpath</code></td>
  <td>
   Path to the database containing the private key certified by your
   certificate. The database must either be the <code>key3.db</code>
   certificate database used by a Mozilla or Netscape client.<em>x</em>.
   <p></p>
   You can either specify the path to the directory containing the
   private key database (in which case the function assumes that the
   database file is named <code>key3.db</code>) or you can include
   the database filename in the path.
   <p></p>
   If you pass NULL for this parameter, the function looks for the
   key database used by Netscape Communicator (for example,
   <code>~/.netscape/key3.db</code> on UNIX).
  </td>
 </tr>
 <tr>
  <td><code>certdbhandle</code></td>
  <td>
   Pass a <code>NULL</code> value for this. (This parameter is not
   used currently.)
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>0</code> if successful.
 <li><code>-1</code> if unsuccessful.
</ul>

<p><strong>Description</strong></p>

<p>You can call the <code>ldapssl_clientauth_init()</code> function
to initialize your client application for SSL and certificate-based
client authentication.</p>

<p>If you need to specify the name and path of the security modules
database or if you need to specify how the server's certificate will
be verified, you should call the
<code><a href="function.htm#ssl-advclientauth-init">ldapssl_advclientauth_init()</a></code>
function instead of this function.</p>

<p>You must call this function before calling the
<code><a href="function.htm#ssl-init">ldapssl_init()</a></code> function
to connect to the server. For details, see <a href="ssl.htm">Chapter
12 - Connecting Over SSL</a>.</p>

<p><strong>Example</strong></p>

<p>The following example initializes a client before connecting with
a secure LDAP server.</p>

<p>
 <strong>Code Example 18-57 - ldapssl_clientauth_init() code example</strong>
</p>

<pre class="code">#include &lt;ldap_ssl.h&gt;
#include &lt;stdio.h&gt;
...
/* Initialize client, using mozilla's certificate database */
if ( ldapssl_clientauth_init( "/home/bjensen/.mozilla/bjensen/8vlmm76q.slt/cert8.db", NULL, 1,
  "/home/bjensen/.mozilla/bjensen/8vlmm76q.slt/key3.db", NULL ) &lt; 0 ) {
  perror( "ldap_clientauth_init" );
    return( 1 );
  }
}
...</pre>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#init">ldap_init()</a>,
<a href="function.htm#ssl-clientauth-init">ldapssl_clientauth_init()</a>,
<a href="function.htm#ssl-init">ldapssl_init()</a>,
<a href="function.htm#ssl-install-routines">ldapssl_install_routines()</a>.</code></p>

<h2 id="ssl-enable-clientauth">ldapssl_enable_clientauth()</h2>

<p>Enables your application to use client authentication.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap_ssl.h&gt;
int ldapssl_enable_clientauth( LDAP *ld, char *keynickname,
  char *keypasswd, char *certnickname );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-138 - ldapssl_enable_clientauth() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
 <tr>
  <td><code>keynickname</code></td>
  <td>
   This parameter is not currently used. Pass an empty string ("")
   for this value.
  </td>
 </tr>
 <tr>
  <td><code>keypasswd</code></td>
  <td>Password to the encrypted private key database.</td>
 </tr>
 <tr>
  <td><code>certnickname</code></td>
  <td>
   Nickname of the certificate that you want to use for client
   authentication.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>0</code> if successful.
 <li><code>-1</code> if unsuccessful.
</ul>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#ssl-clientauth-init">ldapssl_clientauth_init()</a></code></p>

<h2 id="ssl-err2string">ldapssl_err2string()</h2>

<p>The <code>ldapssl_err2string()</code> function returns the
corresponding error message for an SSL-specific error code. For more
information, see <a href="using.htm#get_error_message">"Getting the Error
Message."</a></p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap_ssl.h&gt;
const char * LDAP_CALL ldapssl_err2string ( const int prerrno );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-139 - ldapssl_err2string() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>prerrno</code></td>
  <td>The SSL error code that you want interpreted into an error message.</td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns the corresponding error message for the SSL
  error code.
 <li>
  If unsuccessful (for example, if the error code is not a known SSL
  error code), returns a pointer to the string "<code>Unknown error</code>."
</ul>

<h3>Description</h3>

<p>This function provides support for the SSL-specific error
messages that are not covered by the regular message routine
<code>ldap_err2string()</code>. If any <code>ldapssl_*()</code>
function returns an error code that is unknown to
<code>ldap_err2string()</code> (and <code>ldap_err2string()</code>
returns "<code>Unknown Error</code>"), this function should be
called to determine the SSL-specific error message.</p>

<p>To check for SSL errors, you should call
<code>ldapssl_err2string()</code> after you call any of the
following SSL initialization functions:</p>

<ul>
 <li><code>ldapssl_client_init()</code>
 <li><code>ldapssl_clientauth_init()</code>
 <li><code>ldapssl_advclientauth_init()</code>
 <li><code>ldapssl_pkcs_init()</code>
</ul>

<p>The errors returned by these functions are usually related to
certificate database corruption, missing certs in a certificate
database, client authentication failures, and other general SSL
errors.</p>

<p><strong>See Also:</strong><br>
<code class="long"><a href="function.htm#ssl-client-init">ldapssl_client_init()</a>,
<a href="function.htm#ssl-clientauth-init">ldapssl_clientauth_init()</a>,
<a href="function.htm#ssl-advclientauth-init">ldapssl_advclientauth_init()</a>,
<a href="function.htm#ssl-pkcs-init">ldapssl_pkcs_init()</a>,
<a href="function.htm#err2string">ldap_err2string()</a></code></p>

<h2 id="ssl-init">ldapssl_init()</h2>

<p>Initializes the LDAP library for SSL and installs the I/O
routines for SSL. <code>ldapssl_init()</code> allocates an
<a href="datatype.htm#LDAP">LDAP</a> structure but does not open an
initial connection.</p>

<p>Calling this function is equivalent to calling
<code><a href="function.htm#init">ldap_init()</a></code> followed by
<code><a href="function.htm#ssl-install-routines">ldapssl_install_routines()</a></code>
and <code><a href="function.htm#set-option">ldap_set_option()</a></code>
to set the <code>LDAP_OPT_SSL</code> option to <code>LDAP_OPT_ON</code>.</p>

<p>Before calling this function, you should call the
<code><a href="function.htm#ssl-client-init">ldapssl_client_init()</a></code>
function to initialize your client for SSL. For details, see
<a href="ssl.htm">Chapter 12 - Connecting Over SSL</a>.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap_ssl.h&gt;
LDAP *ldapssl_init( const char *defhost, int defport,
  int defsecure );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-140 - ldapssl_init() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>defhost</code></td>
  <td>Connect to this LDAP server, if no other server is specified.</td>
 </tr>
 <tr>
  <td><code>defport</code></td>
  <td>
   Connect to this server port, if no other port is specified. To
   specify the default port 389, use <code>LDAP_PORT</code> as the
   value for this parameter.
  </td>
 </tr>
 <tr>
  <td><code>defsecure</code></td>
  <td>
   Determines whether or not to establish the default connection
   over SSL. Set this to a non-zero value to establish the default
   connection over SSL.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li>
  If successful, returns a pointer to an
  <code><a href="datatype.htm#LDAP">LDAP</a></code> structure,
  which should be passed to subsequent calls to other LDAP API
  functions.
 <li>If unsuccessful, returns a <code>-1</code>.
</ul>

<p><strong>Example</strong></p>

<p>The following example connects your client with a secure LDAP server.</p>

<p>
 <strong>Code Example 18-58 - ldapssl_init() code example</strong>
</p>

<pre class="code">#include &lt;ldap_ssl.h&gt;
#include &lt;stdio.h&gt;
...
/* Initialize client, using mozilla's certificate database */
if ( ldapssl_client_init( "/home/bjensen/.mozilla/bjensen/8vlmm76q.slt/cert8.db", NULL ) &lt; 0) {
  printf( "Failed to initialize SSL client...\n" );
  return( 1 );
}
/* get a handle to an LDAP connection */
if ( (ld = ldapssl_init( "cert.example.com", LDAPS_PORT, 1 )) == NULL {
  perror( "ldapssl_init" );
  return( 1 );
}
...
/* Client can now perform LDAP operations on the secure LDAP server */
...</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#init">ldap_init()</a>,
<a href="function.htm#ssl-client-init">ldapssl_client_init()</a>,
<a href="function.htm#ssl-install-routines">ldapssl_install_routines()</a>.</code></p>

<h2 id="ssl-install-routines">ldapssl_install_routines()</h2>

<p>Installs the I/O routines to enable SSL over LDAP. You need to
call this routine in combination with
<code><a href="function.htm#init">ldap_init()</a></code> and
<code><a href="function.htm#set-option">ldap_set_option()</a></code>. (As
an alternative, you can call
<code><a href="function.htm#ssl-init">ldapssl_init()</a></code> instead
of these three functions).</p>

<p>As is the case with the
<code><a href="function.htm#ssl-init">ldapssl_init()</a></code>
function, you need to call
<code><a href="function.htm#ssl-client-init">ldapssl_client_init()</a></code>
before calling this function.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap_ssl.h&gt;
int ldapssl_install_routines( LDAP *ld );</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-141 - ldapssl_install_routines() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>ld</code></td>
  <td>
   Connection handle, which is a pointer to an
   <code><a href="datatype.htm#LDAP">LDAP</a></code> structure
   containing information about the connection to the LDAP server.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>0</code> if successful.
 <li><code>-1</code> if unsuccessful.
</ul>

<p><strong>Example</strong></p>

<p>The following example connects your client with a secure LDAP server.</p>

<p>
 <strong>Code Example 18-59 - ldapssl_install_routines() code example</strong>
</p>

<pre class="code">#include &lt;ldap_ssl.h&gt;
#include &lt;stdio.h&gt;
...
/* Initialize client, using mozilla's certificate database */
if ( ldapssl_client_init( "/home/bjensen/.mozilla/bjensen/8vlmm76q.slt/cert8.db", NULL ) &lt; 0) {
 printf( "Failed to initialize SSL client...\n" );
 return( 1 );
}
/* Get the handle to an LDAP connection */
if ( (ld = ldap_init( MY_HOST, 6360 )) == NULL ) {
 perror( "ldap_init" );
 return( 1 );
}/* Load SSL routines */
if ( ldapssl_install_routines( ld ) != LDAP_SUCCESS ) {
 ldap_perror( ld, "ldapssl_install_routines" );
 return( 1 );
}/* Set the option to use SSL with the default connection */
if (ldap_set_option( ld, LDAP_OPT_SSL, LDAP_OPT_ON ) != LDAP_SUCCESS) {
 ldap_perror( ld, "ldap_set_option" );
 return( 1 );
}
...</pre>

<p><strong>See Also</strong><br>
<code><a href="function.htm#init">ldap_init()</a></code>,
<code><a href="function.htm#ssl-init">ldapssl_init()</a></code>,
<code><a href="function.htm#ssl-client-init">ldapssl_client_init()</a></code>.</p>

<h2 id="ssl-pkcs-init">ldapssl_pkcs_init()</h2>

<p>This function provides an alternative to the ldapssl_.*_init() family
of SSL initialization functions (<code>ldapssl_client_init()</code>,
<code>ldapssl_clientauth_init()</code>, and
<code>ldapssl_advclientauth_init()</code></p>

<p><strong>Note: This function is not multithread safe.</strong> It
needs to be called only once per process, and does not, for example,
need to be called again after <code>ldap_unbind()</code> is called.</p>

<p>The LDAP C SDK uses the Public Key Cryptography Standard (PKCS) API
implemented in Network Security Services (NSS) to provide SSL security
support. Specifically, NSS implements the security API as defined in the
PKCS#11 standard.</p>

<p><strong>Syntax</strong></p>

<pre>#include &lt;ldap_ssl.h&gt;
int LDAP_CALL ldapssl_pkcs_init(const struct
 ldapssl_pkcs_fns *pfns);</pre>

<p><strong>Parameters</strong></p>

<p>This function has the following parameters:</p>

<p>
 <strong>Table 18-142 - ldapssl_pkcs_init() function parameters</strong>
</p>

<table class="data">
 <tr>
  <td><code>pfns</code></td>
  <td>
   A pointer to a <code>ldapssl_okcs_fns</code> structure that
   defines the callback function for obtaining the required SSL
   security parameters.
  </td>
 </tr>
</table>

<p><strong>Returns</strong></p>

<p>One of the following values:</p>

<ul>
 <li><code>0</code> is successful.
 <li><code>-1</code> if unsuccessful.
 <li>
  <code><em>n</em></code>, a positive integer, denotes an NSPR error
  as returned by the <code>PR_GetError()</code> NSPR function. Consult
  the NSPR documentation on <code>mozilla.org</code> for more information.
</ul>

<p><strong>Description</strong></p>

<p>The <code>ldap_pkcs_init()</code> structure sets up callbacks for
the security library to obtain required runtime information. It may
be used in place of <code>ldapssl_client_init()</code>,
<code>ldapssl_clientauth_init()</code>, and
<code>ldapssl_advclientauth_init()</code>.</p>

<p>Because <code>ldap_pkcs_init()</code> is based on the
<code>ldapssl_pkcs_fns</code> structure, you do not need to know all
of the security parameters at initialization, unlike the other SSL
initialization functions (<code>ldapssl_*_init()</code>), which did
require all security parameters to be known at the time of
initialization.</p>

<p>The <code>ldapssl_pkcs_fns</code> structure is defined as follows:</p>

<pre class="code">typedef int (LDAP_PKCS_GET_TOKEN_CALLBACK)
 (void *context, char **tokenname);
typedef int (LDAP_PKCS_GET_PIN_CALLBACK)
 (void *context, const char *tokenname, char **tokenpin);
typedef int (LDAP_PKCS_GET_CERTPATH_CALLBACK)
 (void *context, char **certpath);
typedef int (LDAP_PKCS_GET_KEYPATH_CALLBACK)(void *context,
 char **keypath);
typedef int (LDAP_PKCS_GET_MODPATH_CALLBACK)
 (void *context, char **modulepath);
typedef int (LDAP_PKCS_GET_CERTNAME_CALLBACK)
 (void *context, char **certname);
typedef int (LDAP_PKCS_GET_DONGLEFILENAME_CALLBACK)
 (void *context, char **filename);#define PKCS_STRUCTURE_ID 1
struct ldapssl_pkcs_fns {
 int local_structure_id;
 void *local_data;
 LDAP_PKCS_GET_CERTPATH_CALLBACK *pkcs_getcertpath;
 LDAP_PKCS_GET_CERTNAME_CALLBACK *pkcs_getcertname;
 LDAP_PKCS_GET_KEYPATH_CALLBACK *pkcs_getkeypath;
 LDAP_PKCS_GET_MODPATH_CALLBACK *pkcs_getmodpath;
 LDAP_PKCS_GET_PIN_CALLBACK *pkcs_getpin;
 LDAP_PKCS_GET_TOKEN_CALLBACK *pkcs_gettokenname;
 LDAP_PKCS_GET_DONGLEFILENAME_CALLBACK *pkcs_getdonglefilename;
};</pre>

<p><strong>See Also:</strong><br>
<code><a href="function.htm#ssl-client-init">ldapssl_client_init()</a>,
<a href="function.htm#ssl-clientauth-init">ldapssl_clientauth_init()</a>,
<a href="function.htm#ssl-advclientauth-init">ldapssl_advclientauth_init()</a>.</code></p>




<hr class="hide">
</div>
</div>
<div id="footer">
<ul>
<li><a href="../../sitemap.html">Site Map</a></li>
<li><a href="../../security/">Security Updates</a></li>
<li><a href="../../contact/">Contact Us</a></li>
<li><a href="../../foundation/donate.html">Donate</a></li>
</ul>
<p class="copyright">
Portions of this content are &copy; 1998&#8211;2009 by individual mozilla.org
contributors; content available under a Creative Commons license | <a
href="http://www.mozilla.org/foundation/licensing/website-content.html">Details</a>.</p>
<p>
<span>Last modified March 16,  2005</span>
<span><a href="http://bonsai-www.mozilla.org/cvslog.cgi?file=mozilla-org/html/directory/csdk-docs/function.htm&amp;rev=&amp;root=/www/">Document History</a></span>
</p>
</div>
</div>
</body>
</html>
