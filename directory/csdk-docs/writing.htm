<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<link rel="top" title="Home" href="http://www.mozilla.org/">
<link rel="stylesheet" type="text/css" href="../../css/print.css"  media="print">
<link rel="stylesheet" type="text/css" href="../../css/base/content.css"  media="all">
<link rel="stylesheet" type="text/css" href="../../css/cavendish/content.css" title="Cavendish" media="screen">
<link rel="stylesheet" type="text/css" href="../../css/base/template.css"  media="screen">
<link rel="stylesheet" type="text/css" href="../../css/cavendish/template.css" title="Cavendish" media="screen">
<link rel="icon" href="../../images/mozilla-16.png" type="image/png">

 <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
 <title>Mozilla LDAP C SDK: Chapter 4 - Writing an LDAP Client</title>
<script src="../../__utm.js" type="text/javascript"></script>
</head>
<body id="www-mozilla-org" class="deepLevel">
<div id="container">
<p class="important">You are currently viewing a snapshot of www.mozilla.org taken on April 21, 2008. Most of this content is
highly out of date (some pages haven't been updated since the project began in 1998) and exists for historical purposes only.  If
there are any pages on this archive site that you think should be added back to www.mozilla.org, please <a
href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Websites&component=www.mozilla.org">file a bug</a>.</p>
<p class="skipLink"><a href="#mainContent" accesskey="2">Skip to main content</a></p>
<div id="header">
<h1><a href="/" title="Return to home page" accesskey="1">Mozilla</a></h1>
<ul>
<li id="menu_aboutus"><a href="../../about/" title="Getting the most out of your online experience">About</a></li>
<li id="menu_developers"><a href="../../developer/" title="Using Mozilla's products for your own applications">Developers</a></li>
<li id="menu_store"><a href="http://store.mozilla.org/?r=mozorg1" title="Shop for Mozilla products on CD and other merchandise">Store</a></li>
<li id="menu_support"><a href="../../support/" title="Installation, trouble-shooting, and the knowledge base">Support</a></li>
<li id="menu_products"><a href="../../products/" title="All software Mozilla currently offers">Products</a></li>
</ul>
<form id="searchbox_002443141534113389537:ysdmevkkknw" action="http://www.google.com/cse" title="mozilla.org Search">
<div>
<label for="q" title="Search mozilla.org's sites">search mozilla:</label>
<input type="hidden" name="cx" value="002443141534113389537:ysdmevkkknw">
<input type="hidden" name="cof" value="FORID:0">
<input type="text" id="q" name="q" accesskey="s" size="30">
<input type="submit" id="submit" value="Go">
</div>
</form>
</div>
<hr class="hide">
<div id="mBody">
<div id="side">

<ul id="nav">
<li><a title="Roadmap" href="../../roadmap.html"><strong> Roadmap</strong></a></li>
<li><a title="Projects" href="../../projects/"><strong> Projects</strong></a></li>
<li><a title="For developers" href="../../developer/"><strong> Coding</strong></a>
<ul>
<li><a title="Module Owners" href="../../owners.html"> Module Owners</a></li>
<li><a title="Hacking" href="../../hacking/"> Hacking</a></li>
<li><a title="Get the Source" href="http://developer.mozilla.org/en/docs/Download_Mozilla_Source_Code"> Get the Source</a></li>
<li><a title="Building Mozilla" href="http://developer.mozilla.org/en/docs/Build_Documentation"> Build It</a></li>
</ul>
</li>
<li><a title="Testing" href="../../quality/"><strong> Testing</strong></a>
<ul>
<li><a title="Downloads of mozilla.org software releases" href="../../download.html"> Releases</a></li>
<li><a title="Latest mozilla builds for testers" href="../../developer/#builds"> Nightly Builds</a></li>
<li><a title="For testers to report bugs" href="https://bugzilla.mozilla.org/"> Report A Problem</a></li>
</ul>
</li>
<li><a title="Tools for mozilla developers" href="../../tools.html"><strong> Tools</strong></a>
<ul>
<li><a title="Bug tracking system for mozilla testers." href="https://bugzilla.mozilla.org/"> Bugzilla</a></li>
<li><a title="Latest status of mozilla builds" href="http://tinderbox.mozilla.org/showbuilds.cgi?tree=Firefox"> Tinderbox</a></li>
<li><a title="Latest checkins" href="http://bonsai.mozilla.org/cvsqueryform.cgi"> Bonsai</a></li>
<li><a title="Source cross reference" href="http://lxr.mozilla.org/seamonkey/"> LXR</a></li>
</ul>
</li>
<li><a title="Frequently Asked Questions." href="../../faq.html"><strong> FAQs</strong></a></li>
</ul>

</div>
<hr class="hide">
<div id="mainContent">





<ul class="snav">
 <li><a href="use_part.htm">Previous</a>
 <li><a href="index.html">Contents</a>
 <li><a href="ix.htm">Index</a>
 <li><a href="using.htm">Next</a>
</ul>

<h1>Mozilla LDAP C SDK Programmer's Guide</h1>
<h2>Chapter 4 - Writing an LDAP Client</h2>

<p>This chapter describes the general process of writing an LDAP 
client. The chapter covers the procedures for connecting to an LDAP 
server, authenticating, requesting operations, and disconnecting 
from the server.</p>

<p>The chapter includes the following sections:</p>

<ul>
 <li><a href="writing.htm#overview_design">Overview: Designing an LDAP Client</a>
 <li><a href="writing.htm#initialize_ldap_session">Initializing an LDAP Session</a>
 <li>
  <a href="writing.htm#bind_auth_server">Binding and Authenticating to an LDAP Server</a>
 <li><a href="writing.htm#perform_ldap_operations">Performing LDAP Operations</a>
 <li><a href="writing.htm#close_connection_server">Closing the Connection to the Server</a>
</ul>

<p>The next chapter, <a href="using.htm">Chapter 5 - Using the LDAP 
API</a> also includes important information on API functions.</p>

<h3 id="overview_design">Overview: Designing an LDAP Client</h3>

<p>With the Mozilla LDAP C SDK, you can write a new application or 
enable an existing application to interact with an LDAP server. The 
following procedure outlines the typical process of communicating 
with an LDAP server. Follow these steps when writing your LDAP client:</p>

<ol>
 <li>
  Initialize an LDAP session. (See 
  <a href="writing.htm#initialize_ldap_session">"Initializing an LDAP Session"</a> for 
  details.)
  <p></p>
  Set any preferences that you want applied to all LDAP sessions for 
  your client (see <a href="writing.htm#set_pref">"Setting 
  Preferences"</a> for details). If you intend to use any of the 
  LDAPv3 features (such as controls or operations), specify the LDAP 
  version of your client, as detailed in 
  <a href="writing.htm#spec_client_version">"Specifying the LDAP Version of Your 
  Client"</a> (the default LDAP version used by the Mozilla LDAP C 
  SDK is version 2).
 <li>
  If necessary, bind to the LDAP server. (See 
  <a href="writing.htm#bind_auth_server">"Binding and Authenticating to an LDAP 
  Server"</a> for details.)
 <li>
  Perform LDAP operations, such as searching the directory or 
  modifying entries in the directory. (See 
  <a href="writing.htm#perform_ldap_operations">"Performing LDAP Operations"</a> for 
  details.)
 <li>
  When you are done, close the connection to the LDAP server. (See 
  <a href="writing.htm#close_connection_server">"Closing the Connection to the 
  Server"</a> for details.)
</ol>

<p>The following is a simple example of an LDAP client that requests 
an LDAP search operation from a server. The client connects to the 
LDAP server running on the local machine at port 389, searches the 
directory for entries with the last name "Jensen" 
("<code>sn=Jensen</code>"), and prints out the DNs of any matching 
entries.</p>

<p><strong>Code Example 4-1 - An LDAP search operation</strong></p>

<pre>#include &lt;stdio.h&gt;
#include "ldap.h"

/* Specify the search criteria here. */
#define HOSTNAME "localhost"
#define PORTNUMBER 389
#define BASEDN "dc=example,dc=com"
#define SCOPE LDAP_SCOPE_SUBTREE
#define FILTER "(sn=Jensen)"

int
main( int argc, char **argv )
{
  LDAP          *ld;
  LDAPMessage   *result, *e;
  char          *dn;
  int           version, rc;
  /* Print out an informational message. */
  printf( "Connecting to host %s at port %d...\n\n", HOSTNAME, 
    PORTNUMBER );

  /* STEP 1: Get a handle to an LDAP connection and 
    set any session preferences. */
  if ( (ld = ldap_init( HOSTNAME, PORTNUMBER )) == NULL ) {
    perror( "ldap_init" );
    return( 1 );
  }

  /* Use the LDAP_OPT_PROTOCOL_VERSION session preference to specify 
    that the client is an LDAPv3 client. */
  version = LDAP_VERSION3;
  ldap_set_option( ld, LDAP_OPT_PROTOCOL_VERSION, &amp;version );

  /* STEP 2: Bind to the server. 
    In this example, the client binds anonymously to the server
    (no DN or credentials are specified). */
  rc = ldap_simple_bind_s( ld, NULL, NULL );
  if ( rc != LDAP_SUCCESS ) {
    fprintf(stderr, "ldap_simple_bind_s: %s\n", ldap_err2string(rc));
    return( 1 );
  }
  
  /* Print out an informational message. */
  printf( "Searching the directory for entries\n" 
    " starting from the base DN %s\n" 
    " within the scope %d\n"
    " matching the search filter %s...\n\n", 
    BASEDN, SCOPE, FILTER );

  /* STEP 3: Perform the LDAP operations. 
    In this example, a simple search operation is performed. 
    The client iterates through each of the entries returned and 
    prints out the DN of each entry. */
  rc = ldap_search_ext_s( ld, BASEDN, SCOPE, FILTER, NULL, 0, 
    NULL, NULL, NULL, 0, &amp;result );
  if ( rc != LDAP_SUCCESS ) {
    fprintf(stderr, "ldap_search_ext_s: %s\n", ldap_err2string(rc));
    return( 1 );
  }
  for ( e = ldap_first_entry( ld, result ); e != NULL;
      e = ldap_next_entry( ld, e ) ) {
    if ( (dn = ldap_get_dn( ld, e )) != NULL ) {
      printf( "dn: %s\n", dn );
      ldap_memfree( dn );
    }
  }
  ldap_msgfree( result );

  /* STEP 4: Disconnect from the server. */
  ldap_unbind( ld );
  return( 0 );
}
...</pre>

<p>The rest of this chapter explains how to initialize a session, 
authenticate your client, perform LDAP operations, and disconnect 
from the LDAP server.</p>

<h3 id="initialize_ldap_session">Initializing an LDAP Session</h3>

<p>Before you can connect to an LDAP server, you need to initialize 
an LDAP session. As part of this process, you create an 
<code><a href="datatype.htm#LDAP">LDAP</a></code> structure, which 
contains information about the LDAP server and the LDAP session. You 
need to pass this <code><a href="datatype.htm#LDAP">LDAP</a></code> 
structure (usually as a pointer) to all subsequent LDAP API 
functions to identify the LDAP server that you are working with.</p>

<p>The following sections explain how to initialize an LDAP session 
with a server and how to specify session preferences:</p>

<ul>
 <li><a href="writing.htm#specify_single_server">Specifying a Single LDAP Server</a>
 <li><a href="writing.htm#specify_server_list">Specifying a List of LDAP Servers</a>
 <li><a href="writing.htm#set_pref">Setting Preferences</a>
</ul>

<p>An example of initializing an LDAP session is also provided. See 
<a href="writing.htm#example_init_session">"Examples of Initializing an LDAP 
Session."</a></p>

<p><strong>Note:</strong></p>
<p>If you plan to connect to the LDAP server over a Secure Sockets 
Layer (SSL), the procedure for initializing an LDAP session differs. 
For details, see <a href="ssl.htm">Chapter 12 - Connecting 
Over SSL</a>.</p>

<h3 id="specify_single_server">Specifying a Single LDAP Server</h3>

<p>To initialize the LDAP session, call the 
<code><a href="function.htm#init">ldap_init()</a></code> function. 
Pass the host name and port number of your LDAP server as arguments 
to this function.</p>

<p>If the server is using the default port for the LDAP protocol 
(port 389), you can pass <code>LDAP_PORT</code> as the value of the 
<code>port</code> parameter. For example:</p>

<pre>...
LDAP *ld
...
ld = ldap_init( "directory.example.com", LDAP_PORT );</pre>

<p>If successful, the 
<code><a href="function.htm#init">ldap_init()</a></code> function 
returns a <em>connection handle</em>, which is a pointer to an 
<code><a href="datatype.htm#LDAP">LDAP</a></code> structure that 
contains information about the connection to the LDAP server. You 
need to pass this pointer to the LDAP API functions for connecting, 
authenticating, and performing LDAP operations on a server.</p>

<p>For example, when you call a function to search the directory, 
you need to pass the connection handle as a parameter. The 
connection handle provides context for the connection.</p>

<h3 id="specify_server_list">Specifying a List of LDAP Servers</h3>

<p>When initializing the LDAP session, you can specify a list of 
LDAP servers that you want to attempt to connect to. If the first 
LDAP server in the list does not respond, the client will attempt to 
connect to the next server in the list.</p>

<p>To specify a list of LDAP servers, pass a space-delimited list of 
the host names as the first argument to the 
<code><a href="function.htm#init">ldap_init()</a></code> function. 
For example:</p>

<pre>...
LDAP *ld
...
ld = ldap_init( "ld1.example.com ld2.example.com
  ld3.example.com", LDAP_PORT );</pre>

<p>In the example above, the LDAP client will attempt to connect to 
the LDAP server on <code>ld1.example.com</code>, port 389. If that 
server does not respond, the client will attempt to connect to the 
LDAP server on <code>ld2.iplaent.com</code>, port 389. If that 
server does not respond, the client will use the server on 
<code>ld3.example.com</code>, port 389.</p>

<p>If any of the servers do not use the default port specified as 
the second argument to 
<code><a href="function.htm#init">ldap_init()</a></code>, use the 
<code><em>host</em></font>:<code><em>port</em></font> format to 
specify the server name. For example:</p>

<pre>...
LDAP *ld
...
ld = ldap_init( "ld1.example.com ld2.example.com:38900",
  LDAP_PORT );</pre>

<p>In the example above, the LDAP client will attempt to connect to 
the LDAP server on <code>ld1.</code>example<code>.com</code>, port 
389. If that server does not respond, the client will attempt to 
connect to the LDAP server on <code>ld2.example.com</code>, port 
38900.</p>

<h3 id="set_pref">Setting Preferences</h3>

<p>To get or set the value of a preference, call the 
<code><a href="function.htm#get-option">ldap_get_option()</a></code> 
function or the 
<code><a href="function.htm#set-option">ldap_set_option()</a></code> 
function.</p>

<p>Both functions pass two parameters (in addition to the 
<code>ld</code> parameter, which represents the connection to the 
server):</p>

<ul>
 <li>
  An <code>option</code> parameter that identifies the option that 
  you want to get or set.
 <li>
  A <code>value</code> parameter that is either a pointer to a place 
  to put the value that you are getting or a pointer to the value 
  that you are setting.
</ul>

<p>Note that you can set a preference for all connections created by 
passing <code>NULL</code> instead of an 
<a href="datatype.htm#LDAP">LDAP</a> structure as the first argument.</p>

<p>For a complete list of the options and values you can get and 
set, see the documentation on the 
<code><a href="function.htm#set-option">ldap_set_option()</a></code> 
function.</p>

<p>Some of these preferences are described in the sections below:</p>

<ul>
 <li><a href="writing.htm#set_restart_pref">Setting the Restart Preference</a>
 <li><a href="writing.htm#spec_client_version">Specifying the LDAP Version of Your Client</a>
</ul>

<h4 id="set_restart_pref">Setting the Restart Preference</h4>

<p>If communication with the LDAP server is interrupted, the result 
code <code>LDAP_SERVER_DOWN</code> is returned by your client. If 
you want your client to continue to attempt to communicate with the 
server, you can set the <code>LDAP_OPT_RECONNECT</code> preference 
for the session. If your connection is lost and this option is set, 
the application will attempt another bind using the same 
authentication to reestablish the connection.</p>

<p>Call the <code>ldap_set_option()</code> function and pass 
<code>LDAP_OPT_RECONNECT</code> as the value of the 
<code>option</code> parameter.</p>

<ul>
 <li>
  If you want the client to resume LDAP I/O operations automatically, 
  set the <code>optdata</code> parameter to <code>LDAP_OPT_ON</code> 
  (this specifies that the same connection handle can be used to 
  reconnect to the server).
 <li>
  If you do not want the client to resume I/O operations, set the 
  <code>optdata</code> parameter to <code>LDAP_OPT_OFF</code> 
  (specifies that you want to create a new connection handle to 
  connect to the server).
</ul>

<p>By default, this option is set to <code>LDAP_OPT_OFF</code>. Both 
<code>LDAP_OPT_OFF</code> and <code>LDAP_OPT_ON</code> are cast to 
<code>(void *)</code>. You can pass these parameters directly to the 
function. For example:</p>

<pre>...
ldap_set_option( ld, LDAP_OPT_RECONNECT, LDAP_OPT_ON );
...</pre>

<h4 id="spec_client_version">Specifying the LDAP Version of Your Client</h4>

<p>If you plan to call API functions that make use of LDAPv3 
features, you should set the protocol version of your client to 
LDAPv3. (By default, clients built with the Mozilla LDAP C SDK 
identify themselves to LDAP servers as LDAPv2 clients.)</p>

<p>To specify the LDAP version supported by your client, call the 
<code><a href="function.htm#set-option">ldap_set_option()</a></code> 
function and set the <code>LDAP_OPT_PROTOCOL_VERSION</code> option 
to the value <code>3</code>. For example:</p>

<pre>...
version = LDAP_VERSION3;
ldap_set_option( ld, LDAP_OPT_PROTOCOL_VERSION, &amp;version );
...</pre>

<p>After setting this option, your client can authenticate or 
<strong>bind</strong> to the server (see 
<a href="writing.htm#bind_auth_server">"Binding and Authenticating to an LDAP 
Server"</a> for details). As part of the process of binding to the 
server, your client sends the supported LDAP version number to the 
server. This allows the server to determine whether or not to enable 
use of LDAPv3 features.</p>

<p>Note that the LDAPv3 protocol allows you to perform LDAP 
operations without first binding to the server. An LDAPv3 server 
will assume that the client is LDAPv3 compliant if the client issues 
non-bind operations before is issues a bind.</p>

<h3 id="example_init_session">Examples of Initializing an LDAP Session</h3>

<p>The following section of code initializes a session with an LDAP 
server. The example specifies a list of LDAP servers to try: 
<code>ldap.</code>example<code>.com:389</code> and 
<code>directory.</code>example<code>.com:3890</code>. The example 
also sets a session preference that identifies the client as an 
LDAPv3 client.</p>

<p>
 <strong>Code Example 4-2 - Initializing an LDAP session</strong>
</p>

<pre>#include &lt;stdio.h&gt;
#include &lt;ldap.h&gt;
...
LDAP *ld;
int ldap_default_port, version;

/* Specify list of LDAP servers that you want to try connecting to. */
char *ldap_host = "ldap.example.com directory.example.com:3890";

/* If the LDAP server is running on the standard LDAP port (port 389), 
 * you can use LDAP_PORT to identify the port number. */
ldap_default_port = LDAP_PORT;
...
/* Initialize the session with the LDAP servers. */
if ( ( ld = ldap_init( ldap_host, ldap_default_port ) ) == NULL ) { 
  perror( "ldap_init" );
  return( 1 );
}

/* Specify the LDAP version supported by the client. */
version = LDAP_VERSION3;
ldap_set_option( ld, LDAP_OPT_PROTOCOL_VERSION, &amp;version );

... 
/* Subsequent API calls pass ld as an argument to identify the LDAP server. */

...</pre>

<p>After you initialize a session with an LDAP server, you can set 
session options and connect and authenticate to the LDAP server. 
(Note that the 
<code><a href="function.htm#init">ldap_init()</a></code> function 
does not connect to the LDAP server right away.)</p>

<h3 id="bind_auth_server">Binding and Authenticating to an LDAP Server</h3>

<p>When connecting to the LDAP server, your client may need to send 
a bind operation request to the server. This is also called 
<em>binding to the server</em>.</p>

<p>An LDAP bind request contains the following information:</p>

<ul>
 <li>The LDAP version of the client.
 <li>The DN that the client is attempting to authenticate as.
 <li>The method of authentication that should be used.
 <li>The credentials to be used for authentication.
</ul>

<p>Your client should send a bind request to the server in the 
following situations:</p>

<ul>
 <li>
  You want to authenticate to the server.
  <p></p>
  For example, you may want to add or modify entries in the 
  directory, which requires you to authenticate as a user with 
  certain access privileges.
 <li>
  You are connecting to an LDAPv2 server.
  <p></p>LDAPv2 servers typically require clients to bind before any 
  operations can be performed.
</ul>

<p>LDAP clients can also bind as an anonymous clients to the server 
(for example, the LDAP server may not require authentication if your 
client is just searching the directory).</p>

<p>This chapter explains how to set up your client to bind to an 
LDAP server. Topics covered here include:</p>

<ul>
 <li><a href="writing.htm#understand_auth_method">Understanding Authentication Methods</a>
 <li><a href="writing.htm#use_simple_auth">Using Simple Authentication</a>
 <li><a href="writing.htm#bind_anon">Binding Anonymously</a>
</ul>

<h3 id="understand_auth_method">Understanding Authentication Methods</h3>

<p>When binding to an LDAP server, you can use a number of different 
methods to authenticate your client:</p>

<ul>
 <li>
  <strong>Simple authentication.</strong> With simple 
  authentication, your clients provides the distinguished name of 
  the user and the user's password to the LDAP server.
  <p></p>
  You can also use this method to bind as an anonymous client by 
  providing <code>NULL</code> values as the user's distinguished 
  name and password (as described in 
  <a href="writing.htm#bind_anon">"Binding Anonymously"</a>).
 <li>
 <strong>Certificate-based client authentication (over SSL).</strong> 
  With certificate-based client authentication, your client sends its 
  certificate to the LDAP server. The certificate identifies your 
  LDAP client.
  <p></p>
  For more information on using certificate-based client 
  authentication, see <a href="ssl.htm">Chapter 12 - Connecting 
  Over SSL</a>.
 <li>
  <strong>Simple Authentication and Security Layer (SASL).</strong> 
  SASL is described in <em>Simple Authentication and Security Layer 
  (SASL)</em>, RFC 2222. For more information, refer to 
  <a href="preface.htm#additional_information">Where to Find Additional 
  Information</a>. Some LDAPv3 servers (including the Netscape 
  Directory Server 6.0 and later) support authentication through SASL.
  <p></p>
  For more information on using SASL mechanisms for authentication, 
  see <a href="sasl.htm">Chapter 13 - Using SASL Authentication</a>.
</ul>

<h3 id="use_simple_auth">Using Simple Authentication</h3>

<p>If you plan to use simple authentication, call one of the 
following functions:</p>

<ul>
 <li>
  Call the synchronous 
  <code><a href="function.htm#simple-bind-s">ldap_simple_bind_s()</a></code> 
  function if you want to wait for the bind operation to complete 
  before the function returns. (See 
  <a href="writing.htm#perform_sync_auth">"Performing a Synchronous 
  Authentication Operation."</a>)
 <li>
  Call the asynchronous 
  <code><a href="function.htm#simple-bind">ldap_simple_bind()</a></code> 
  function if you do not want to wait for the bind operation to 
  complete. You can perform other work while periodically checking 
  for the results of the bind operation. (See 
  <a href="writing.htm#perform_async_auth">"Performing an Asynchronous 
  Authentication Operation."</a>)
</ul>

<p>Note that if you specify a DN but no password, your client will 
bind to the server anonymously. If you want a <code>NULL</code> 
password to be rejected as an incorrect password, you need to write 
code to perform the check before you call the 
<code><a href="function.htm#simple-bind">ldap_simple_bind()</a></code> or 
the <code><a href="function.htm#simple-bind-s">ldap_simple_bind_s()</a></code> 
functions.</p>

<p>If you are binding to the Netscape Directory Server, the server 
may send back special controls to indicate that your password has 
expired or will expire in the near future. For more information on 
these controls, see <a href="controls.htm#use_pwd_policy">"Using Password 
Policy Controls."</a></p>

<p>For more information about the difference between synchronous and 
asynchronous functions, see <a href="using.htm#call_sync_async_function">"Calling 
Synchronous and Asynchronous Functions."</a></p>

<h4 id="perform_sync_auth">Performing a Synchronous Authentication Operation</h4>

<p>If you want to wait for the bind operation to complete before 
continuing, call the 
<code><a href="function.htm#simple-bind-s">ldap_simple_bind_s()</a></code> 
function. This function returns <code>LDAP_SUCCESS</code> if the 
operation successfully completed or an LDAP result code if a problem 
occurred. (See the documentation for this function for a list of 
possible result codes returned.)</p>

<p>If you specify a DN but no password, your client will bind to the 
server anonymously. If you want a <code>NULL</code> password to be 
rejected as an incorrect password, you need to write code to perform 
the check before you call the 
<code><a href="function.htm#simple-bind-s">ldap_simple_bind_s()</a></code> 
function.</p>

<p>The following section of code uses the synchronous 
<code>ldap_simple_bind_s()</code> function to authenticate the user 
Barbara Jensen to the LDAP server. (For an example of binding anonymously, 
see <a href="writing.htm#bind_anon">"Binding Anonymously."</a>)</p>

<p>
 <strong>Code Example 4-3 - Synchronous authentication</strong>
</p>

#include &lt;stdio.h&gt;
#include "ldap.h"

/* Change these as needed. */
#define HOSTNAME "localhost"
#define PORTNUMBER LDAP_PORT
#define BIND_DN "uid=bjensen,ou=People,dc=example,dc=com"
#define BIND_PW "hifalutin"

LDAP      *ld;
int      rc;
/* Get a handle to an LDAP connection. */
if ( (ld = ldap_init( HOSTNAME, PORTNUMBER )) == NULL ) {
    perror( "ldap_init" );
    return( 1 );
}

/* Print out an informational message. */
printf( "Binding to server %s:%d\n", HOSTNAME, PORTNUMBER );
printf( "as the DN %s ...\n", BIND_DN );

/* Bind to the LDAP server. */
rc = ldap_simple_bind_s( ld, BIND_DN, BIND_PW );
if ( rc != LDAP_SUCCESS ) {
  fprintf(stderr, "ldap_simple_bind_s: %s\n\n", ldap_err2string(rc));
  return( 1 );
} else {
  printf( "Bind operation successful.\n" );
}

...
/* If you want, you can perform LDAP operations here. */
...

/* Disconnect from the server when done. */
ldap_unbind( ld );
return( 0 );
...</pre>

<h4 id="perform_async_auth">Performing an Asynchronous Authentication Operation</h4>

<p>If you want to perform other work (in parallel) while waiting for 
the bind operation to complete, call the 
<code><a href="function.htm#simple-bind">ldap_simple_bind()</a></code> 
function. This function sends an LDAP bind request to the server and 
returns a message ID identifying the bind operation.</p>

<p>If you specify a DN but no password, your client will bind to the 
server anonymously. If you want a <code>NULL</code> password to be 
rejected as an incorrect password, you need to write code to perform 
the check before you call the 
<code><a href="function.htm#simple-bind">ldap_simple_bind()</a></code> 
function.</p>

<p>You can check to see if your client has received the results of 
the bind operation from the server by calling the 
<code><a href="function.htm#result">ldap_result()</a></code> function 
and passing it the message ID.</p>

<p>If your client has received the results, the 
<code>ldap_result()</code> function passes back the results of the 
bind operation in an 
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure. 
To get error information from this structure, you can pass it to the 
<code><a href="function.htm#parse-result">ldap_parse_result()</a></code> 
function.</p>

<p>The <code>ldap_parse_result()</code> function gets the LDAP 
result code of the operation and any error messages sent back from 
the server. This function also retrieves any controls sent back from 
the server.</p>

<p>(Netscape Directory Server may return a control if the user's 
password has expired or will expire in the near future. For more 
information, see <a href="controls.htm#use_pwd_policy">"Using Password Policy 
Controls."</a>)</p>

<p>The following section of code uses the asynchronous 
<code>ldap_simple_bind()</code> function to authenticate the user 
Barbara Jensen to the LDAP server. (For an example of binding 
anonymously, see <a href="writing.htm#bind_anon">"Binding 
Anonymously."</a>)</p>

<p>
 <strong>Code Example 4-4 - Asynchronous authentication</strong>
</p>


<pre>#include &lt;stdio.h&gt;
#include "ldap.h"

void do_other_work();
int global_counter = 0;
...

#define HOSTNAME "localhost"
#define PORTNUMBER LDAP_PORT
#define BIND_DN "uid=bjensen,ou=People,dc=example,dc=com"
#define BIND_PW "hifalutin"

...
LDAP            *ld;
LDAPMessage     *res;
int             msgid = 0, rc = 0, parse_rc = 0, finished = 0;
char            *matched_msg = NULL, *error_msg = NULL;
char            **referrals;
LDAPControl     **serverctrls;
struct timeval  zerotime;
  
/* Specify the timeout period for ldap_result(), 
   which specifies how long the function should block when waiting 
   for results from the server. */
zerotime.tv_sec = zerotime.tv_usec = 0L;

/* Get a handle to an LDAP connection. */
if ( (ld = ldap_init( HOSTNAME, PORTNUMBER )) == NULL ) {
  perror( "ldap_init" );
  return( 1 );
}

/* Print out an informational message. */
printf( "Binding to server %s:%d\n", HOSTNAME, PORTNUMBER );
printf( "as the DN %s ...\n", BIND_DN );

/* Send an LDAP bind request to the server. */
msgid = ldap_simple_bind( ld, BIND_DN, BIND_PW );

/* If the returned message ID is less than zero, an error occurred. */
if ( msgid &lt; 0  ) {
  rc = ldap_get_lderrno( ld, NULL, NULL );
  fprintf(stderr, "ldap_simple_bind : %s\n", ldap_err2string(rc));
  ldap_unbind( ld );
  return( 1 );
}

/* Check to see if the bind operation completed. */
while ( !finished ) {
  rc = ldap_result( ld, msgid, 0, &amp;zerotime, &amp;res );
  switch ( rc ) {
  /* If ldap_result() returns -1, error occurred. */
  case -1:
    rc = ldap_get_lderrno( ld, NULL, NULL );
    fprintf( stderr, "ldap_result: %s\n", ldap_err2string( rc ) );
    ldap_unbind( ld );
    return ( 1 );

    /* If ldap_result() returns 0, the timeout (specified by the 
      timeout argument) has been exceeded before the client received 
      the results from the server. Continue calling ldap_result() 
      to poll for results from the server. */
  case 0:
    break;

  default:
    /* The client has received the result of the bind operation. */
    finished = 1;

    /* Parse this result to determine if the operation was successful. 
      Note that a non-zero value is passed as the last parameter, 
      which indicates that the LDAPMessage structure res should be 
      freed when done.  (No need to call ldap_msgfree().) */
    parse_rc = ldap_parse_result( ld, res, &amp;rc, &amp;matched_msg, 
      &amp;error_msg, &amp;referrals, &amp;serverctrls, 1 );
    if ( parse_rc != LDAP_SUCCESS ) {
      fprintf( stderr, "ldap_parse_result: %s\n", 
        ldap_err2string( parse_rc ) );
      ldap_unbind( ld );
      return( 1 );
    }
    /* Check the results of the operation. */
    if ( rc != LDAP_SUCCESS ) {
      fprintf( stderr, "ldap_simple_bind: %s\n", 
        ldap_err2string( rc ) );

      /* If the server sent an additional error message, 
        print it out. */
      if ( error_msg != NULL &amp;&amp; *error_msg != '\0' ) {
        fprintf( stderr, "%s\n", error_msg );
      }

      /* If an entry specified by a DN could not be found, 
        the server may also return the portion of the DN 
        that identifies an existing entry. 
        (See<a href="using.htm#receive_portion_dn_matching_entry">"Receiving the Portion of the DN Matching an Entry"</a>
        for an explanation.) */
      if ( matched_msg != NULL &amp;&amp; *matched_msg != '\0' ) {
        fprintf( stderr, 
          "Part of the DN that matches an existing entry: %s\n", 
          matched_msg );
      }
      ldap_unbind( ld );
      return( 1 );
    } else {
      printf( "Bind operation successful.\n" );
      printf( "Counted to %d while waiting for bind op.\n", 
        global_counter );
    }
    break;
  }
  /* Do other work here while waiting for results from the server. */
  if ( !finished ) {
    do_other_work();
  }
}

...
/* If you want, you can perform LDAP operations here. */
...

/* Disconnect from the server when done. */
ldap_unbind( ld );
return( 0 );
...
/* Function that does work while waiting for results from the server. */
void do_other_work() {
  global_counter++;
}
...</pre>

<h3 id="bind_anon">Binding Anonymously</h3>

<p>In some cases, you may not need to authenticate to the LDAP 
server. For example, if you are writing a client to search the 
directory (and if users don't need special access permissions to 
search), you might not need to authenticate before performing the 
search operation.</p>

<p>With LDAPv2, the client is required to send a bind request, even 
when binding anonymously (binding without specifying a name or 
password). With LDAPv3, the client is no longer required to bind to 
the server if the client does not need to authenticate.</p>

<p>To bind as an anonymous user, call 
<code><a href="function.htm#simple-bind">ldap_simple_bind()</a></code> or 
<code><a href="function.htm#simple-bind-s">ldap_simple_bind_s()</a></code>, 
and pass <code>NULL</code> values for the <code>who</code> and 
<code>passwd</code> parameters. For example:</p>

<pre>...
rc = ldap_simple_bind_s( ld, NULL, NULL );
...</pre>

<h3 id="perform_ldap_operations">Performing LDAP Operations</h3>

<p>Once you initialize a session with an LDAP server and complete 
the authentication process, you can perform LDAP operations, such as 
searching the directory, adding new entries, updating existing 
entries, and removing entries (provided the server's access control 
allows these operations).</p>

<p>To perform LDAP operations, call these API functions:</p>

<ul>
 <li>
  To search for entries in the directory, call 
  <code><a href="function.htm#search-ext">ldap_search_ext()</a></code> or 
  <code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code>. 
  (See <a href="search.htm">Chapter 6 - Searching the 
  Directory</a> for details.)
 <li>
  To determine whether or not an attribute contains a specified 
  value, call 
  <code><a href="function.htm#compare-ext">ldap_compare_ext()</a></code> 
  or <code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code>. 
  (See <a href="compare.htm#compare_value_attribute">"Comparing the Value of an 
  Attribute"</a> for details.)
 <li>
  To add entries to the directory, call 
  <code><a href="function.htm#add-ext">ldap_add_ext()</a></code> or 
  <code><a href="function.htm#add-ext-s">ldap_add_ext_s()</a></code>. 
  (See <a href="addmod.htm#add-new-entry">"Adding a New Entry"</a> for 
  details.)
 <li>
  To modify entries in the directory, call 
  <code><a href="function.htm#modify-ext">ldap_modify_ext()</a></code> or 
  <code><a href="function.htm#modify-ext-s">ldap_modify_ext_s()</a></code>. 
  (See <a href="addmod.htm#modify-entry">"Modifying an Entry"</a> for 
  details.)
 <li>
  To delete entries from the directory, call 
  <code><a href="function.htm#delete-ext">ldap_delete_ext()</a></code> or 
  <code><a href="function.htm#delete-ext-s">ldap_delete_ext_s()</a></code>. 
  (See <a href="addmod.htm#delete-entry">"Deleting an Entry"</a> for 
  details.)
 <li>
  To change the DNs of entries in the directory, call 
  <code><a href="function.htm#rename">ldap_rename()</a></code> or 
  <code><a href="function.htm#rename-s">ldap_rename_s()</a></code>. 
  (See <a href="addmod.htm#change-dn-entry">"Changing the DN of an Entry"</a> 
  for details.)
</ul>

<p>Most LDAP operations can be performed synchronously or 
asynchronously. The functions with names ending in <code>_s</code> 
are synchronous functions, and the remaining functions are 
asynchronous functions. (For more information on the distinction 
between calling synchronous and asynchronous functions, see 
<a href="using.htm#call_sync_async_function">"Calling Synchronous and Asynchronous 
Functions."</a>)</p>

<h3 id="close_connection_server">Closing the Connection to the Server</h3>

<p>When you have finished performing all necessary LDAP operations, 
you need to close the connection to the LDAP server.</p>

<p>To close a connection to an LDAP server, call one of the 
following functions:</p>

<ul>
 <li><code><a href="function.htm#unbind">ldap_unbind()</a></code>
 <li><code><a href="function.htm#unbind-s">ldap_unbind_s()</a></code>
 <li><code><a href="function.htm#unbind-ext">ldap_unbind_ext()</a></code>
</ul>

<p>Both <code>ldap_unbind()</code> and <code>ldap_unbind_s()</code> 
are synchronous functions. These functions are identical; they use 
different names so that each authentication function 
(<code>ldap_simple_bind()</code> and <code>ldap_simple_bind_s()</code>) 
has a corresponding function for closing the server connection.</p>

<p>After you close the connection, you can no longer use the 
<a href="datatype.htm#LDAP">LDAP</a> structure. Calling any of the 
unbind functions frees the <code>LDAP</code> structure from memory.</p>

<p>The following code closes the current connection with the LDAP 
server:</p>

<p>
 <strong>Code Example 4-5 - Closing an LDAP server connection</strong>
</p>

<pre>#include "ldap.h"
...
LDAP      *ld;
int      rc;
...
/* After completing your LDAP operations with the server, close 
  the connection. */ 
rc = ldap_unbind( ld );
if ( rc != LDAP_SUCCESS ) {
  fprintf( stderr, "ldap_unbind: %s\n", ldap_err2string( rc ) );
}
...</pre>

<p>The <code>ldap_unbind_ext()</code> function allows you to 
explicitly include both server and client controls in your unbind 
request. However, note that since there is no server response to an 
unbind request, there is no way to receive a response from a server 
control that is included with your unbind request.</p>




<hr class="hide">
</div>
</div>
<div id="footer">
<ul>
<li><a href="../../sitemap.html">Site Map</a></li>
<li><a href="../../security/">Security Updates</a></li>
<li><a href="../../contact/">Contact Us</a></li>
<li><a href="../../foundation/donate.html">Donate</a></li>
</ul>
<p class="copyright">
Portions of this content are &copy; 1998&#8211;2009 by individual mozilla.org
contributors; content available under a Creative Commons license | <a
href="http://www.mozilla.org/foundation/licensing/website-content.html">Details</a>.</p>
<p>
<span>Last modified March 16,  2005</span>
<span><a href="http://bonsai-www.mozilla.org/cvslog.cgi?file=mozilla-org/html/directory/csdk-docs/writing.htm&amp;rev=&amp;root=/www/">Document History</a></span>
</p>
</div>
</div>
</body>
</html>
