<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<link rel="top" title="Home" href="http://www.mozilla.org/">
<link rel="stylesheet" type="text/css" href="../../css/print.css"  media="print">
<link rel="stylesheet" type="text/css" href="../../css/base/content.css"  media="all">
<link rel="stylesheet" type="text/css" href="../../css/cavendish/content.css" title="Cavendish" media="screen">
<link rel="stylesheet" type="text/css" href="../../css/base/template.css"  media="screen">
<link rel="stylesheet" type="text/css" href="../../css/cavendish/template.css" title="Cavendish" media="screen">
<link rel="icon" href="../../images/mozilla-16.png" type="image/png">

 <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
 <title>Mozilla LDAP C SDK: Chapter 14 - Working with LDAP Controls</title>
<script src="../../__utm.js" type="text/javascript"></script>
</head>
<body id="www-mozilla-org" class="deepLevel">
<div id="container">
<p class="important">You are currently viewing a snapshot of www.mozilla.org taken on April 21, 2008. Most of this content is
highly out of date (some pages haven't been updated since the project began in 1998) and exists for historical purposes only.  If
there are any pages on this archive site that you think should be added back to www.mozilla.org, please <a
href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Websites&component=www.mozilla.org">file a bug</a>.</p>
<p class="skipLink"><a href="#mainContent" accesskey="2">Skip to main content</a></p>
<div id="header">
<h1><a href="/" title="Return to home page" accesskey="1">Mozilla</a></h1>
<ul>
<li id="menu_aboutus"><a href="../../about/" title="Getting the most out of your online experience">About</a></li>
<li id="menu_developers"><a href="../../developer/" title="Using Mozilla's products for your own applications">Developers</a></li>
<li id="menu_store"><a href="http://store.mozilla.org/?r=mozorg1" title="Shop for Mozilla products on CD and other merchandise">Store</a></li>
<li id="menu_support"><a href="../../support/" title="Installation, trouble-shooting, and the knowledge base">Support</a></li>
<li id="menu_products"><a href="../../products/" title="All software Mozilla currently offers">Products</a></li>
</ul>
<form id="searchbox_002443141534113389537:ysdmevkkknw" action="http://www.google.com/cse" title="mozilla.org Search">
<div>
<label for="q" title="Search mozilla.org's sites">search mozilla:</label>
<input type="hidden" name="cx" value="002443141534113389537:ysdmevkkknw">
<input type="hidden" name="cof" value="FORID:0">
<input type="text" id="q" name="q" accesskey="s" size="30">
<input type="submit" id="submit" value="Go">
</div>
</form>
</div>
<hr class="hide">
<div id="mBody">
<div id="side">

<ul id="nav">
<li><a title="Roadmap" href="../../roadmap.html"><strong> Roadmap</strong></a></li>
<li><a title="Projects" href="../../projects/"><strong> Projects</strong></a></li>
<li><a title="For developers" href="../../developer/"><strong> Coding</strong></a>
<ul>
<li><a title="Module Owners" href="../../owners.html"> Module Owners</a></li>
<li><a title="Hacking" href="../../hacking/"> Hacking</a></li>
<li><a title="Get the Source" href="http://developer.mozilla.org/en/docs/Download_Mozilla_Source_Code"> Get the Source</a></li>
<li><a title="Building Mozilla" href="http://developer.mozilla.org/en/docs/Build_Documentation"> Build It</a></li>
</ul>
</li>
<li><a title="Testing" href="../../quality/"><strong> Testing</strong></a>
<ul>
<li><a title="Downloads of mozilla.org software releases" href="../../download.html"> Releases</a></li>
<li><a title="Latest mozilla builds for testers" href="../../developer/#builds"> Nightly Builds</a></li>
<li><a title="For testers to report bugs" href="https://bugzilla.mozilla.org/"> Report A Problem</a></li>
</ul>
</li>
<li><a title="Tools for mozilla developers" href="../../tools.html"><strong> Tools</strong></a>
<ul>
<li><a title="Bug tracking system for mozilla testers." href="https://bugzilla.mozilla.org/"> Bugzilla</a></li>
<li><a title="Latest status of mozilla builds" href="http://tinderbox.mozilla.org/showbuilds.cgi?tree=Firefox"> Tinderbox</a></li>
<li><a title="Latest checkins" href="http://bonsai.mozilla.org/cvsqueryform.cgi"> Bonsai</a></li>
<li><a title="Source cross reference" href="http://lxr.mozilla.org/seamonkey/"> LXR</a></li>
</ul>
</li>
<li><a title="Frequently Asked Questions." href="../../faq.html"><strong> FAQs</strong></a></li>
</ul>

</div>
<hr class="hide">
<div id="mainContent">





<ul class="snav">
 <li><a href="sasl.htm">Previous</a>
 <li><a href="./">Contents</a>
 <li><a href="ix.htm">Index</a>
 <li><a href="extendop.htm">Next</a>
</ul>

<h1>Mozilla LDAP C SDK Programmer's Guide</h1>
<h2>Chapter 14 - Working with LDAP Controls</h2>

<p>This chapter explains how LDAP controls work and how to use the 
LDAP controls that are supported by the Mozilla LDAP C SDK.</p>

<p>The chapter includes the following sections:</p>

<ul>
 <li><a href="controls.htm#how_ldap_controls_work">How LDAP Controls Work</a></li>
 <li><a href="controls.htm#using_controls">Using Controls in the LDAP API</a></li>
 <li>
  <a href="controls.htm#determine_control_support">Determining the 
  Controls Supported by the Server</a>
 </li>
 <li><a href="controls.htm#use_server_sort_control">Using the Server-Side Sorting Control</a></li>
 <li><a href="controls.htm#use_persist_search">Using the Persistent Search Control</a></li>
 <li>
  <a href="controls.htm#use_entry_notify">Using the Entry Change Notification 
  Control</a>
 </li>
 <li><a href="controls.htm#use_virtual_list">Using the Virtual List View Control</a></li>
 <li><a href="controls.htm#use_manage_dsa">Using the Manage DSA IT Control</a></li>
 <li><a href="controls.htm#use_pwd_policy">Using Password Policy Controls</a></li>
 <li><a href="controls.htm#use_proxy_auth_control">Using the Proxied Authorization Control</a></li>
</ul>

<h3 id="how_ldap_controls_work">How LDAP Controls Work</h3>

<p>The LDAPv3 protocol (documented in RFC 2251, "Lightweight Directory 
Access Protocol (v3)"</a>) allows clients and servers to use controls 
as a mechanism for extending an LDAP operation. A control is a way to 
specify additional information as part of a request and a response.</p>

<p>For example, a client can send a control to a server as part of a 
search request to indicate that the server should sort the search 
results before sending the results back to the client.</p>

<p>Servers can also send controls back to clients. For example, the 
Netscape Directory Server sends a control back to a client during 
the authentication process if the client's password has expired or 
is going to expire.</p>

<p>A control specifies the following information:</p>

<ul>
 <li>
  A unique object identifier (OID), as defined by the creator of 
  this control.
 </li>
 <li>
  An indication of whether or not the control is critical to the 
  operation.
 </li>
 <li>
  Optional data related to the control (for example, for the 
  server-side sorting control, the attributes used for sorting 
  search results).
 </li>
</ul>

<p>The OID identifies the control. If you plan to use a control, you 
need to make sure that the server supports the control. (See 
<a href="controls.htm#determine_control_support">"Determining the 
Controls Supported by the Server"</a> for details.)</p>

<p>When your client includes a control in a request for an LDAP 
operation, the server may respond in one of the following ways:</p>

<ul>
 <li>
  If the server supports this control and if the control is 
  appropriate to the operation, the server should make use of the 
  control when performing the operation.
 </li>
 <li>
  If the server does not support the control type or if the control 
  is not appropriate, the server should do one of the following:
  <ul>
   <li>
    If the control is marked as critical to the operation, the 
    server should not perform the operation and should instead 
    return the result code <code>LDAP_UNAVAILABLE_CRITICAL_EXTENSION</code>.
   </li>
   <li>
    If the control is marked as not critical to the operation, the 
    server should ignore the control and should perform the operation.
   </li>
  </ul>
 </li>
</ul>

<p>Note that servers can also send controls back to clients.</p>

<p>The LDAP API supports two types of controls:</p>

<ul>
 <li>
  Server controls can be included in requests sent by clients and in 
  responses sent by servers.
 <li>
  Client controls affect the behavior of the LDAP API only and are 
  never sent to the server.
 </li>
</ul>

<p>The next section describes how controls are implemented in the 
LDAP API and which functions you can call to create, send, and 
parse data from LDAP controls.</p>

<h3 id="using_controls">Using Controls in the LDAP API</h3>

<p>In the LDAP API, a control is represented by an 
<code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structure:</p>

<pre>
typedef struct ldapcontrol {
  char                *ldctl_oid;
  struct berval       ldctl_value;
  char                ldctl_iscritical;
} LDAPControl;
</pre>

<p>The fields in this structure represent the data in a control:</p>

<ul>
 <li><code>ldctl_oid</code> specifies the OID of the control.</li>
 <li>
  <code>ldctl_value</code> contains a 
  <code><a href="datatype.htm#berval">berval</a></code> structure 
  containing data associated with the control.
 </li>
 <li>
  <code>ldctl_iscritical</code> specifies whether or not the control 
  is critical to the operation (<code>LDAP_OPT_ON</code> indicates 
  that the control is critical, and <code>LDAP_OPT_OFF</code> 
  indicates that the control is not critical).
 </li>
</ul>

<p>For more information on the 
<code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structure, 
see <a href="datatype.htm">Chapter 17 - Data Types and 
Structures</a>.</p>

<p>You can either allocate and create the control yourself, or you 
can call an LDAP API function to create the control. For example, 
you can call the 
<code><a href="function.htm#create-sort-control">ldap_create_sort_control()</a></code> 
function to create a server-sorting control.</p>

<p>To include a control in a request, call one of the LDAPv3 API 
functions (functions with names ending with <code>_ext</code> and 
<code>_ext_s</code>). These functions allow you to pass in an array 
of server controls and an array of client controls.</p>

<p>(You can also include controls in a request by specifying the 
array of controls in the <code>LDAP_OPT_SERVER_CONTROLS</code> 
option. Note, however, that these controls will be sent to the 
server with every request. If the control is specific to a certain 
type of operation, you should use the <code>_ext</code> and 
<code>_ext_s</code> functions instead.)</p>

<p>To retrieve any controls included in a server's response, call 
the <code><a href="function.htm#parse-result">ldap_parse_result()</a></code> 
function. You can then retrieve data from the returned controls 
yourself (by checking the fields of the 
<code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structure) 
or by calling additional API functions (such as the 
<code><a href="function.htm#parse-sort-control">ldap_parse_sort_control()</a></code> 
function).</p>

<p>When you are done working with a control or with an array of 
controls, you should free them from memory by calling the 
<code><a href="function.htm#control-free">ldap_control_free()</a></code> 
function or the 
<code><a href="function.htm#controls-free">ldap_controls_free()</a></code> 
function.</p>

<p>The rest of this chapter explains how to determine which controls 
are supported by an LDAPv3 server and how to use LDAP API functions 
to send and retrieve specific types of controls.</p>

<h3 id="determine_control_support">Determining the Controls Supported By the Server</h3>

<p>According to the LDAPv3 protocol, servers should list any 
controls that they support in the <code>supportedControl</code> 
attribute in the <a href="glossary.htm#root_dse">root DSE</a>. (See 
<a href="srvrinfo.htm#understand_dse">"Understanding DSEs"</a> and 
<a href="srvrinfo.htm#get_root_dse">"Getting the Root DSE"</a> for more 
information.)</p>

<p>The following table lists some of the OIDs for server controls.</p>

<p><strong>Table 14-1 - LDAPv3 Server Controls</strong></p>

<table class="data">
 <tr>
  <th>OID of Control</th>
  <th>Defined Name (in ldap.h)</th>
  <th>Description of Control </th>
 </tr>
 <tr>
  <td>2.16.840.1.113730.3.4.2</td>
  <td><code>LDAP_CONTROL_MANAGEDSAIT</code></td>
  <td>
   "Manage DSA IT" control (see <a href="controls.htm#use_manage_dsa">"Using 
   the Manage DSA IT Control"</a> for details).
  </td>
 </tr>
 <tr>
  <td>2.16.840.1.113730.3.4.3</td>
  <td><code>LDAP_CONTROL_PERSISTENTSEARCH</code></td>
  <td>
   "Persistent search" control (see 
   <a href="controls.htm#use_persist_search">"Using the Persistent 
   Search Control"</a> for details).
  </td>
 </tr>
 <tr>
  <td>2.16.840.1.113730.3.4.4</td>
  <td><code>LDAP_CONTROL_PWEXPIRED</code></td>
  <td>
   "Password expired" control (see <a href="controls.htm#use_pwd_policy">"Using 
   Password Policy Controls"</a> for details).
  </td>
 </tr>
 <tr>
  <td>2.16.840.1.113730.3.4.5</td>
  <td><code>LDAP_CONTROL_PWEXPIRING</code></td>
  <td>
   "Password expiration warning" control (see 
   <a href="controls.htm#use_pwd_policy">"Using Password Policy Controls"</a> 
   for details).
  </td>
 </tr>
 <tr>
  <td>2.16.840.1.113730.3.4.9</td>
  <td><code>LDAP_CONTROL_VLVREQUEST</code></td>
  <td>
   "Virtual list view" control (see <a href="controls.htm#use_virtual_list">"Using 
   the Virtual List View Control"</a> for details).
  </td>
 </tr>
 <tr>
  <td>1.2.840.113556.1.4.473</td>
  <td><code>LDAP_CONTROL_SORTREQUEST</code></td>
  <td>
   "Server-side sorting" control (see 
   <a href="controls.htm#use_server_sort_control">"Using the 
   Server-Side Sorting Control"</a> for details).
  </td>
 </tr>
 <tr>
  <td>2.16.840.1.113730.3.4.12</td>
  <td><code>LDAP_CONTROL_PROXYAUTH</code></td>
  <td>
   "Proxy authorization" control (see <a href="controls.htm#use_proxy_auth_control">"Using 
   the Proxied Authorization Control"</a> for details).
  </td>
 </tr>
</table>


<p>The following example is a simple command-line program that 
searches for the root DSE and prints the values of the supported 
Control attribute.</p>

<p>
 <strong>Code Example  14-1 - Searching the root DSE and outputting 
 the Control attribute</strong>
</p>

<pre>
#include "ldap.h"
static char *usage = "Usage: listctrl -h &lt;hostname&gt; -p &lt;portnumber&gt;\n";

/* Associate OIDs of known controls with descriptions. */
struct oid2desc {
  char  *oid;
  char  *desc;
};
static struct oid2desc oidmap[] = {
  {LDAP_CONTROL_MANAGEDSAIT,    "Manage DSA IT control"},
  {LDAP_CONTROL_SORTREQUEST,    "Server-side sorting control"},
  {LDAP_CONTROL_PERSISTENTSEARCH,   "Persistent search control"},
  {LDAP_CONTROL_VLVREQUEST,    "Virtual list view control"},
  {LDAP_CONTROL_PWEXPIRED,    "Password expired control"},
  {LDAP_CONTROL_PWEXPIRING,    "Password expiration warning control"},
  { NULL, NULL }
};
int
main( int argc, char **argv )
{
  LDAP          *ld;
  LDAPMessage   *result, *e;
  char          *hostname = NULL;
  char          **vals;
  char          *attrs[2];
  int           i, j, c, portnumber = LDAP_PORT, rc;
  LDAPControl   **serverctrls = NULL, **clntctrls = NULL;
  /* Parse the command line arguments. */
  while ( ( c = getopt( argc, argv, "h:p:" ) ) != -1 ) {
    switch ( c ) {
    case 'h':
      hostname = strdup( optarg );
      break;
    case 'p':
      portnumber = atoi( optarg );
      break;
    default:
      printf( "Unsupported option: %c\n", c );
      printf( usage );
      exit( 1 );
    }
  }
  /* By default, connect to localhost at port 389. */
  if ( hostname == NULL || hostname[0] == NULL ) {
      hostname = "localhost";
  }
  /* Initialize the connection. */
  if ( (ld = ldap_init( hostname, portnumber )) == NULL ) {
      perror( "ldap_init" );
      return( 1 );
  }
  /* Set automatic referral processing off. */
  if ( ldap_set_option( ld, LDAP_OPT_REFERRALS, LDAP_OPT_OFF ) 
    != LDAP_SUCCESS ) {
      ldap_perror( ld, "ldap_set_option" );
      return( 1 );
  }
  /* Search for the root DSE and retrieve only the 
    supportedControl attribute. */
  attrs[ 0 ] = "supportedControl";
  attrs[ 1 ] = NULL;
  rc = ldap_search_ext_s( ld, "", LDAP_SCOPE_BASE, "(objectclass=*)", 
    attrs, 0, serverctrls, clntctrls, NULL, NULL, &amp;result );
  /* Check the search results. */
  switch( rc ) {
  /* If successful, the root DSE was found. */
  case LDAP_SUCCESS:
    break;
  /* If the root DSE was not found, the server does not comply
    with the LDAPv3 protocol. */
  case LDAP_PARTIAL_RESULTS:
  case LDAP_NO_SUCH_OBJECT:
  case LDAP_OPERATIONS_ERROR:
  case LDAP_PROTOCOL_ERROR:
    printf( "LDAP server %s:%d returned result code %d (%s).\n"
    "This server does not support the LDAPv3 protocol.\n",
    hostname, portnumber, rc, ldap_err2string( rc ) );
    return( 1 );
    break;
  /* If any other value is returned, an error must have occurred. */
  default:
    ldap_perror( ld, "ldap_search_ext_s" );
    return( 1 );
    break;
  }
  /* Get the root DSE from the results. 
    Since there is only one root DSE, there 
    should be only one entry in the results. */
  e = ldap_first_entry( ld, result ); 
  /* Get and print the values of the supportedControl attribute. */
  if (e != NULL &amp;&amp; 
    (vals = ldap_get_values(ld, e, "supportedControl")) != NULL ) {
    printf( "\nControls Supported by %s:%d\n", hostname, portnumber );
    printf( "==================================================\n" );
    for ( i = 0; vals[i] != NULL; i++ ) {
      printf( "%s\n", vals[i] );
      for ( j = 0; oidmap[j].oid != NULL; j++ ) {
        if ( !strcmp( vals[i], oidmap[j].oid )) {
          printf( "\t%s\n", oidmap[j].desc );
        }
      }
    }
    /* Free the values allocated by ldap_get_values(). */
    ldap_value_free( vals );
    printf( "\n" );
  }
  /* Free memory allocated by ldap_search_ext_s(). */
  ldap_msgfree( result );
  ldap_unbind( ld );
  return( 0 );
}
</pre>

<h3 id="use_server_sort_control">Using the Server-Side Sorting Control</h3>

<p>The control with the OID 1.2.840.113556.1.4.473 (or 
<code>LDAP_CONTROL_SORTREQUEST</code>, as defined in the 
<code>ldap.h</code> header file) is a server-side sorting control. 
When you send a search request with this control to the server, the 
server should sort the results before sending them back to you.</p>

<p>The server-side sorting control is described in RFC 2891: 
<a href="http://www.ietf.org/rfc/rfc2891.txt">www.ietf.org/rfc/rfc2891.txt</a></p>

<p>The following sections explain how to use the server-side sorting control:</p>

<ul>
 <li><a href="controls.htm#spec_sort_order">Specifying the Sort Order</a></li>
 <li><a href="controls.htm#create_control">Creating the Control</a></li>
 <li><a href="controls.htm#perform_search">Performing the Search</a></li>
 <li><a href="controls.htm#interpret_results">Interpreting the Results</a></li>
 <li><a href="controls.htm#example_server_sort">Example of Using the Server-Sorting Control</a></li>
</ul>

<h3 id="spec_sort_order">Specifying the Sort Order</h3>

<p>To specify the sort order of the results, you can call the 
<code><a href="function.htm#create-sort-keylist">ldap_create_sort_keylist()</a></code> 
function. This function creates a sort key list from a string in the 
following format:</p>

<code>[-]&lt; attrname &gt;[:&lt; matching_rule_oid &gt;] ...</code>

<p><code>attrname</code> is the name of the attribute that you want 
to sort by. You can specify a space-delimited list of attribute 
names. <code>matchingruleoid</code> is the optional OID of a 
matching rule that you want to use for sorting. The minus sign 
indicates that the results should be sorted in reverse order for 
that attribute.</p>

<p>For example, the following string specifies that results should 
be sorted by last name ("<code>sn</code>") first in ascending order. 
If multiple entries have the same last name, these entries are 
sorted by first name ("<code>givenname</code>") in descending order:</p>

<code>"sn -givenname"</code>

<p>Passing this string to the 
<code><a href="function.htm#create-sort-keylist">ldap_create_sort_keylist()</a></code> 
function creates a sort key list, which is an array of 
<code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code> 
structures. You can use this to create the server-side sorting 
control.</p>

<h3 id="create_control">Creating the Control</h3>

<p>Next, to create the server-side sorting control, you pass the 
sort key list (the array of 
<code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code> structures) 
to the <code><a href="function.htm#create-sort-control">ldap_create_sort_control()</a></code> 
function.</p>

<p>You can also specify whether or not the control is critical to 
the search operation. If the control is marked as critical and the 
server cannot sort the results, the server should not send back any 
entries. See <a href="controls.htm#interpret_results">"Interpreting the 
Results"</a> for more information on the ramifications of marking 
the control as critical.</p>

<p>The function passes back a newly created sort control, an 
<code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structure, 
which you can include in a search request.</p>

<p>After you call the <code>ldap_create_sort_control()</code> 
function and create the control, you should free the array of 
<code><a href="datatype.htm#LDAPsortkey">LDAPsortkey</a></code> structures 
by calling <code><a href="function.htm#free-sort-keylist">ldap_free_sort_keylist()</a></code>.</p>

<p>When you are done receiving sorted results from the server, you 
should free the 
<code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structure 
by calling <code><a href="function.htm#control-free">ldap_control_free()</a></code>.</p>

<h3 id="perform_search">Performing the Search</h3>

<p>To specify that you want the server to sort the results, add the 
newly created server-sorting control to a 
<code>NULL</code>-terminated array of 
<code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structures 
and pass this array to the 
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code> 
function or the 
<code><a href="function.htm#search-ext-s">ldap_search_ext_s()</a></code> 
function.</p>

<p>The server returns a result for the search operation and a 
response control. The response control indicates the success or 
failure of the sorting. To determine if sorting was successful, do 
the following:</p>

<ol>
 <li>
  Call <code><a href="function.htm#parse-result">ldap_parse_result()</a></code> 
  to parse the result of the search operation and retrieve any 
  response controls sent back from the server.
  <p></p>
  Response controls are passed back in a 
  <code>NULL</code>-terminated array of <code>LDAPControl</code> 
  structures.
 </li>
 <li>
  Pass this array of structures as an argument to 
  <code><a href="function.htm#parse-sort-control">ldap_parse_sort_control()</a></code> 
  to retrieve the LDAP result code for the sorting operation.
  <p></p>
  If the sorting operation fails, the server may also return the 
  name of the attribute that caused the failure. The 
  <code><a href="function.htm#parse-sort-control">ldap_parse_sort_control()</a></code> 
  function also retrieves this name, if available.
 </li>
</ol>

<p>When you are done parsing the array of response controls, you 
should free the array by calling the 
<code><a href="function.htm#controls-free">ldap_controls_free()</a></code> 
function.</p>

<p>The server can return the following result codes that apply to 
the sorting operation.</p>

<p>
 <strong>Table 14-2 - LDAP result codes for sorting search results</strong>
</p>

<table class="data">
 <tr>
  <th>Result Code</th>
  <th>Description</th>
 </tr>
 <tr>
  <td><code>LDAP_SUCCESS</code></td>
  <td>The results were sorted successfully.</td>
 </tr>
 <tr>
  <td><code>LDAP_OPERATIONS_ERROR</code></td>
  <td>An internal server error occurred.</td>
 </tr>
 <tr>
  <td><code>LDAP_TIMELIMIT_EXCEEDED</code></td>
  <td>
   The maximum time allowed for a search was exceeded before the 
   server finished sorting the results.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_STRONG_AUTH_REQUIRED</code></td>
  <td>
   The server refused to send back the sorted search results because 
   it requires you to use a stronger authentication method.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_ADMINLIMIT_EXCEEDED</code></td>
  <td>There are too many entries for the server to sort.</td>
 </tr>
 <tr>
  <td><code>LDAP_NO_SUCH_ATTRIBUTE</code></td>
  <td>The sort key list specifies an attribute that does not exist.</td>
 </tr>
 <tr>
  <td><code>LDAP_INAPPROPRIATE_MATCHING</code></td>
  <td>
   The sort key list specifies a matching rule that is not 
   recognized or appropriate.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_INSUFFICIENT_ACCESS</code></td>
  <td>
   The server did not send the sorted results because the client has 
   insufficient access rights.
  </td>
 </tr>
 <tr>
  <td><code>LDAP_BUSY</code></td>
  <td>The server is too busy to sort the results.</td>
 </tr>
 <tr>
  <td><code>LDAP_UNWILLING_TO_PERFORM</code></td>
  <td>The server is unable to sort the results.</td>
 </tr>
 <tr>
  <td><code>LDAP_OTHER</code></td>
  <td>
   This general result code indicates that the server failed to sort 
   the results for a reason other than the ones listed above.
  </td>
 </tr>
</table>

<h3 id="interpret_results">Interpreting the Results</h3>

<p>The following table lists the kinds of results to expect from the 
LDAP server under different situations.</p>

<p>
 <strong>Table 14-3 - Server responses to sorting controls under 
 different circumstances</strong>
</p>

<table class="data">
 <tr>
  <th>Does the Server Support the Sort Control?</th>
  <th>Is the Sort Control Marked As Critical?</th>
  <th>Other Conditions</th>
  <th>Results from LDAP Server</th>
 </tr>
 <tr>
  <td colspan="1" rowspan="2">No</td>
  <td>Yes</td>
  <td colspan="1" rowspan="2">N/A</td>
  <td>The server does not send back any entries.</td>
 </tr>
 <tr>
  <td>No</td>
  <td>
   The server ignores the sorting control and returns the entries 
   unsorted.
  </td>
 </tr>
 <tr>
  <td colspan="1" rowspan="4">Yes</td>
  <td>Yes</td>
  <td colspan="1" rowspan="2">
   The server cannot sort the results using the specified sort 
   key list.
  </td>
  <td>
   The server does not send back any entries.
   <p></p>
   The server sends back the sorting response control, which 
   specifies the result code of the sort attempt and (optionally) 
   the attribute type that caused the error.
  </td>
 </tr>
 <tr>
  <td>No</td>
  <td>
   The server returns the entries unsorted.
   <p></p>
   The server sends back the sorting response control, which 
   specifies the result code of the sort attempt and (optionally) 
   the attribute type that caused the error.
  </td>
 </tr>
 <tr>
  <td colspan="1" rowspan="2">N/A (may or may not be marked as critical)</td>
  <td>The server successfully sorted the entries.</td>
  <td>
   The server sends back the sorted entries.
   <p></p>
   The server sends back the sorting response control, which 
   specifies the result code of the sort attempt 
   (<code>LDAP_SUCCESS</code>).
  </td>
 </tr>
 <tr>
  <td>The search itself failed (for any reason).</td>
  <td>
   The server sends back a result code for the search operation.
   <p></p>
   The server does not send back the sorting response control.
  </td>
 </tr>
</table>

<h3 id="example_server_sort">Example of Using the Server-Sorting Control</h3>

<p>The following program uses the server-sorting control to get a 
list of all users in the directory, sorted in ascending order by 
last name, then in descending order by first name.</p>

<p>
 <strong>Code Example 14-2 - Applying the server-sorting control</strong>
</p>

<pre>
#include &lt;stdio.h&gt;
#include "ldap.h"
/* Change these as needed. */
#define HOSTNAME "localhost"
#define PORTNUMBER 3890
int
main( int argc, char **argv )
{
  LDAP         *ld;
  LDAPMessage  *result, *e;
  char         *attrfail, *matched = NULL, *errmsg = NULL;
  char         **vals, **referrals;
  int          rc, parse_rc, version;
  unsigned long     rcode;
  LDAPControl       *sortctrl = NULL;
  LDAPControl       *requestctrls[ 2 ];
  LDAPControl       **resultctrls = NULL;
  LDAPsortkey       **sortkeylist;
  /* Get a handle to an LDAP connection */
  if ( (ld = ldap_init( HOSTNAME, PORTNUMBER ) ) == NULL ) {
    perror( "ldap_init" );
    return( 1 );
  }
  version = LDAP_VERSION3;
  ldap_set_option( ld, LDAP_OPT_PROTOCOL_VERSION, &amp;version );
  /* Create a sort key list that specifies the sort order of the results.
     Sort the results by last name first, then by first name. */
  ldap_create_sort_keylist( &amp;sortkeylist, "sn -givenname" );
  /* Create the sort control. */
  rc = ldap_create_sort_control( ld, sortkeylist, 1, &amp;sortctrl );
  if ( rc != LDAP_SUCCESS ) {
    fprintf( stderr, "ldap_create_sort_control: %s\n", ldap_err2string( rc ) );
    ldap_unbind( ld );
    return( 1 );
  }
  requestctrls[ 0 ] = sortctrl;
  requestctrls[ 1 ] = NULL;
  /* Search for all entries in Sunnyvale */
  rc = ldap_search_ext_s( ld, "dc=example,dc=com", LDAP_SCOPE_SUBTREE,
    "(mail=*example.com*)", NULL, 0, requestctrls, NULL, NULL, 0, &amp;result );
  if ( rc != LDAP_SUCCESS ) {
    fprintf( stderr, "ldap_search_ext_s: %s\n", ldap_err2string( rc ) );
    ldap_unbind( ld );
    return( 1 );
  }
  parse_rc = ldap_parse_result( ld, result, &amp;rc, &amp;matched, &amp;errmsg, &amp;referrals, &amp;resultctrls, 0 );
  if ( parse_rc != LDAP_SUCCESS ) {
    fprintf( stderr, "ldap_parse_result: %s\n", ldap_err2string( parse_rc ) );
    ldap_unbind( ld );
    return( 1 );
  }
  if ( rc != LDAP_SUCCESS ) {
    fprintf( stderr, "ldap_search_ext_s: %s\n", ldap_err2string( rc ) );
    if ( errmsg != NULL &amp;&amp; *errmsg != '\0' ) {
      fprintf( stderr, "%s\n", errmsg );
    }
    ldap_unbind( ld );
    return( 1 );
  }
  parse_rc = ldap_parse_sort_control( ld, resultctrls, &amp;rcode, &amp;attrfail );
  if ( parse_rc != LDAP_SUCCESS ) {
    fprintf( stderr, "ldap_parse_sort_control: %s\n", ldap_err2string( parse_rc ) );
    ldap_unbind( ld );
    return( 1 );
  }
  
  if ( rcode != LDAP_SUCCESS ) {
    fprintf( stderr, "Sort error: %s\n", ldap_err2string( rcode ) );
    if ( attrfail != NULL &amp;&amp; *attrfail != '\0' ) {
      fprintf( stderr, "Bad attribute: %s\n", attrfail );
    }
    ldap_unbind( ld );
    return( 1 );
  }
  /* for each entry print out name + all attrs and values */
  for ( e = ldap_first_entry( ld, result ); e != NULL;
      e = ldap_next_entry( ld, e ) ) {
    if ((vals = ldap_get_values( ld, e, "sn")) != NULL ) {
      if ( vals[0] != NULL ) {
        printf( "%s", vals[0] );
      }
      ldap_value_free( vals );
    }
    if ((vals = ldap_get_values( ld, e, "givenname")) != NULL ) {
      if ( vals[0] != NULL ) {
        printf( "\t%s", vals[0] );
      }
      ldap_value_free( vals );
    }
    printf( "\n" );
  }
  ldap_msgfree( result );
  ldap_free_sort_keylist( sortkeylist );
  ldap_control_free( sortctrl );
  ldap_controls_free( resultctrls );
  ldap_unbind( ld );
  return( 0 );
}
</pre>

<h3 id="use_persist_search">Using the Persistent Search Control</h3>

<p>The control with the OID 2.16.840.1.113730.3.4.3 (or 
<code>LDAP_CONTROL_PERSISTENTSEARCH</code>, as defined in the 
<code>ldap.h</code> header file) is the persistent search control. A 
persistent search (an ongoing search operation), which allows your 
LDAP client to get notification of changes to the directory.</p>

<p>The persistent search control is described in the Internet-Drafts 
<em>Persistent Search: A Simple LDAP Change Notification Mechanism</em> 
and <em>LDAP C API Extensions for Persistent Search</em>. For details, 
see <a href="preface.htm#additional_information">Where to Find 
Additional Information</a>.</p>

<p>To use persistent searching for change notification, you create a 
"persistent search" control that specifies the types of changes that 
you want to track. You include the control in a search request. If 
an entry in the directory is changed, the server determines if the 
entry matches the search criteria in your request and if the change 
is the type of change that you are tracking. If both of these are 
true, the server sends the entry to your client.</p>

<p>You can use this control in conjunction with an "entry change 
notification" control. See <a href="controls.htm#use_entry_notify">"Using 
the Entry Change Notification Control."</a></p>

<p>To create a persistent search control, call 
<code><a href="function.htm#create-persistentsearch-control">ldap_create_persistentsearch_control()</a></code>.</p>

<pre>
  int ldap_create_persistentsearch_control( LDAP *ld,
  int changetypes, int changesonly, int return_echg_ctls,
  char ctl_iscritical, LDAPControl **ctrlp );
</pre>

<p>You can specify the following information:</p>

<ul>
 <li>
  <code>changetypes</code> specifies the type of change you want to 
  track. You can specify any of the following (or any combination 
  of the following using a bitwise <code>OR</code> operator):
  <ul>
   <li>
    <code>LDAP_CHANGETYPE_ADD</code> indicates that you want to track 
    added entries.
   </li>
   <li>
    <code>LDAP_CHANGETYPE_DELETE</code> indicates that you want to 
    track deleted entries.
   </li>
   <li>
    <code>LDAP_CHANGETYPE_MODIFY</code> indicates that you want to 
    track modified entries.
   </li>
   <li>
    <code>LDAP_CHANGETYPE_MODDN</code> indicates that you want to 
    track renamed entries.
   </li>
   <li>
    <code>LDAP_CHANGETYPE_ANY</code> indicates that you want to track 
    all changes to entries.
   </li>
  </ul>
 </li>
 <li>
  <code>changesonly</code> indicates whether or not you want the 
  server to return all entries that initially matched the search 
  criteria (0 to return all entries, or non-zero to return only the 
  entries that change).
 </li>
 <li>
  <code>return_echg_ctls</code> indicates whether or not you want 
  entry change notification controls included with every modified 
  entry returned by the server (non-zero to return entry change 
  notification controls).
 </li>
</ul>

<p>The function passes back an <code>LDAPControl</code> structure 
representing the control in the <code>ctrlp</code> parameter. You 
can add the newly created control to a <code>NULL</code>-terminated 
array of <code>LDAPControl</code> structures and pass this array to 
the <code><a href="function.htm#search-ext">ldap_search_ext()</a></code> 
function.</p>

<p>To end the persistent search, you can either call the 
<code><a href="function.htm#abandon-ext">ldap_abandon_ext()</a></code> 
function to abandon the search operation, or you can call the 
<code><a href="function.htm#unbind">ldap_unbind()</a></code> function 
to disconnect from the server.</p>

<p>For an example showing how to perform a persistent search, refer 
to the example provided with the LDAP C SDK, <code>psearch.c</code>.</p>

<h3 id="use_entry_notify">Using the Entry Change Notification Control</h3>

<p>The control with the OID 2.16.840.1.113730.3.4.7 (or 
<code>LDAP_CONTROL_ENTRYCHANGE</code>, as defined in the 
<code>ldap.h</code> header file) is the "entry change notification" 
control. This control contains additional information about the 
change made to the entry, including the type of change made, the 
change number (which corresponds to an item in the server's change 
log, if the server supports a change log), and, if the entry was 
renamed, the old DN of the entry.</p>

<p>The entry change notification control is described in the 
Internet-Drafts <em>Persistent Search: A Simple LDAP Change 
Notification Mechanism</em> and <em>LDAP C API Extensions for 
Persistent Search</em>. For more information on these documents, see 
<a href="preface.htm#additional_information">Where to Find Additional 
Information</a>.</p>

<p>You use this control in conjunction with a persistent search 
control. (See <a href="controls.htm#use_persist_search">"Using the 
Persistent Search Control."</a>) If you have specified the preference 
for returning entry change notification controls, the server includes 
an entry change notification control with each entry found by the 
search.</p>

<p>To retrieve and parse an entry change notification control 
included with an entry, do the following:</p>

<ol>
 <li>
  Pass the <code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> 
  structure that represents an entry to the 
  <code><a href="function.htm#get-entry-controls">ldap_get_entry_controls()</a></code> 
  function.
 </li>
 <li>
  Pass the entry change notification control to the 
  <code><a href="function.htm#parse-entrychange-control">ldap_parse_entrychange_control()</a></code> 
  function.
 </li>
</ol>

<h3 id="use_virtual_list">Using the Virtual List View Control</h3>

<p>The control with the OID 2.16.840.1.113730.3.4.9 (or 
<code>LDAP_CONTROL_VLVREQUEST</code>, as defined in the 
<code>ldap.h</code> header file) is a virtual list view control. 
When you send a search request with this control and with a 
server-side sorting control to the server, the server should sort 
the results and return the specified subset of entries back to your 
client. This version of the LDAP C SDK supports this control.</p>

<p>The virtual list view control is described in the Internet-Draft 
<em>LDAP Extensions for Scrolling View Browsing of Search Results</em>. 
For details, see <a href="preface.htm#additional_information">Where to 
Find Additional Information</a>.</p>

<h3 id="use_entry_notify">Using the Manage DSA IT Control</h3>

<p>The control with the OID 2.16.840.1.113730.3.4.2 (or 
<code>LDAP_CONTROL_MANAGEDSAIT</code>, as defined in the 
<code>ldap.h</code> header file) is the manage DSA IT control. You 
can use this control to manage <a href="glossary.htm#search_reference">search 
reference</a>s in the directory.</p>

<p>The manage DSA IT control is described in the Internet-Draft <em>LDAP 
Control Extension for Server Side Sorting of Search Results</em>. For 
details, see <a href="preface.htm#additional_information">Where to 
Find Additional Information</a>.</p>

<p>To create this control, create an 
<code><a href="datatype.htm#LDAPControl">LDAPControl</a></code> structure 
and set the <code>ldctl_oid</code> field to 2.16.840.1.113730.3.4.2.</p>

<p>When you add this control to the array of <code>LDAPControl</code> 
structures that you pass to a function (for example, 
<code><a href="function.htm#search-ext">ldap_search_ext()</a></code> or 
<code><a href="function.htm#modify-ext">ldap_modify_ext()</a></code>, the 
server treats search references as ordinary entries. Rather than 
returning a reference to you, the server returns the entry 
containing the reference. This allows your client application to 
manage search references in the directory.</p>

<h3 id="use_pwd_policy">Using Password Policy Controls</h3>

<p>Netscape Directory Server use two server response controls to 
send information back to a client after an LDAP bind operation:</p>

<ul>
 <li>
  The control with the OID 2.16.840.1.113730.3.4.4 (or 
  <code>LDAP_CONTROL_PWEXPIRED</code>, as defined in the 
  <code>ldap.h</code> header file) is the expired password control.
  <p></p>
  This control is used if the server is configured to require users 
  to change their passwords when first logging in and whenever the 
  passwords are reset.
  <p></p>
  If the user is logging in for the first time or if the user's 
  password has been reset, the server sends this control to indicate 
  that the client needs to change the password immediately.
  <p></p>
  At this point, the only operation that the client can perform is 
  to change the user's password. If the client requests any other 
  LDAP operation, the server sends back an 
  <code>LDAP_UNWILLING_TO_PERFORM</code> result code with an expired 
  password control.
 </li>
 <li>
  The control with the OID 2.16.840.1.113730.3.4.5 (or 
  <code>LDAP_CONTROL_PWEXPIRING</code>, as defined in the 
  <code>ldap.h</code> header file) is the password expiration 
  warning control.
  <p></p>
  This control is used if the server is configured to expire user 
  passwords after a certain amount of time.
  <p></p>
  The server sends this control back to the client if the client 
  binds using a password that will soon expire. The 
  <code>ldctl_value</code> field of the <code>LDAPControl</code> 
  structure specifies the number of seconds before the password 
  will expire.
 </li>
</ul>

<p>To get these server response controls when binding, you can do 
the following:</p>

<ol>
 <li>
  Call <code><a href="function.htm#simple-bind">ldap_simple_bind()</a></code> 
  to send a request for an asynchronous bind operation.
 </li>
 <li>
  Call <code><a href="function.htm#result">ldap_result()</a></code> 
  to get the results of the operation.
 </li>
 <li>
  Call the <code><a href="function.htm#parse-result">ldap_parse_result()</a></code> 
  function to parse the result and retrieve the server response 
  controls from the result as an array of <code>LDAPControl</code> 
  structures.
 </li>
</ol>

<p>You can then check the <code>ldctl_oid</code> field to determine 
the OID of the control and the <code>ldctl_value</code> field for 
any data included in the control.</p>

<h3 id="use_proxy_auth_control">Using the Proxied Authorization Control</h3>

<p>Proxied Authorization is an extension to the LDAPv3 protocol 
that allows a bound client to assume the identity of another 
directory entity without rebinding. This allows the client to 
perform operations as if it were bound as the proxied directory 
entity. All directory access (read, write, search, compare, delete, 
and add) is supported by proxied authorization.</p>

<p>This control is supported by Netscape Directory Server 4.1 or later. 
Proxied authorization support is based on the IETF Internet Draft. For 
more information, see <a href="preface.htm#additional_information">Where 
to Find Additional Information</a>.</p>

<p>As an example of proxied authorization, suppose a client is 
bound as <code>uid=bjensen, ou=Engineering, dc=example,dc=com</code>. 
Further suppose the <code>bjensen</code> does not have the right to 
search the <code>ou=Marketing, dc=example,dc=com</code> tree. 
However, <code>uid=lboyd, ou=Marketing, dc=example,dc=com</code> 
does have rights to search the <code>Marketing</code> tree.</p>

<p>Further, <code>lboyd</code> grants proxy right to 
<code>bjensen</code>. In this case, <code>bjensen</code> may bind as 
herself, assume the identity of <code>lboyd</code>, and then search 
the <code>Marketing</code> tree.</p>

<p>This feature is intended as a performance and administrative 
benefit for certain types of directory usage. Specifically, 
applications that want to allow many clients to access or modify 
specific directory data without rebinding as another directory 
entity may want to use this feature.</p>

<h3 id="access_control_proxy">Access Control: The Proxy Right</h3>

<p>Proxied authorization adds an additional access right: proxy. If 
an entry grants the proxy right, then the entity to which that right 
is granted may assume the identity of the granting entity.</p>

<p>For example, if you wanted to allow <code>uid=bjensen</code> the 
right to proxy as <code>uid=lboyd</code>, add the following aci to 
your directory:</p>

<pre>
  aci: (target = "ldap:///uid=lboyd, ou=Marketing,
  dc=example,dc=com")(targetattr=*)(version 3.0;
  aci "grant bjensen the right to proxy as lboyd";
  allow(proxy) userdn="ldap:///uid=bjensen,
  ou=Engineering, dc=example,dc=com";)
</pre>

<p>This aci allows <code>bjensen</code> to assume the identity of 
<code>lboyd</code> for all directory operations. Essentially, 
<code>bjensen</code> can do to the directory whatever 
<code>lboyd</code> has permission to do.</p>

<p>While Netscape Directory Server supports this feature, be aware 
that other directory servers might not support this feature as 
described here. Netscape Directory Server access control (including 
the proxy right) is fully described in the<em> Netscape Directory 
Server Administrator's Guide</em>.</p>

<h3 id="proxy_auth_control">The Proxied Authorization Control</h3>

<p>To support proxied authorization (an extension to the LDAPv3 
protocol), the proxy authorization control has been added to the 
LDAP C SDK in the form of the 
<code><a href="function.htm#create-proxyauth-control">ldap_create_proxyauth_control()</a></code> 
function. You use this function to create the control that allows a 
bound entity to assume the identity of another directory entry.</p>

<p>Proxy authorization is an optional LDAP server feature; it may 
not be supported on all LDAP servers. You should call the proxy 
authorization control function only when interacting with LDAP 
servers that support this LDAPv3 extension. You can check on the 
support of this control by looking at the rootDSE 
<code>supportedControl</code> attrubute. For example, the following 
command uses the ldapsearch utility to display the rootDSE:</p>

<code>ldapsearch -v -h hostname -p 389 -b "" -s base ""</code>

<p>In order for the control to work, the LDAP server that you are 
connecting to must support the server control for proxied 
authorization (OID 2.16.840.1.113730.3.4.12, or 
<code>LDAP_CONTROL_PROXYAUTH</code> as defined in the 
<code>ldap.h</code> header file).</p>

<h3 id="proxy_auth_example">Example</h3>

<p>The following code fragment creates an LDAP connection, sets the 
proxied authorization control, binds to the directory, and then 
performs a search operation using the proxied authorization control. 
A more complete example is also available with the SDK example files.</p>

<p>
 <strong>Code Example 14-3 - Proxied authorization control example</strong>
</p>

<pre>#include &lt;ldap.h&gt;

int            version;
LDAP           *ld;
LDAPControl    *requestctrls[ 2 ];
LDAPControl    *pactrl = NULL;

/* Customize the following host and bind information for your site. */
int        port=389;
char       *host="directory.example.com";
char       *baseDN="dc=example,dc=com";

/* Proxied auth specific information. 
   proxyDN is the entity that will be proxied.
   bindDN and bindpw is for the bind entity that will use the proxyDN. */
char            *proxyDN = "uid=lboyd, ou=marketing, dc=example,dc=com";
char            *bindDN = "uid=bjensen, ou=engineering, dc=example,dc=com";
char            *bindpw = "password";

/* Do general LDAP init stuff */
/* Get a handle to an LDAP connection */
if ( (ld = ldap_init( host, port ) ) == NULL ) {
        printf("ldap_init did not return a conn handle.\n");
        return;
        }
/* set version to ldap version 3 */
version = LDAP_VERSION3;
ldap_set_option( ld, LDAP_OPT_PROTOCOL_VERSION, &amp;version );

/* authenticate to the directory */
if ( ldap_simple_bind_s( ld, bindDN, bindpw ) != LDAP_SUCCESS ) {
        printf("ldap_simple_bind_s failed");
        return (-1);
}

/* create the proxied authorization control */
if ( ldap_create_proxyauth_control( ld, proxyDN, 1, &amp;pactrl ) ) {
   printf("ldap_create_proxyauth_control failed.\n");
   if ( ldap_unbind( ld ) != LDAP_SUCCESS ) {
        printf("ldap_unbind failed\n");
   }
   return(-1);
}

requestctrls[ 0 ] = pactrl;
requestctrls[ 1 ] = NULL;

/* Perform the search using the control */
printf("Searching for %s with the proxy auth control.\n", proxyDN);
if ( ldap_search_ext_s( ld, proxyDN, LDAP_SCOPE_SUBTREE, "(objectclass=*)",
        NULL, 0, requestctrls, NULL, NULL, LDAP_NO_LIMIT, &amp;results ) !=
        LDAP_SUCCESS ) {
                printf("ldap_search_ext failed.\n");
                printf("Something is wrong with proxied auth.\n");
} else {
         print_search_results(ld, results);
}</pre>




<hr class="hide">
</div>
</div>
<div id="footer">
<ul>
<li><a href="../../sitemap.html">Site Map</a></li>
<li><a href="../../security/">Security Updates</a></li>
<li><a href="../../contact/">Contact Us</a></li>
<li><a href="../../foundation/donate.html">Donate</a></li>
</ul>
<p class="copyright">
Portions of this content are &copy; 1998&#8211;2009 by individual mozilla.org
contributors; content available under a Creative Commons license | <a
href="http://www.mozilla.org/foundation/licensing/website-content.html">Details</a>.</p>
<p>
<span>Last modified March 16,  2005</span>
<span><a href="http://bonsai-www.mozilla.org/cvslog.cgi?file=mozilla-org/html/directory/csdk-docs/controls.htm&amp;rev=&amp;root=/www/">Document History</a></span>
</p>
</div>
</div>
</body>
</html>
