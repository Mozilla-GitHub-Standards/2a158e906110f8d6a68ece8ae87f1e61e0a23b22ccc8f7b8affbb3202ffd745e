<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<link rel="top" title="Home" href="http://www.mozilla.org/">
<link rel="stylesheet" type="text/css" href="../../css/print.css"  media="print">
<link rel="stylesheet" type="text/css" href="../../css/base/content.css"  media="all">
<link rel="stylesheet" type="text/css" href="../../css/cavendish/content.css" title="Cavendish" media="screen">
<link rel="stylesheet" type="text/css" href="../../css/base/template.css"  media="screen">
<link rel="stylesheet" type="text/css" href="../../css/cavendish/template.css" title="Cavendish" media="screen">
<link rel="icon" href="../../images/mozilla-16.png" type="image/png">

 <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
 <title>Mozilla LDAP C SDK: Chapter 9 - Comparing Values in Entries</title>
<script src="../../__utm.js" type="text/javascript"></script>
</head>
<body id="www-mozilla-org" class="deepLevel">
<div id="container">
<p class="important">You are currently viewing a snapshot of www.mozilla.org taken on April 21, 2008. Most of this content is
highly out of date (some pages haven't been updated since the project began in 1998) and exists for historical purposes only.  If
there are any pages on this archive site that you think should be added back to www.mozilla.org, please <a
href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Websites&component=www.mozilla.org">file a bug</a>.</p>
<p class="skipLink"><a href="#mainContent" accesskey="2">Skip to main content</a></p>
<div id="header">
<h1><a href="/" title="Return to home page" accesskey="1">Mozilla</a></h1>
<ul>
<li id="menu_aboutus"><a href="../../about/" title="Getting the most out of your online experience">About</a></li>
<li id="menu_developers"><a href="../../developer/" title="Using Mozilla's products for your own applications">Developers</a></li>
<li id="menu_store"><a href="http://store.mozilla.org/?r=mozorg1" title="Shop for Mozilla products on CD and other merchandise">Store</a></li>
<li id="menu_support"><a href="../../support/" title="Installation, trouble-shooting, and the knowledge base">Support</a></li>
<li id="menu_products"><a href="../../products/" title="All software Mozilla currently offers">Products</a></li>
</ul>
<form id="searchbox_002443141534113389537:ysdmevkkknw" action="http://www.google.com/cse" title="mozilla.org Search">
<div>
<label for="q" title="Search mozilla.org's sites">search mozilla:</label>
<input type="hidden" name="cx" value="002443141534113389537:ysdmevkkknw">
<input type="hidden" name="cof" value="FORID:0">
<input type="text" id="q" name="q" accesskey="s" size="30">
<input type="submit" id="submit" value="Go">
</div>
</form>
</div>
<hr class="hide">
<div id="mBody">
<div id="side">

<ul id="nav">
<li><a title="Roadmap" href="../../roadmap.html"><strong> Roadmap</strong></a></li>
<li><a title="Projects" href="../../projects/"><strong> Projects</strong></a></li>
<li><a title="For developers" href="../../developer/"><strong> Coding</strong></a>
<ul>
<li><a title="Module Owners" href="../../owners.html"> Module Owners</a></li>
<li><a title="Hacking" href="../../hacking/"> Hacking</a></li>
<li><a title="Get the Source" href="http://developer.mozilla.org/en/docs/Download_Mozilla_Source_Code"> Get the Source</a></li>
<li><a title="Building Mozilla" href="http://developer.mozilla.org/en/docs/Build_Documentation"> Build It</a></li>
</ul>
</li>
<li><a title="Testing" href="../../quality/"><strong> Testing</strong></a>
<ul>
<li><a title="Downloads of mozilla.org software releases" href="../../download.html"> Releases</a></li>
<li><a title="Latest mozilla builds for testers" href="../../developer/#builds"> Nightly Builds</a></li>
<li><a title="For testers to report bugs" href="https://bugzilla.mozilla.org/"> Report A Problem</a></li>
</ul>
</li>
<li><a title="Tools for mozilla developers" href="../../tools.html"><strong> Tools</strong></a>
<ul>
<li><a title="Bug tracking system for mozilla testers." href="https://bugzilla.mozilla.org/"> Bugzilla</a></li>
<li><a title="Latest status of mozilla builds" href="http://tinderbox.mozilla.org/showbuilds.cgi?tree=Firefox"> Tinderbox</a></li>
<li><a title="Latest checkins" href="http://bonsai.mozilla.org/cvsqueryform.cgi"> Bonsai</a></li>
<li><a title="Source cross reference" href="http://lxr.mozilla.org/seamonkey/"> LXR</a></li>
</ul>
</li>
<li><a title="Frequently Asked Questions." href="../../faq.html"><strong> FAQs</strong></a></li>
</ul>

</div>
<hr class="hide">
<div id="mainContent">





<ul class="snav">
 <li><a href="addmod.htm">Previous</a>
 <li><a href="./">Contents</a>
 <li><a href="ix.htm">Index</a>
 <li><a href="url.htm">Next</a>
</ul>

<h1>Mozilla LDAP C SDK Programmer's Guide</h1>
<h2>Chapter 9 - Comparing Values in Entries</h2>

<p>This chapter explains how to use the API 
functions to compare data in entries in the directory. The 
LDAP API includes functions that you can call to compare the 
value of an attribute in an entry against a specified value.</p>

<p>The chapter includes the following sections:</p>
<ul>
 <li>
  <a href="compare.htm#compare_value_attribute">Comparing the Value of an Attribute</a>
 </li>
 <li>
  <a href="compare.htm#perform_sync_compare">Performing a Synchronous Comparison 
  Operation</a>
 </li>
 <li>
  <a href="compare.htm#perform_async_compare">Performing an Asynchronous 
  Comparison Operation</a>
 </li>
</ul>

<h3 id="compare_value_attribute">Comparing the Value of an Attribute</h3>

<p>To determine if an attribute contains a certain 
value, call one of the following functions:</p>
<ul>
 <li>
  The synchronous 
  <code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code> 
  function (see <a href="compare.htm#perform_sync_compare">"Performing a Synchronous 
  Comparison Operation</a>").
 </li>
 <li>
  The asynchronous 
  <code><a href="function.htm#compare-ext">ldap_compare_ext()</a></code> 
  function (see <a href="compare.htm#perform_async_compare">"Performing an Asynchronous 
  Comparison Operation</a>").
 </li>
</ul>

<p>For more information about the difference between synchronous and 
asynchronous functions, see <a href="using.htm#call_sync_async_function">"Calling 
Synchronous and Asynchronous Functions."</a></p>

<p>Note that both of these functions compare values that are in 
<code><a href="datatype.htm#berval">berval</a></code> structures; this 
allows you to compare binary values. If you just want to compare 
string values, you can call the 
<code><a href="function.htm#compare">ldap_compare()</a></code> or 
<code><a href="function.htm#compare-s">ldap_compare_s()</a></code> function.</p>

<h3 id="perform_sync_compare">Performing a Synchronous Comparison Operation</h3>

<p>If you want to wait for the results of the compare 
operation to complete before continuing, call the synchronous 
<code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code> 
function to compare <a href="datatype.htm#berval">berval</a> structures 
or wait for the results of the compare operation to complete before 
continuing, call the synchronous 
<code><a href="function.htm#compare-s">ldap_compare_s()</a></code> function 
to compare string values. These functions send an LDAP compare request 
to the server and block until the server sends the results of the 
operation back to your client.</p>

<p>Both the <code>ldap_compare_ext_s()</code> 
function and the <code>ldap_compare_s()</code> function return one of 
the following values after the LDAP compare operation completes:</p>
<ul>
 <li>
  <code>LDAP_COMPARE_TRUE</code> indicates that the 
  attribute contains the specified value.
 </li>
 <li>
  <code>LDAP_COMPARE_FALSE</code> indicates that the 
  attribute does not contain the specified value.
 </li>
 <li>
  An error code indicates that a problem has 
  occurred during the operation.
 </li>
</ul>

<p>See the documentation on the 
<code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code> 
function for a list of the possible result codes.</p>

<p>The following section of code uses the synchronous 
<code>ldap_compare_s()</code> function to determine if an entry 
has the value "bjensen@example.com" in the mail attribute.</p>

<h4>Code Example 9-1 - Applying the ldap_compare_s() function</h4>

<pre>
 #include &lt;stdio.h&gt;
 #include "ldap.h"
 ...
 #define COMPARE_DN "uid=bjensen,ou=People,dc=example,dc=com"
 #define COMPARE_ATTR "mail"
 #define COMPARE_VALUE "bjensen@example.com"
 ...
 LDAP      *ld;
 char      *matched_msg = NULL, *error_msg = NULL;
 int       rc;
 ...
 /* Perform the compare operation. */
 rc = ldap_compare_s( ld, COMPARE_DN, COMPARE_ATTR, COMPARE_VALUE );
 switch( rc ) {
 case LDAP_COMPARE_TRUE:
   printf( "%s has the value %s in the %s attribute.\n", COMPARE_DN,
     COMPARE_VALUE, COMPARE_ATTR );
   break;
 case LDAP_COMPARE_FALSE:
   printf( "%s does not have the value %s in the %s attribute.\n",
     COMPARE_DN, COMPARE_VALUE, COMPARE_ATTR );
   break;
 default:
   fprintf( stderr, "ldap_compare_s: %s\n", ldap_err2string( rc ) );
   ldap_get_lderrno( ld, &matched_msg, &error_msg );
   if ( error_msg != NULL && *error_msg != '\0' ) {
     fprintf( stderr, "%s\n", error_msg );
   }
   if ( matched_msg != NULL && *matched_msg != '\0' ) {
     fprintf( stderr,
       "Part of the DN that matches an existing entry: %s\n",
       matched_msg );
   }
   break;
 }
 ldap_unbind_s( ld );
 ...
</pre>

<h3 id="perform_async_compare">Performing an Asynchronous Comparison Operation</h3>

<p>If you want to perform other work (in parallel) while waiting for 
the comparison to complete, call the asynchronous 
<code><a href="function.htm#compare-ext">ldap_compare_ext()</a></code> 
function to compare values in <a href="datatype.htm#berval">berval</a> 
structures or the asynchronous 
<code><a href="function.htm#compare">ldap_compare()</a></code> function 
to compare string values. These functions send an LDAP compare request 
to the server and return an <code>LDAP_SUCCESS</code> result code if 
the request was successfully sent (or an LDAP result code if an error 
occurred).</p>

<p>Both the <code>ldap_compare_ext()</code> 
function and the <code>ldap_compare()</code> function pass back a 
message ID identifying the compare operation. To determine whether the 
server sent a response for this operation to your client, call the 
<code><a href="function.htm#result">ldap_result()</a></code> function 
and pass in this message ID. The <code>ldap_result()</code> function 
uses the message ID to determine if the server sent the results of the 
compare operation. The function passes back the results in an 
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure.</p>

<p>You can call the 
<code><a href="function.htm#parse-result">ldap_parse_result()</a></code> 
function to parse the 
<code><a href="datatype.htm#LDAPMessage">LDAPMessage</a></code> structure to 
determine if the operation was successful. The result code should be 
one of the following:</p>

<ul>
 <li>
  <code>LDAP_COMPARE_TRUE</code> indicates that the 
  attribute contains the specified value.
 </li>
 <li>
  <code>LDAP_COMPARE_FALSE</code> indicates that 
  the attribute does not contain the specified value.
 </li>
 <li>
  An error code indicates that a problem occurred 
  during the operation. (For a list of possible result codes for an 
  LDAP compare operation, see the result code documentation for the 
  <code><a href="function.htm#compare-ext-s">ldap_compare_ext_s()</a></code> 
  function.)
 </li>
</ul>

<p>The following section of code calls 
<code>ldap_compare()</code> to determine if an entry has the value 
"bjensen@example.com" in the mail attribute.</p>

<h4>Code Example  9-2 - Applying the ldap_compare() function</h4>

<pre>  
 #include &lt;stdio.h&gt; 
 #include "ldap.h" 
 ... 
 #define COMPARE_DN "uid=bjensen,ou=People,dc=example,dc=com" 
 #define COMPARE_ATTR "mail" 
 #define COMPARE_VALUE "bjensen@example.com" 
 ... 
 LDAP      *ld; 
 LDAPMessage    *res; 
 LDAPControl    **serverctrls; 
 char      *matched_msg = NULL, *error_msg = NULL; 
 char      **referrals; 
 int        rc, parse_rc, msgid, finished = 0; 
 struct timeval  zerotime; 
 zerotime.tv_sec = zerotime.tv_usec = 0L; 
 ... 
 /* Send the LDAP compare request. */ 
 msgid = ldap_compare( ld, COMPARE_DN, COMPARE_ATTR, COMPARE_VALUE ); 
 if ( msgid &lt; 0 ) { 
   fprintf( stderr, "ldap_compare: %s\n", ldap_err2string( rc ) ); 
   ldap_unbind( ld ); 
   return( 1 ); 
 } 
 /* Poll the server for the results of the LDAP compare operation. */ 
 while ( !finished ) { 
   rc = ldap_result( ld, msgid, 0, &zerotime, &res ); 
   switch ( rc ) { 
   
   case -1: 
     /* An error occurred. */ 
     rc = ldap_get_lderrno( ld, NULL, NULL ); 
     fprintf( stderr, "ldap_result: %s\n", ldap_err2string( rc ) ); 
     ldap_unbind( ld ); 
     return( 1 ); 
 
   case 0: 
       /* The timeout period specified by zerotime was exceeded, so 
          call ldap_result() again and continue to poll for the 
         results. */ 
     break; 
   
   default: 
     /* The client has received the results of the 
        LDAP compare operation from the server. */ 
     finished = 1; 
 
     /* Parse the results received from the server.*/ 
     parse_rc = ldap_parse_result( ld, res, &rc, &matched_msg, 
       &error_msg, &referrals, &serverctrls, 1 ); 
     if ( parse_rc != LDAP_SUCCESS ) { 
       fprintf( stderr, "ldap_parse_result: %s\n", 
         ldap_err2string( parse_rc ) ); 
       ldap_unbind( ld ); 
       return( 1 ); 
     } 
 
     /* Check the results of the LDAP compare operation. */ 
     switch ( rc ) { 
     case LDAP_COMPARE_TRUE: 
       printf( "%s has the value %s in the %s attribute.\n", 
         COMPARE_DN, COMPARE_VALUE, COMPARE_ATTR ); 
       break; 
     case LDAP_COMPARE_FALSE: 
       printf( "%s does not have the value %s in the %s attribute.\n", 
         COMPARE_DN, COMPARE_VALUE, COMPARE_ATTR ); 
       break; 
     default: 
       fprintf( stderr, "ldap_compare: %s\n", ldap_err2string( rc ) ); 
       if ( error_msg != NULL & *error_msg != '\0' ) { 
         fprintf( stderr, "%s\n", error_msg ); 
       } 
       if ( matched_msg != NULL && *matched_msg != '\0' ) { 
         fprintf( stderr, 
           "Part of the DN that matches an existing entry: %s\n", 
           matched_msg ); 
       } 
       break; 
     } 
   } 
 } 
 ...
</pre>

<h3 id="example_compare_sync">Example: Comparing a Value in an Entry (Synchronous)</h3>

<p>The following sample program calls the synchronous 
<code><a href="function.htm#compare-s">ldap_compare_s()</a></code> 
function to determine if a user's entry has the value 
"bjensen@example.com" in the mail attribute.</p>

<h4>Code Example 9-3 - Comparing entry values using ldap_compare_s()</h4>

<pre> 
 #include &lt;stdio.h&gt;
 #include "ldap.h"
 /* Change these as needed. */
 #define HOSTNAME "localhost"
 #define PORTNUMBER LDAP_PORT
 #define COMPARE_DN "uid=bjensen,ou=People,dc=example,dc=com"
 #define COMPARE_ATTR "mail"
 #define COMPARE_VALUE "bjensen@example.com"
 int
 main( int argc, char **argv )
 {
   LDAP      *ld;
   char      *matched_msg = NULL, *error_msg = NULL;
   int        rc;
 /* Get a handle to an LDAP connection. */
   if ( (ld = ldap_init( HOSTNAME, PORTNUMBER )) == NULL ) {
     perror( "ldap_init" );
     return( 1 );
   }
 /* Bind anonymously to the server. */
   rc = ldap_simple_bind_s( ld, NULL, NULL );
   if ( rc != LDAP_SUCCESS ) {
     fprintf( stderr, "ldap_simple_bind_s: %s\n", ldap_err2string( rc ) );
     ldap_get_lderrno( ld, &matched_msg, &error_msg );
     if ( error_msg != NULL && *error_msg != '\0' ) {
       fprintf( stderr, "%s\n", error_msg );
     }
     if ( matched_msg != NULL && *matched_msg != '\0' ) {
       fprintf( stderr,
         "Part of the DN that matches an existing entry: %s\n",
         matched_msg );
     }
     ldap_unbind_s( ld );
     return( 1 );
   }
 /* Perform the compare operation. */
   rc = ldap_compare_s( ld, COMPARE_DN, COMPARE_ATTR, COMPARE_VALUE );
   switch( rc ) {
   case LDAP_COMPARE_TRUE:
     printf( "%s has the value %s in the %s attribute.\n", COMPARE_DN, 
COMPARE_VALUE, COMPARE_ATTR );
     break;
   case LDAP_COMPARE_FALSE:
     printf( "%s does not have the value %s in the %s attribute.\n", 
COMPARE_DN, COMPARE_VALUE, COMPARE_ATTR );
     break;
   default:
     fprintf( stderr, "ldap_compare_s: %s\n", ldap_err2string( rc ) );
     ldap_get_lderrno( ld, &matched_msg, &error_msg );
     if ( error_msg != NULL && *error_msg != '\0' ) {
       fprintf( stderr, "%s\n", error_msg );
     }
     if ( matched_msg != NULL && *matched_msg != '\0' ) {
       fprintf( stderr,
         "Part of the DN that matches an existing entry: %s\n",
         matched_msg );
     }
     break;
   }
   ldap_unbind_s( ld );
   return 0;
 }
</pre>

<h3 id="example_compare_async">Example: Comparing a Value in an Entry (Asynchronous)</h3>

<p>The following sample program calls the asynchronous 
<code><a href="function.htm#compare">ldap_compare()</a></code> function 
to determine if a user's entry has the value "bjensen@example.com" in 
the mail attribute.</p>

<h4>Code Example  9-4 - Comparing entry values using ldap_compare()</h4>

<pre> #include &lt;stdio.h&gt;
 #include "ldap.h"
 void do_other_work();
 int global_counter = 0;
 /* Change these as needed. */
 #define HOSTNAME "localhost"
 #define PORTNUMBER LDAP_PORT
 #define COMPARE_DN "uid=bjensen,ou=People,dc=example,dc=com"
 #define COMPARE_ATTR "mail"
 #define COMPARE_VALUE "bjensen@example.com"
 int
 main( int argc, char **argv )
 {
   LDAP      *ld;
   LDAPMessage    *res;
   LDAPControl    **serverctrls;
   char      *matched_msg = NULL, *error_msg = NULL;
   char      **referrals;
   int        rc, parse_rc, msgid, finished = 0;
   struct timeval  zerotime;
   zerotime.tv_sec = zerotime.tv_usec = 0L;
 /* Get a handle to an LDAP connection. */
   if ( (ld = ldap_init( HOSTNAME, PORTNUMBER )) == NULL ) {
     perror( "ldap_init" );
     return( 1 );
   }
 /* Bind anonymously to the server. */
   rc = ldap_simple_bind_s( ld, NULL, NULL );
   if ( rc != LDAP_SUCCESS ) {
     fprintf( stderr, "ldap_simple_bind_s: %s\n", ldap_err2string( rc ) );
     ldap_get_lderrno( ld, NULL, &error_msg );
     if ( error_msg != NULL && *error_msg != '\0' ) {
       fprintf( stderr, "%s\n", error_msg );
     }
     ldap_unbind_s( ld );
     return( 1 );
   }
   /* Send the LDAP compare request. */
   msgid = ldap_compare( ld, COMPARE_DN, COMPARE_ATTR, COMPARE_VALUE );
   if ( msgid &lt; 0 ) {
     fprintf( stderr, "ldap_compare: %s\n", ldap_err2string( rc ) );
     ldap_unbind( ld );
     return( 1 );
   }
  /* Poll the server for the results of the LDAP compare operation. */
   while ( !finished ) {
     rc = ldap_result( ld, msgid, 0, &zerotime, &res );
     switch ( rc ) {
     case -1:
       /* An error occurred. */
       rc = ldap_get_lderrno( ld, NULL, NULL );
       fprintf( stderr, "ldap_result: %s\n", ldap_err2string( rc ) );
       ldap_unbind( ld );
       return( 1 );
     case 0:
       /* The timeout period specified by zerotime was exceeded.
          This means that your client has not yet received the
          results of the LDAP compare operation.
          Break out of this switch statement, and continue calling
          ldap_result() to poll for the results. */
       break;
     default:
       /* The client has received the results of the
          LDAP compare operation from the server. */
       finished = 1;
       /* Parse the results received from the server. Note the last argument is a non-zero 
          value, which indicates that the LDAPMessage structure will be freed when done. 
          (No need to call ldap_msgfree().) */
       parse_rc = ldap_parse_result( ld, res, &rc, &matched_msg, &error_msg, &referrals, &serverctrls, 1 );
       if ( parse_rc != LDAP_SUCCESS ) {
         fprintf( stderr, "ldap_parse_result: %s\n", ldap_err2string( parse_rc ) );
         ldap_unbind( ld );
         return( 1 );
       }
       /* Check the results of the LDAP compare operation. */
       switch ( rc ) {
       case LDAP_COMPARE_TRUE:
         printf( "%s has the value %s in the %s attribute.\n"
           "Counted to %d while waiting for the compare operation.\n",
           COMPARE_DN, COMPARE_VALUE, COMPARE_ATTR, global_counter );
         break;
       case LDAP_COMPARE_FALSE:
         printf( "%s does not have the value %s in the %s attribute.\n"
           "Counted to %d while waiting for the compare operation.\n",
           COMPARE_DN, COMPARE_VALUE, COMPARE_ATTR, global_counter );
         break;
       default:
         fprintf( stderr, "ldap_compare: %s\n", ldap_err2string( rc ) );
         if ( error_msg != NULL & *error_msg != '\0' ) {
           fprintf( stderr, "%s\n", error_msg );
         }
         if ( matched_msg != NULL && *matched_msg != '\0' ) {
           fprintf( stderr,
             "Part of the DN that matches an existing entry: %s\n",
             matched_msg );
         }
         break;
       }
     }
     /* Do other work while waiting for the results of the compare operation. */
     if ( !finished ) {
       do_other_work();
     }
   }
   ldap_unbind( ld );
   return 0;
 }  
 /*
  * Perform other work while polling for results.  This doesn't do anything
  * useful, but it could.
  */
 void
 do_other_work()
 {
     global_counter++;
 }</pre>




<hr class="hide">
</div>
</div>
<div id="footer">
<ul>
<li><a href="../../sitemap.html">Site Map</a></li>
<li><a href="../../security/">Security Updates</a></li>
<li><a href="../../contact/">Contact Us</a></li>
<li><a href="../../foundation/donate.html">Donate</a></li>
</ul>
<p class="copyright">
Portions of this content are &copy; 1998&#8211;2009 by individual mozilla.org
contributors; content available under a Creative Commons license | <a
href="http://www.mozilla.org/foundation/licensing/website-content.html">Details</a>.</p>
<p>
<span>Last modified March 16,  2005</span>
<span><a href="http://bonsai-www.mozilla.org/cvslog.cgi?file=mozilla-org/html/directory/csdk-docs/compare.htm&amp;rev=&amp;root=/www/">Document History</a></span>
</p>
</div>
</div>
</body>
</html>
