<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<link rel="top" title="Home" href="http://www.mozilla.org/">
<link rel="stylesheet" type="text/css" href="../../css/print.css"  media="print">
<link rel="stylesheet" type="text/css" href="../../css/base/content.css"  media="all">
<link rel="stylesheet" type="text/css" href="../../css/cavendish/content.css" title="Cavendish" media="screen">
<link rel="stylesheet" type="text/css" href="../../css/base/template.css"  media="screen">
<link rel="stylesheet" type="text/css" href="../../css/cavendish/template.css" title="Cavendish" media="screen">
<link rel="icon" href="../../images/mozilla-16.png" type="image/png">

 <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
 <title>Mozilla LDAP C SDK: Chapter 10 - Working with LDAP URLs</title>
<script src="../../__utm.js" type="text/javascript"></script>
</head>
<body id="www-mozilla-org" class="deepLevel">
<div id="container">
<p class="important">You are currently viewing a snapshot of www.mozilla.org taken on April 21, 2008. Most of this content is
highly out of date (some pages haven't been updated since the project began in 1998) and exists for historical purposes only.  If
there are any pages on this archive site that you think should be added back to www.mozilla.org, please <a
href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Websites&component=www.mozilla.org">file a bug</a>.</p>
<p class="skipLink"><a href="#mainContent" accesskey="2">Skip to main content</a></p>
<div id="header">
<h1><a href="/" title="Return to home page" accesskey="1">Mozilla</a></h1>
<ul>
<li id="menu_aboutus"><a href="../../about/" title="Getting the most out of your online experience">About</a></li>
<li id="menu_developers"><a href="../../developer/" title="Using Mozilla's products for your own applications">Developers</a></li>
<li id="menu_store"><a href="http://store.mozilla.org/?r=mozorg1" title="Shop for Mozilla products on CD and other merchandise">Store</a></li>
<li id="menu_support"><a href="../../support/" title="Installation, trouble-shooting, and the knowledge base">Support</a></li>
<li id="menu_products"><a href="../../products/" title="All software Mozilla currently offers">Products</a></li>
</ul>
<form id="searchbox_002443141534113389537:ysdmevkkknw" action="http://www.google.com/cse" title="mozilla.org Search">
<div>
<label for="q" title="Search mozilla.org's sites">search mozilla:</label>
<input type="hidden" name="cx" value="002443141534113389537:ysdmevkkknw">
<input type="hidden" name="cof" value="FORID:0">
<input type="text" id="q" name="q" accesskey="s" size="30">
<input type="submit" id="submit" value="Go">
</div>
</form>
</div>
<hr class="hide">
<div id="mBody">
<div id="side">

<ul id="nav">
<li><a title="Roadmap" href="../../roadmap.html"><strong> Roadmap</strong></a></li>
<li><a title="Projects" href="../../projects/"><strong> Projects</strong></a></li>
<li><a title="For developers" href="../../developer/"><strong> Coding</strong></a>
<ul>
<li><a title="Module Owners" href="../../owners.html"> Module Owners</a></li>
<li><a title="Hacking" href="../../hacking/"> Hacking</a></li>
<li><a title="Get the Source" href="http://developer.mozilla.org/en/docs/Download_Mozilla_Source_Code"> Get the Source</a></li>
<li><a title="Building Mozilla" href="http://developer.mozilla.org/en/docs/Build_Documentation"> Build It</a></li>
</ul>
</li>
<li><a title="Testing" href="../../quality/"><strong> Testing</strong></a>
<ul>
<li><a title="Downloads of mozilla.org software releases" href="../../download.html"> Releases</a></li>
<li><a title="Latest mozilla builds for testers" href="../../developer/#builds"> Nightly Builds</a></li>
<li><a title="For testers to report bugs" href="https://bugzilla.mozilla.org/"> Report A Problem</a></li>
</ul>
</li>
<li><a title="Tools for mozilla developers" href="../../tools.html"><strong> Tools</strong></a>
<ul>
<li><a title="Bug tracking system for mozilla testers." href="https://bugzilla.mozilla.org/"> Bugzilla</a></li>
<li><a title="Latest status of mozilla builds" href="http://tinderbox.mozilla.org/showbuilds.cgi?tree=Firefox"> Tinderbox</a></li>
<li><a title="Latest checkins" href="http://bonsai.mozilla.org/cvsqueryform.cgi"> Bonsai</a></li>
<li><a title="Source cross reference" href="http://lxr.mozilla.org/seamonkey/"> LXR</a></li>
</ul>
</li>
<li><a title="Frequently Asked Questions." href="../../faq.html"><strong> FAQs</strong></a></li>
</ul>

</div>
<hr class="hide">
<div id="mainContent">





<ul class="snav">
 <li><a href="compare.htm">Previous</a>
 <li><a href="./">Contents</a>
 <li><a href="ix.htm">Index</a>
 <li><a href="adv_part.htm">Next</a>
</ul>

<h1>Mozilla LDAP C SDK Programmer's Guide</h1>
<h2>Chapter 10 - Working with LDAP URLs</h2>

<p>This chapter explains how you can call 
functions to parse an LDAP URL into its components and to process a 
search request specified by an LDAP URL.</p>

<p>The chapter contains the following sections:</p>

<ul>
 <li><a href="url.htm#understand_ldap_url">Understanding LDAP URLs</a>
 <li><a href="url.htm#example_ldap_url">Examples of LDAP URLs</a>
 <li><a href="url.htm#determine_ldap_url">Determining If a URL is an LDAP URL</a>
 <li><a href="url.htm#get_components">Getting the Components of an LDAP URL</a>
 <li><a href="url.htm#free_components">Freeing the Components of an LDAP URL</a>
 <li><a href="url.htm#process_ldap_url">Processing an LDAP URL</a>
</ul>

<h3 id="understand_ldap_url">Understanding LDAP URLs</h3>

<p>An LDAP URL is a URL that begins with the <code>ldap://</code> 
protocol prefix (or <code>ldaps://</code>, if the server is 
communicating over an SSL connection) and specifies a search request 
sent to an LDAP server.</p>

<p>LDAP URLs have the following syntax:</p>
<code>ldap[s]://hostname:portbase_dn?attributes?scope?filter</code>

<p>The <code>ldap://</code> protocol is used to connect to LDAP 
servers over unsecured connections, and the <code>ldaps://</code> 
protocol is used to connect to LDAP servers over SSL connections.</p>

<p>Table 10-1 lists the components of an LDAP URL.</p>

<p><strong>Table 10-1 - Components of an LDAP URL</strong></p>

<table class="data">
 <tr>
 <th>Component</th>
 <th>Description</th>
 </tr>
 <tr>
 <td><code>hostname</code></td>
 <td>
  Name (or IP address in dotted format) of the LDAP server (for example, 
  <code>ldap.example.com</code> or <code>192.202.185.90</code>).
 </td>
 </tr>
 <tr>
 <td><code>port</code></td>
 <td>
  Port number of the LDAP server (for example, 696).
  <p></p>
  If no port is specified, the standard LDAP port (389) is used.
 </td>
 </tr>
 <tr>
 <td><code>base_dn</code></td>
 <td>
  Distinguished name (DN) of an entry in the directory. This DN 
  identifies the entry that is starting point of the search.
  <p></p>
  If this component is empty, the search starts at the root DN.
 </td>
 </tr>
 <tr>
 <td><code>attributes</code></td>
 <td>
  The attributes to be returned. To specify more than one attribute, 
  use commas to delimit the attributes (for example, 
  "<code>cn,mail,telephoneNumber</code>").
  <p></p>
  If no attributes are specified in the URL, all attributes are 
  returned.
 </td>
 </tr>
 <tr>
 <td><code>scope</code></td>
 <td>The scope of the search, which can be one of these values:
  <ul>
   <li>
    <code>base</code> retrieves information only about the 
    distinguished name (<em>&lt;base_dn&gt;</em>) specified in the URL.
   <li>
    <code>one</code> retrieves information about entries one level 
    below the distinguished name (<em>&lt;base_dn&gt;</em>) specified 
    in the URL. The base entry is not included in this scope.
   <li>
    <code>sub</code> retrieves information about entries at all levels 
    below the distinguished name (<em>&lt;base_dn&gt;</em>) specified 
    in the URL. The base entry is included in this scope.
  </ul>
  If no scope is specified, the server performs a <code>base</code> 
  search.
 </td>
 </tr>
 <tr>
 <td><code>filter</code></td>
 <td>
  Search filter to apply to entries within the specified scope of the 
  search.
  <p></p>
  If no filter is specified, the server uses the filter 
  <code>(objectClass=*)</code>.
 </td>
 </tr>
</table>

<p>Any "unsafe" characters in the URL need to be represented by a 
special sequence of characters (this is often called <strong>escaping 
unsafe characters</strong>). For example, a space must be represented 
as <code>%20</code>. Thus, the distinguished name <code>"ou=Product 
Development"</code> must be encoded as 
<code>"ou=Product%20Development"</code>.</p>

<p>Note that <code>attributes</code>, <code>scope</code>, and 
<code>filter</code> are identified by their positions in the URL. 
If you do not want to specify any attributes, you still need to 
include the question marks delimiting that field.</p>

<p>For example, to specify a subtree search starting from 
<code>"dc=example,dc=com"</code> that returns all attributes for 
entries matching <code>"(sn=Jensen)"</code>, use the following URL:</p>

<code>ldap://ldap.example.com/dc=example,dc=com??sub?(sn=Jensen)</code>

<p>Note that the two consecutive question marks ("??") indicates 
that no attributes have been specified. Since no specific attributes 
are identified in the URL, all attributes are returned in the search.</p>

<h3 id="example_ldap_url">Examples of LDAP URLs</h3>

<p>The following LDAP URL specifies a base search for the entry with 
the distinguished name <code>"dc=example,dc=com"</code>.</p>

<code>ldap://ldap.example.com/dc=example,dc=com</code>

<ul>
 <li>
  Because no port number is specified, the standard LDAP port number 
  (389) is used.
 <li>
  Because no attributes are specified, the search returns all attributes.
 <li>
  Because no search scope is specified, the search is restricted to the 
  base entry <code>"dc=example,dc=com"</code>
 <li>
  Because no filter is specified, the default filter 
  <code>"(objectclass=*)"</code> is used.
</ul>

<p>The following LDAP URL retrieves the <code>postalAddress</code> 
attribute of the <code>dc=example,dc=com</code> entry:</p>

<code>ldap://ldap.example.com/dc=example,dc=com?postalAddress</code>
<ul>
 <li>
  Because no search scope is specified, the search is restricted to the 
  base entry <code>"dc=example,dc=com"</code>.
 <li>
  Because no filter is specified, the default filter 
  <code>"(objectclass=*)"</code> is used.
</ul>

<p>The following LDAP URL retrieves the <code>cn</code>, 
<code>mail</code>, and <code>telephoneNumber</code> attributes of 
the entry for Barbara Jensen:</p>

<pre>ldap://ldap.example.com/uid=bjensen,ou=People,dc=example,dc=com? \
 cn,mail,telephoneNumber</pre>

<ul>
 <li>
  Because no search scope is specified, the search is restricted to the 
  base entry <code>"uid=bjensen,ou=People,dc=example,dc=com"</code>.
 <li>
  Because no filter is specified, the default filter 
  <code>"(objectclass=*)"</code> is used.
</ul>

<p>The following LDAP URL specifies a search for entries that have 
the last name <code>Jensen</code> and are at any level under 
<code>"dc=example,dc=com"</code>:</p>

<code>ldap://ldap.example.com/dc=example,dc=com??sub?(sn=Jensen)</code>

<ul>
 <li>
  Because no attributes are specified, the search returns all attributes.
 <li>
  Because the search scope is <code>sub</code>, the search encompasses 
  the base entry <code>"dc=example,dc=com"</code> and entries at all 
  levels under the base entry.
</ul>

<p>The following LDAP URL specifies a search for the object class 
for all entries one level under <code>"dc=example,dc=com"</code>:</p>

<code>ldap://ldap.example.com/dc=example,dc=com?objectClass?one</code>

<ul>
 <li>
  Because the search scope is <code>one</code>, the search encompasses 
  all entries one level under the base entry 
  <code>"dc=example,dc=com"</code>. The search scope does not include 
  the base entry.
 <li>
  Because no filter is specified, the default filter 
  <code>"(objectclass=*)"</code> is used.
  <p></p>
  <strong>Note:</strong>The syntax for LDAP URLs does not include any 
  means for specifying credentials or passwords. Search requests 
  initiated through LDAP URLs are unauthenticated.
</ul>

<h3 id="determine_ldap_url">Determining If a URL is an LDAP URL</h3>

<p>To determine whether a URL is an LDAP URL, call the 
<code><a href="function.htm#is-ldap-url">ldap_is_ldap_url()</a></code> 
function. This function returns a nonzero value if the URL is an 
LDAP URL. If the URL is not an LDAP URL, the function returns 0.</p>

<p>The following section of code determines if a URL is an LDAP URL.</p>

<p><strong>Code Example 10-1 - Parsing an LDAP URL</strong></p>

<pre>#include &lt;ldap.h&gt;
...
char *my_url = "ldap://ldap.ipalnet.com/dc=example,dc=com";
...
if ( ldap_is_ldap_url( my_url ) != 0 ) {
  printf( "%s is an LDAP URL.\n", my_url );
} else {
  printf( "%s is not an LDAP URL.\n", my_url );
}
...</pre>

<p>To verify that a URL complies with the LDAP URL syntax, you 
should call the 
<code><a href="function.htm#url-parse">ldap_url_parse()</a></code> 
function (see <a href="url.htm#get_components">"Getting the Components 
of an LDAP URL"</a>).</p>

<h3 id="get_components">Getting the Components of an LDAP URL</h3>

<p>To get the individual components of the URL, call the 
<code><a href="function.htm#url-parse">ldap_url_parse()</a></code> 
function. This function returns the LDAP URL components in an 
<code><a href="datatype.htm#LDAPURLDesc">LDAPURLDesc</a></code> structure, 
which is shown here:</p>

<pre>typedef struct ldap_url_desc {
  char *lud_host;
  int lud_port;
  char *lud_dn;
  char **lud_attrs;
  int lud_scope;
  char *lud_filter;
  unsigned long lud_options;
} LDAPURLDesc;</pre>

<p>Here is a list of the field descriptions:</p>

<p>
 <strong>Table 10-2 - ldap_url_desc field descriptions</strong>
</p>

<table class="data">
 <tr>
  <td><code>lud_host</code></td>
  <td>The name of the host in the URL.</td>
 </tr>
 <tr>
  <td><code>lud_port</code></td>
  <td>The number of the port in the URL.</td>
 </tr>
 <tr>
  <td><code>lud_dn</code></td>
  <td>The distinguished name in the URL.</td>
 </tr>
 <tr>
  <td><code>lud_attrs</code></td>
  <td>A pointer to a <code>NULL</code>-terminated array of the 
   attributes specified in the URL.
  </td>
 </tr>
 <tr>
  <td><code>lud_scope</code></td>
  <td>The scope of the search specified in the URL. This field can 
   have the following values:
   <ul>
    <li><code>LDAP_SCOPE_BASE</code> specifies a search of the 
     base entry.
    <li><code>LDAP_SCOPE_ONELEVEL</code> specifies a search of all 
     entries one level under the base entry (not including the base 
     entry).
    <li><code>LDAP_SCOPE_SUBTREE</code> specifies a search of all 
     entries at all levels under the base entry (including the base 
     entry).
   </ul>
  </td>
 </tr>
 <tr>
  <td><code>lud_filter</code></td>
  <td>Search filter included in the URL.</td>
 </tr>
 <tr>
  <td><code>lud_options</code></td>
  <td>Options (if <code>LDAP_URL_OPT_SECURE</code>, indicates that 
   the protocol is <code>ldaps://</code> instead of 
   <code>ldap://</code>).
  </td>
 </tr>
</table>

<p>The following section of code parses an LDAP URL and prints out 
each component of the URL.</p>

<p><strong>Code Example 10-2 - Parsing an LDAP URL</strong></p>

<pre>#include &lt;stdio.h&gt;
#include &lt;ldap.h&gt;
...
char *my_url = "ldap://ldap.example.com:5000/dc=example,dc=com?cn,mail,telephoneNumber?sub? 
(sn=Jensen)";
LDAPURLDesc *ludpp;
int res, i;
...
if ( ( res = ldap_url_parse( my_url, &amp;ludpp ) ) != 0 ) {
  switch( res ){
    case LDAP_URL_ERR_NOTLDAP:
      printf( "URL does not begin with \"ldap://\"\n" );
      break;
    case LDAP_URL_ERR_NODN:
      printf( "URL missing trailing slash after host or port\n" );
      break;
    case LDAP_URL_ERR_BADSCOPE:
      printf( "URL contains an invalid scope\n" );
      break;
    case LDAP_URL_ERR_MEM:
      printf( "Not enough memory\n" );
      break;
    default:
      printf( "Unknown error\n" );
  }
  return( 1 );
}
printf( "Components of the URL:\n" );
printf( "Host name: %s\n", ludpp-&gt;lud_host );
printf( "Port number: %d\n", ludpp-&gt;lud_port );
if ( ludpp-&gt;lud_dn != NULL ) { 
  printf( "Base entry: %s\n", ludpp-&gt;lud_dn ); 
} else { 
  printf( "Base entry: Root DN\n" ); 
} 
if ( ludpp-&gt;lud_attrs != NULL ) { 
  printf( "Attributes returned: \n" ); 
  for ( i=0; ludpp-&gt;lud_attrs[i] != NULL; i++ ) { 
    printf( "\t%s\n", ludpp-&gt;lud_attrs[i] ); 
  } 
} else { 
  printf( "No attributes returned.\n" ); 
} 
printf( "Scope of the search: " );
switch( ludpp-&gt;lud_scope ) {
  case LDAP_SCOPE_BASE:
    printf( "base\n" );
    break;
  case LDAP_SCOPE_ONELEVEL:
    printf( "one\n" );
    break;
  case LDAP_SCOPE_SUBTREE:
    printf( "sub\n" );
    break;
  default:
    printf( "Unknown scope\n" );
}
printf( "Filter: %s\n", ludpp-&gt;lud_filter );
...</pre>

<p>The code prints out the following results:</p>

<pre>Components of the URL:
Host name: ldap.example.com
Port number: 5000
Base entry: dc=example,dc=com
Attributes returned:
  cn
  mail
  telephoneNumber
Scope of the search: sub
Filter: (sn=Jensen)</pre>

<h3 di="free_components">Freeing the Components of an LDAP URL</h3>

<p>When you have finished working with the components of an LDAP 
URL, you should free the 
<code><a href="datatype.htm#LDAPURLDesc">LDAPURLDesc</a></code> structure 
from memory by calling the 
<code><a href="function.htm#free-urldesc">ldap_free_urldesc()</a></code> 
function.</p>

<p>The following section of code parses an LDAP URL and then frees 
the <code><a href="datatype.htm#LDAPURLDesc">LDAPURLDesc</a></code> 
structure from memory after verifying that the LDAP URL is valid.</p>

<p>
 <strong>Code Example 10-3 - Using ldap_free_urldesc() to free the 
 components of an LDAP URL</strong>
</p>

<pre>#include &lt;stdio.h&gt;
#include &lt;ldap.h&gt;
...
char *my_url = "ldap://ldap.example.com:5000/dc=example,dc=com?cn,mail, \ 
  telephoneNumber?sub?(sn=Jensen)";
LDAPURLDesc *ludpp;
int res, i;
...
if ( ( res = ldap_url_parse( my_url, &amp;ludpp ) ) != 0 ) {
  switch( res ){
    case LDAP_URL_ERR_NOTLDAP:
      printf( "URL does not begin with \"ldap://\"\n" );
      break;
    case LDAP_URL_ERR_NODN:
      printf( "URL does not contain a distinguished name\n" );
      break;
    case LDAP_URL_ERR_BADSCOPE:
      printf( "URL contains an invalid scope\n" );
      break;
    case LDAP_URL_ERR_MEM:
      printf( "Not enough memory\n" );
      break;
    default:
      printf( "Unknown error\n" );
  }
  return( 1 );
}
printf( "URL is a valid LDAP URL\n" );
ldap_free_urldesc( ludpp );
...</pre>

<h3 id="process_ldap_url">Processing an LDAP URL</h3>

<p>To process an LDAP URL search request, call the 
<code><a href="function.htm#url-search-s">ldap_url_search_s()</a></code>, 
<code><a href="function.htm#url-search-st">ldap_url_search_st()</a></code>, 
or <code><a href="function.htm#url-search">ldap_url_search()</a></code> 
function.</p>

<ul>
 <li>
  <code><a href="function.htm#url-search-s">ldap_url_search_s()</a></code> is 
  a synchronous function that completes the search operation before 
  returning. Call this function if you need to wait for the operation 
  to finish before continuing.
  <p></p>
  The <code>ldap_url_search_s()</code> function returns 
  <code>LDAP_SUCCESS</code> if the operation completed successfully. 
  If an error occurred, the function returns an error code. (See 
  <a href="error.htm">"Result Codes"</a> for a complete 
  listing of error codes.)
 <li>
  <code><a href="function.htm#url-search-st">ldap_url_search_st()</a></code> is 
  a synchronous function that allows a certain amount of time for the 
  completion of the search operation. Call this function if you need to 
  wait for the operation to complete and if you want to set a timeout 
  period for the operation.
 <li>
  <code><a href="function.htm#url-search">ldap_url_search()</a></code> is an 
  asynchronous function that initiates the search operation but does 
  not wait for the operation to complete. Call this function if you 
  want to perform other work (in parallel) while waiting for the 
  operation to complete.
  <p></p>
  The <code>ldap_url_search()</code> function returns a message ID 
  identifying the search operation. To determine whether the operation 
  is completed or still in progress, call the 
  <code><a href="function.htm#result">ldap_result()</a></code> function.
  <p></p>
  After the operation is completed, call the 
  <code><a href="function.htm#result2error">ldap_result2error()</a></code> 
  function to determine whether the operation was successful. If the 
  operation completed successfully, the <code>ldap_result2error()</code> 
  function returns <code>LDAP_SUCCESS</code>. If an error occurred, 
  the function returns an error code. See <a href="error.htm">Chapter 
  19 - Result Codes</a> for a complete listing.
</ul>

<p>For more information about the difference between synchronous and 
asynchronous functions, see <a href="using.htm#call_sync_async_function">"Calling 
Synchronous and Asynchronous Functions."</a></p>

<p>The following example processes a search request from an LDAP URL.</p>

<p>
 <strong>Code Example 10-4 - Processing an LDAP URL search request</strong>
</p>

<pre>#include &lt;ldap.h&gt;
...
LDAP *ld;
LDAPMessage *result;
char *my_url = "ldap://ldap.example.com/dc=example,dc=com?cn,mail, \
  telephoneNumber?sub?(sn=Jensen)";
/* Process the search request in the URL. */
if ( ldap_url_search_s( ld, my_url, 0, &amp;result ) != LDAP_SUCCESS ) {
  ldap_perror( ld, "ldap_url_search_s" );
  return( 1 );
}</pre>




<hr class="hide">
</div>
</div>
<div id="footer">
<ul>
<li><a href="../../sitemap.html">Site Map</a></li>
<li><a href="../../security/">Security Updates</a></li>
<li><a href="../../contact/">Contact Us</a></li>
<li><a href="../../foundation/donate.html">Donate</a></li>
</ul>
<p class="copyright">
Portions of this content are &copy; 1998&#8211;2009 by individual mozilla.org
contributors; content available under a Creative Commons license | <a
href="http://www.mozilla.org/foundation/licensing/website-content.html">Details</a>.</p>
<p>
<span>Last modified March 16,  2005</span>
<span><a href="http://bonsai-www.mozilla.org/cvslog.cgi?file=mozilla-org/html/directory/csdk-docs/url.htm&amp;rev=&amp;root=/www/">Document History</a></span>
</p>
</div>
</div>
</body>
</html>
